{
  "name": "libft",
  "version": "1.0.0",
  "description": "42 School C Library - Extended standard library functions",
  "author": "dlesieur",
  "categories": [
    "backtrack",
    "classes",
    "ctype",
    "data_structures",
    "debug",
    "math",
    "memory",
    "render",
    "sort",
    "stdio",
    "stdlib",
    "strings"
  ],
  "functions": {
    "projection_orthographic": {
      "name": "projection_orthographic",
      "category": "classes",
      "category_path": "classes/render/camera",
      "tags": [
        "iteration",
        "basic"
      ],
      "prototype": "/* Function: projection_orthographic */",
      "description": "No description available.",
      "parameters": [],
      "return_value": "Return value description not available.",
      "examples": [
        {
          "title": "Basic usage of projection_orthographic",
          "code": "// Example usage of projection_orthographic\n// TODO: Add real example",
          "output": null
        }
      ],
      "complexity": null,
      "notes": [],
      "see_also": [],
      "updated_at": null,
      "author_role": null,
      "related": [],
      "manual_path": null,
      "manual_html": null
    },
    "ft_strlcat": {
      "name": "ft_strlcat",
      "category": "strings",
      "category_path": "strings",
      "tags": [
        "string",
        "basic"
      ],
      "prototype": "t_size\tft_strlcat(char *dst, const char *src, t_size dsize)",
      "description": "No description available.",
      "parameters": [],
      "return_value": "Return value description not available.",
      "examples": [
        {
          "title": "Basic usage of ft_strlcat",
          "code": "// Example usage of ft_strlcat\n// TODO: Add real example",
          "output": null
        }
      ],
      "complexity": null,
      "notes": [],
      "see_also": [],
      "updated_at": null,
      "author_role": null,
      "related": [],
      "manual_path": null,
      "manual_html": null
    },
    "camera_perspective": {
      "name": "camera_perspective",
      "category": "classes",
      "category_path": "classes/render/camera",
      "tags": [
        "basic"
      ],
      "prototype": "/* Function: camera_perspective */",
      "description": "No description available.",
      "parameters": [],
      "return_value": "Return value description not available.",
      "examples": [
        {
          "title": "Basic usage of camera_perspective",
          "code": "// Example usage of camera_perspective\n// TODO: Add real example",
          "output": null
        }
      ],
      "complexity": null,
      "notes": [],
      "see_also": [],
      "updated_at": null,
      "author_role": null,
      "related": [],
      "manual_path": null,
      "manual_html": null
    },
    "camera_project": {
      "name": "camera_project",
      "category": "classes",
      "category_path": "classes/render/camera",
      "tags": [
        "basic"
      ],
      "prototype": "/* Function: camera_project */",
      "description": "No description available.",
      "parameters": [],
      "return_value": "Return value description not available.",
      "examples": [
        {
          "title": "Basic usage of camera_project",
          "code": "// Example usage of camera_project\n// TODO: Add real example",
          "output": null
        }
      ],
      "complexity": null,
      "notes": [],
      "see_also": [],
      "updated_at": null,
      "author_role": null,
      "related": [],
      "manual_path": null,
      "manual_html": null
    },
    "utils": {
      "name": "utils",
      "category": "render",
      "category_path": "render",
      "tags": [
        "iteration",
        "basic"
      ],
      "prototype": "/* Function: utils */",
      "description": "No description available.",
      "parameters": [],
      "return_value": "Return value description not available.",
      "examples": [
        {
          "title": "Basic usage of utils",
          "code": "// Example usage of utils\n// TODO: Add real example",
          "output": null
        }
      ],
      "complexity": null,
      "notes": [],
      "see_also": [],
      "updated_at": null,
      "author_role": null,
      "related": [],
      "manual_path": null,
      "manual_html": null
    },
    "3-way-merge_sort_helpers": {
      "name": "3-way-merge_sort_helpers",
      "category": "sort",
      "category_path": "sort",
      "tags": [
        "iteration",
        "basic"
      ],
      "prototype": "/* Function: 3-way-merge_sort_helpers */",
      "description": "No description available.",
      "parameters": [],
      "return_value": "Return value description not available.",
      "examples": [
        {
          "title": "Basic usage of 3-way-merge_sort_helpers",
          "code": "// Example usage of 3-way-merge_sort_helpers\n// TODO: Add real example",
          "output": null
        }
      ],
      "complexity": null,
      "notes": [],
      "see_also": [],
      "updated_at": null,
      "author_role": null,
      "related": [],
      "manual_path": null,
      "manual_html": null
    },
    "ft_reverse_string": {
      "name": "ft_reverse_string",
      "category": "memory",
      "category_path": "memory",
      "tags": [
        "iteration",
        "basic"
      ],
      "prototype": "ft_reverse_string(char *str)",
      "description": "int main(void)",
      "parameters": [],
      "return_value": "Return value description not available.",
      "examples": [
        {
          "title": "Basic usage of ft_reverse_string",
          "code": "// Example usage of ft_reverse_string\n// TODO: Add real example",
          "output": null
        }
      ],
      "complexity": null,
      "notes": [],
      "see_also": [],
      "updated_at": null,
      "author_role": null,
      "related": [],
      "manual_path": null,
      "manual_html": null
    },
    "ft_realloc_shrink_to": {
      "name": "ft_realloc_shrink_to",
      "category": "stdlib",
      "category_path": "stdlib",
      "tags": [
        "cleanup",
        "basic"
      ],
      "prototype": "bool\tft_realloc_shrink_to(void **ptr, size_t elem_size,\n\t\t\t\t\t\t\t\tsize_t *cap, size_t new_cap)",
      "description": "Remove or comment out this line if you want to use your custom ft_realloc",
      "parameters": [],
      "return_value": "Return value description not available.",
      "examples": [
        {
          "title": "Basic usage of ft_realloc_shrink_to",
          "code": "// Example usage of ft_realloc_shrink_to\n// TODO: Add real example",
          "output": null
        }
      ],
      "complexity": null,
      "notes": [],
      "see_also": [],
      "updated_at": null,
      "author_role": null,
      "related": [],
      "manual_path": null,
      "manual_html": null
    },
    "ft_queue_size": {
      "name": "ft_queue_size",
      "category": "data_structures",
      "category_path": "data_structures/queue",
      "tags": [
        "basic"
      ],
      "prototype": "size_t\t\t\tft_queue_size(t_queue *queue)",
      "description": "Core functions",
      "parameters": [],
      "return_value": "Return value description not available.",
      "examples": [
        {
          "title": "Basic usage of ft_queue_size",
          "code": "// Example usage of ft_queue_size\n// TODO: Add real example",
          "output": null
        }
      ],
      "complexity": null,
      "notes": [],
      "see_also": [],
      "updated_at": null,
      "author_role": null,
      "related": [],
      "manual_path": null,
      "manual_html": null
    },
    "cl_utility": {
      "name": "cl_utility",
      "category": "data_structures",
      "category_path": "data_structures/circular_linked_list",
      "tags": [
        "cleanup",
        "iteration",
        "basic"
      ],
      "prototype": "/* Function: cl_utility */",
      "description": "No description available.",
      "parameters": [],
      "return_value": "Return value description not available.",
      "examples": [
        {
          "title": "Basic usage of cl_utility",
          "code": "// Example usage of cl_utility\n// TODO: Add real example",
          "output": null
        }
      ],
      "complexity": null,
      "notes": [],
      "see_also": [],
      "updated_at": null,
      "author_role": null,
      "related": [],
      "manual_path": null,
      "manual_html": null
    },
    "ft_gnome_sort": {
      "name": "ft_gnome_sort",
      "category": "sort",
      "category_path": "sort",
      "tags": [
        "basic"
      ],
      "prototype": "void\tft_gnome_sort(int *arr, int size)",
      "description": "Wrapper functions",
      "parameters": [],
      "return_value": "Return value description not available.",
      "examples": [
        {
          "title": "Basic usage of ft_gnome_sort",
          "code": "// Example usage of ft_gnome_sort\n// TODO: Add real example",
          "output": null
        }
      ],
      "complexity": null,
      "notes": [],
      "see_also": [],
      "updated_at": null,
      "author_role": null,
      "related": [],
      "manual_path": null,
      "manual_html": null
    },
    "ft_strlen": {
      "name": "ft_strlen",
      "category": "strings",
      "category_path": "strings",
      "tags": [
        "string",
        "iteration",
        "basic"
      ],
      "prototype": "ft_strlen(const char *s)\n//",
      "description": "#include \"TDD/test.h\"",
      "parameters": [],
      "return_value": "Return value description not available.",
      "examples": [
        {
          "title": "Basic usage of ft_strlen",
          "code": "// Example usage of ft_strlen\n// TODO: Add real example",
          "output": null
        }
      ],
      "complexity": null,
      "notes": [],
      "see_also": [],
      "updated_at": null,
      "author_role": null,
      "related": [],
      "manual_path": null,
      "manual_html": null
    },
    "pancake_sort": {
      "name": "pancake_sort",
      "category": "sort",
      "category_path": "sort",
      "tags": [
        "iteration",
        "basic"
      ],
      "prototype": "pancake_sort(int *arr, int size)",
      "description": "No description available.",
      "parameters": [],
      "return_value": "Return value description not available.",
      "examples": [
        {
          "title": "Basic usage of pancake_sort",
          "code": "// Example usage of pancake_sort\n// TODO: Add real example",
          "output": null
        }
      ],
      "complexity": null,
      "notes": [],
      "see_also": [],
      "updated_at": null,
      "author_role": null,
      "related": [],
      "manual_path": null,
      "manual_html": null
    },
    "ft_fabs": {
      "name": "ft_fabs",
      "category": "math",
      "category_path": "math/algebra",
      "tags": [
        "basic"
      ],
      "prototype": "double\t\tft_fabs(double x)",
      "description": "Define M_PI if not already defined",
      "parameters": [],
      "return_value": "Return value description not available.",
      "examples": [
        {
          "title": "Basic usage of ft_fabs",
          "code": "// Example usage of ft_fabs\n// TODO: Add real example",
          "output": null
        }
      ],
      "complexity": null,
      "notes": [],
      "see_also": [],
      "updated_at": null,
      "author_role": null,
      "related": [],
      "manual_path": null,
      "manual_html": null
    },
    "ft_multiply": {
      "name": "ft_multiply",
      "category": "math",
      "category_path": "math/algebra",
      "tags": [
        "basic"
      ],
      "prototype": "int\t\t\tft_multiply(int x, int y)",
      "description": "Define M_PI if not already defined",
      "parameters": [],
      "return_value": "Return value description not available.",
      "examples": [
        {
          "title": "Basic usage of ft_multiply",
          "code": "// Example usage of ft_multiply\n// TODO: Add real example",
          "output": null
        }
      ],
      "complexity": null,
      "notes": [],
      "see_also": [],
      "updated_at": null,
      "author_role": null,
      "related": [],
      "manual_path": null,
      "manual_html": null
    },
    "vscale": {
      "name": "vscale",
      "category": "math",
      "category_path": "math/geometry/quaternion",
      "tags": [
        "basic"
      ],
      "prototype": "vscale(float *v, float div)",
      "description": "No description available.",
      "parameters": [],
      "return_value": "Return value description not available.",
      "examples": [
        {
          "title": "Basic usage of vscale",
          "code": "// Example usage of vscale\n// TODO: Add real example",
          "output": null
        }
      ],
      "complexity": null,
      "notes": [],
      "see_also": [],
      "updated_at": null,
      "author_role": null,
      "related": [],
      "manual_path": null,
      "manual_html": null
    },
    "matrix_copy": {
      "name": "matrix_copy",
      "category": "math",
      "category_path": "math/geometry/matrices",
      "tags": [
        "iteration",
        "basic"
      ],
      "prototype": "** Usage: matrix_copy(&dst, &src)",
      "description": "No description available.",
      "parameters": [],
      "return_value": "Return value description not available.",
      "examples": [
        {
          "title": "Basic usage of matrix_copy",
          "code": "// Example usage of matrix_copy\n// TODO: Add real example",
          "output": null
        }
      ],
      "complexity": null,
      "notes": [],
      "see_also": [],
      "updated_at": null,
      "author_role": null,
      "related": [],
      "manual_path": null,
      "manual_html": null
    },
    "matrix_zero": {
      "name": "matrix_zero",
      "category": "math",
      "category_path": "math/geometry/matrices",
      "tags": [
        "iteration",
        "basic"
      ],
      "prototype": "** Usage: matrix_zero(&mat)",
      "description": "No description available.",
      "parameters": [],
      "return_value": "Return value description not available.",
      "examples": [
        {
          "title": "Basic usage of matrix_zero",
          "code": "// Example usage of matrix_zero\n// TODO: Add real example",
          "output": null
        }
      ],
      "complexity": null,
      "notes": [],
      "see_also": [],
      "updated_at": null,
      "author_role": null,
      "related": [],
      "manual_path": null,
      "manual_html": null
    },
    "ft_utils": {
      "name": "ft_utils",
      "category": "render",
      "category_path": "render",
      "tags": [
        "iteration",
        "basic"
      ],
      "prototype": "/* Function: ft_utils */",
      "description": "No description available.",
      "parameters": [],
      "return_value": "Return value description not available.",
      "examples": [
        {
          "title": "Basic usage of ft_utils",
          "code": "// Example usage of ft_utils\n// TODO: Add real example",
          "output": null
        }
      ],
      "complexity": null,
      "notes": [],
      "see_also": [],
      "updated_at": null,
      "author_role": null,
      "related": [],
      "manual_path": null,
      "manual_html": null
    },
    "ft_do_op": {
      "name": "ft_do_op",
      "category": "stdio",
      "category_path": "stdio",
      "tags": [
        "iteration",
        "basic"
      ],
      "prototype": "/* Function: ft_do_op */",
      "description": "int\tmain(int argc, char **argv)",
      "parameters": [],
      "return_value": "Return value description not available.",
      "examples": [
        {
          "title": "Basic usage of ft_do_op",
          "code": "// Example usage of ft_do_op\n// TODO: Add real example",
          "output": null
        }
      ],
      "complexity": null,
      "notes": [],
      "see_also": [],
      "updated_at": null,
      "author_role": null,
      "related": [],
      "manual_path": null,
      "manual_html": null
    },
    "arena": {
      "name": "arena",
      "category": "stdlib",
      "category_path": "stdlib/arena",
      "tags": [
        "allocation",
        "cleanup",
        "iteration",
        "intermediate"
      ],
      "prototype": "/* Function: arena */",
      "description": "No description available.",
      "parameters": [],
      "return_value": "Return value description not available.",
      "examples": [
        {
          "title": "Basic usage of arena",
          "code": "// Example usage of arena\n// TODO: Add real example",
          "output": null
        }
      ],
      "complexity": null,
      "notes": [],
      "see_also": [],
      "updated_at": null,
      "author_role": null,
      "related": [],
      "manual_path": null,
      "manual_html": null
    },
    "ft_lstlast": {
      "name": "ft_lstlast",
      "category": "data_structures",
      "category_path": "data_structures/lists",
      "tags": [
        "iteration",
        "basic"
      ],
      "prototype": "ft_lstlast(t_list *lst)",
      "description": "#include \"TDD/test.h\"",
      "parameters": [],
      "return_value": "Return value description not available.",
      "examples": [
        {
          "title": "Basic usage of ft_lstlast",
          "code": "// Example usage of ft_lstlast\n// TODO: Add real example",
          "output": null
        }
      ],
      "complexity": null,
      "notes": [],
      "see_also": [],
      "updated_at": null,
      "author_role": null,
      "related": [],
      "manual_path": null,
      "manual_html": null
    },
    "chunk_process": {
      "name": "chunk_process",
      "category": "sort",
      "category_path": "sort",
      "tags": [
        "allocation",
        "iteration",
        "intermediate"
      ],
      "prototype": "/* Function: chunk_process */",
      "description": "No description available.",
      "parameters": [],
      "return_value": "Return value description not available.",
      "examples": [
        {
          "title": "Basic usage of chunk_process",
          "code": "// Example usage of chunk_process\n// TODO: Add real example",
          "output": null
        }
      ],
      "complexity": null,
      "notes": [],
      "see_also": [],
      "updated_at": null,
      "author_role": null,
      "related": [],
      "manual_path": null,
      "manual_html": null
    },
    "cl_create": {
      "name": "cl_create",
      "category": "data_structures",
      "category_path": "data_structures/circular_linked_list",
      "tags": [
        "allocation",
        "intermediate"
      ],
      "prototype": "cl_create(void)",
      "description": "No description available.",
      "parameters": [],
      "return_value": "Return value description not available.",
      "examples": [
        {
          "title": "Basic usage of cl_create",
          "code": "// Example usage of cl_create\n// TODO: Add real example",
          "output": null
        }
      ],
      "complexity": null,
      "notes": [],
      "see_also": [],
      "updated_at": null,
      "author_role": null,
      "related": [],
      "manual_path": null,
      "manual_html": null
    },
    "cartesian_sort": {
      "name": "cartesian_sort",
      "category": "sort",
      "category_path": "sort",
      "tags": [
        "allocation",
        "cleanup",
        "iteration",
        "intermediate"
      ],
      "prototype": "cartesian_sort(int *arr, int size)",
      "description": "No description available.",
      "parameters": [],
      "return_value": "Return value description not available.",
      "examples": [
        {
          "title": "Basic usage of cartesian_sort",
          "code": "// Example usage of cartesian_sort\n// TODO: Add real example",
          "output": null
        }
      ],
      "complexity": null,
      "notes": [],
      "see_also": [],
      "updated_at": null,
      "author_role": null,
      "related": [],
      "manual_path": null,
      "manual_html": null
    },
    "ft_lstmap": {
      "name": "ft_lstmap",
      "category": "data_structures",
      "category_path": "data_structures/lists",
      "tags": [
        "iteration",
        "basic"
      ],
      "prototype": "ft_lstmap(t_list *lst, void *(*f)(void *), void (*del)(void *))",
      "description": "No description available.",
      "parameters": [],
      "return_value": "Return value description not available.",
      "examples": [
        {
          "title": "Basic usage of ft_lstmap",
          "code": "// Example usage of ft_lstmap\n// TODO: Add real example",
          "output": null
        }
      ],
      "complexity": null,
      "notes": [],
      "see_also": [],
      "updated_at": null,
      "author_role": null,
      "related": [],
      "manual_path": null,
      "manual_html": null
    },
    "dll_utility": {
      "name": "dll_utility",
      "category": "data_structures",
      "category_path": "data_structures/doubly_linked_list",
      "tags": [
        "cleanup",
        "iteration",
        "basic"
      ],
      "prototype": "/* Function: dll_utility */",
      "description": "No description available.",
      "parameters": [],
      "return_value": "Return value description not available.",
      "examples": [
        {
          "title": "Basic usage of dll_utility",
          "code": "// Example usage of dll_utility\n// TODO: Add real example",
          "output": null
        }
      ],
      "complexity": null,
      "notes": [],
      "see_also": [],
      "updated_at": null,
      "author_role": null,
      "related": [],
      "manual_path": null,
      "manual_html": null
    },
    "err_handler_methods": {
      "name": "err_handler_methods",
      "category": "classes",
      "category_path": "classes/trace/error",
      "tags": [
        "cleanup",
        "basic"
      ],
      "prototype": "/* Function: err_handler_methods */",
      "description": "No description available.",
      "parameters": [],
      "return_value": "Return value description not available.",
      "examples": [
        {
          "title": "Basic usage of err_handler_methods",
          "code": "// Example usage of err_handler_methods\n// TODO: Add real example",
          "output": null
        }
      ],
      "complexity": null,
      "notes": [],
      "see_also": [],
      "updated_at": null,
      "author_role": null,
      "related": [],
      "manual_path": null,
      "manual_html": null
    },
    "ft_fminf": {
      "name": "ft_fminf",
      "category": "math",
      "category_path": "math/algebra",
      "tags": [
        "basic"
      ],
      "prototype": "float\t\tft_fminf(float a, float b)",
      "description": "Define M_PI if not already defined",
      "parameters": [],
      "return_value": "Return value description not available.",
      "examples": [
        {
          "title": "Basic usage of ft_fminf",
          "code": "// Example usage of ft_fminf\n// TODO: Add real example",
          "output": null
        }
      ],
      "complexity": null,
      "notes": [],
      "see_also": [],
      "updated_at": null,
      "author_role": null,
      "related": [],
      "manual_path": null,
      "manual_html": null
    },
    "matrix_scale": {
      "name": "matrix_scale",
      "category": "math",
      "category_path": "math/geometry/matrices",
      "tags": [
        "iteration",
        "basic"
      ],
      "prototype": "** Usage: matrix_scale(&mat, sx, sy, sz)",
      "description": "No description available.",
      "parameters": [],
      "return_value": "Return value description not available.",
      "examples": [
        {
          "title": "Basic usage of matrix_scale",
          "code": "// Example usage of matrix_scale\n// TODO: Add real example",
          "output": null
        }
      ],
      "complexity": null,
      "notes": [],
      "see_also": [],
      "updated_at": null,
      "author_role": null,
      "related": [],
      "manual_path": null,
      "manual_html": null
    },
    "ft_is_power_of_2": {
      "name": "ft_is_power_of_2",
      "category": "math",
      "category_path": "math/algebra",
      "tags": [
        "validation",
        "basic"
      ],
      "prototype": "/* Function: ft_is_power_of_2 */",
      "description": "#include <stdio.h>",
      "parameters": [],
      "return_value": "Return value description not available.",
      "examples": [
        {
          "title": "Basic usage of ft_is_power_of_2",
          "code": "// Example usage of ft_is_power_of_2\n// TODO: Add real example",
          "output": null
        }
      ],
      "complexity": null,
      "notes": [],
      "see_also": [],
      "updated_at": null,
      "author_role": null,
      "related": [],
      "manual_path": null,
      "manual_html": null
    },
    "quat_slerp": {
      "name": "quat_slerp",
      "category": "math",
      "category_path": "math/geometry/quaternion",
      "tags": [
        "iteration",
        "basic"
      ],
      "prototype": "** Usage: quat_slerp(&out, &a, &b, t)",
      "description": "for efficiency",
      "parameters": [],
      "return_value": "Return value description not available.",
      "examples": [
        {
          "title": "Basic usage of quat_slerp",
          "code": "// Example usage of quat_slerp\n// TODO: Add real example",
          "output": null
        }
      ],
      "complexity": null,
      "notes": [],
      "see_also": [],
      "updated_at": null,
      "author_role": null,
      "related": [],
      "manual_path": null,
      "manual_html": null
    },
    "translate": {
      "name": "translate",
      "category": "math",
      "category_path": "math/geometry/move",
      "tags": [
        "basic"
      ],
      "prototype": "/* Function: translate */",
      "description": "No description available.",
      "parameters": [],
      "return_value": "Return value description not available.",
      "examples": [
        {
          "title": "Basic usage of translate",
          "code": "// Example usage of translate\n// TODO: Add real example",
          "output": null
        }
      ],
      "complexity": null,
      "notes": [],
      "see_also": [],
      "updated_at": null,
      "author_role": null,
      "related": [],
      "manual_path": null,
      "manual_html": null
    },
    "ksort": {
      "name": "ksort",
      "category": "sort",
      "category_path": "sort",
      "tags": [
        "iteration",
        "basic"
      ],
      "prototype": "ksort(int *arr, int n, int k)",
      "description": "No description available.",
      "parameters": [],
      "return_value": "Return value description not available.",
      "examples": [
        {
          "title": "Basic usage of ksort",
          "code": "// Example usage of ksort\n// TODO: Add real example",
          "output": null
        }
      ],
      "complexity": null,
      "notes": [],
      "see_also": [],
      "updated_at": null,
      "author_role": null,
      "related": [],
      "manual_path": null,
      "manual_html": null
    },
    "ft_itoa": {
      "name": "ft_itoa",
      "category": "stdlib",
      "category_path": "stdlib",
      "tags": [
        "allocation",
        "cleanup",
        "iteration",
        "intermediate"
      ],
      "prototype": "ft_itoa(int n)",
      "description": "char *ft_itoa_base(int value, int base) {",
      "parameters": [],
      "return_value": "Return value description not available.",
      "examples": [
        {
          "title": "Basic usage of ft_itoa",
          "code": "// Example usage of ft_itoa\n// TODO: Add real example",
          "output": null
        }
      ],
      "complexity": null,
      "notes": [],
      "see_also": [],
      "updated_at": null,
      "author_role": null,
      "related": [],
      "manual_path": null,
      "manual_html": null
    },
    "ft_quick_sort": {
      "name": "ft_quick_sort",
      "category": "sort",
      "category_path": "sort",
      "tags": [
        "iteration",
        "basic"
      ],
      "prototype": "ft_quick_sort(arr, low, pivot_index - 1)",
      "description": "int main(void)",
      "parameters": [],
      "return_value": "Return value description not available.",
      "examples": [
        {
          "title": "Basic usage of ft_quick_sort",
          "code": "// Example usage of ft_quick_sort\n// TODO: Add real example",
          "output": null
        }
      ],
      "complexity": null,
      "notes": [],
      "see_also": [],
      "updated_at": null,
      "author_role": null,
      "related": [],
      "manual_path": null,
      "manual_html": null
    },
    "ft_printfsfsfsdfsadfsddsfdsds": {
      "name": "ft_printfsfsfsdfsadfsddsfdsds",
      "category": "stdio",
      "category_path": "stdio",
      "tags": [
        "print",
        "format specifier",
        "template"
      ],
      "prototype": "int ft_printf(const char *fmt55555555555555555555555555555555555555555555,...)",
      "description": "print in any format as long as the format match the format specifier",
      "parameters": [
        {
          "name": "fmt",
          "type_name": "const char *",
          "description": "a string with some format"
        }
      ],
      "return_value": "Returns 0 if nothing otherwise return the bytes size printed",
      "examples": [],
      "complexity": null,
      "notes": [],
      "see_also": [],
      "updated_at": null,
      "author_role": null,
      "related": [],
      "manual_path": "../manpages/ft_isblank.md",
      "manual_html": "<h1>ft_isblank</h1>\n<h2>im med</h2>\n<hr />\n<h2>Synopsis</h2>\n<pre><code class=\"language-c\">int ft_isblank(int c);\n</code></pre>\n<h2>Description</h2>\n<p>Returns non-zero if <code>c</code> is a blank character in the &quot;C&quot; locale. Recognized blanks are:</p>\n<ul>\n<li>Space <code>' '</code></li>\n<li>Horizontal tab <code>'\\t'</code></li>\n</ul>\n<h2>Return Value</h2>\n<p>1 if blank, 0 otherwise.</p>\n<h2>Notes</h2>\n<p>Use with values representable as <code>unsigned char</code> or <code>EOF</code>.</p>\n"
    },
    "ft_vector_capacity": {
      "name": "ft_vector_capacity",
      "category": "data_structures",
      "category_path": "data_structures/vector",
      "tags": [
        "basic"
      ],
      "prototype": "size_t\t\tft_vector_capacity(t_vector *vector)",
      "description": "Utility functions",
      "parameters": [],
      "return_value": "Return value description not available.",
      "examples": [
        {
          "title": "Basic usage of ft_vector_capacity",
          "code": "// Example usage of ft_vector_capacity\n// TODO: Add real example",
          "output": null
        }
      ],
      "complexity": null,
      "notes": [],
      "see_also": [],
      "updated_at": null,
      "author_role": null,
      "related": [],
      "manual_path": null,
      "manual_html": null
    },
    "hybrid": {
      "name": "hybrid",
      "category": "sort",
      "category_path": "sort",
      "tags": [
        "allocation",
        "cleanup",
        "iteration",
        "intermediate"
      ],
      "prototype": "hybrid(int *arr, int size)",
      "description": "No description available.",
      "parameters": [],
      "return_value": "Return value description not available.",
      "examples": [
        {
          "title": "Basic usage of hybrid",
          "code": "// Example usage of hybrid\n// TODO: Add real example",
          "output": null
        }
      ],
      "complexity": null,
      "notes": [],
      "see_also": [],
      "updated_at": null,
      "author_role": null,
      "related": [],
      "manual_path": null,
      "manual_html": null
    },
    "ft_memset": {
      "name": "ft_memset",
      "category": "memory",
      "category_path": "memory",
      "tags": [
        "memory",
        "allocation",
        "cleanup",
        "iteration",
        "intermediate"
      ],
      "prototype": "ft_memset(void *ptr, int value, size_t num)",
      "description": "#include \"TDD/test.h\"",
      "parameters": [],
      "return_value": "Return value description not available.",
      "examples": [
        {
          "title": "Basic usage of ft_memset",
          "code": "// Example usage of ft_memset\n// TODO: Add real example",
          "output": null
        }
      ],
      "complexity": null,
      "notes": [],
      "see_also": [],
      "updated_at": null,
      "author_role": null,
      "related": [],
      "manual_path": null,
      "manual_html": null
    },
    "strand_sort": {
      "name": "strand_sort",
      "category": "sort",
      "category_path": "sort",
      "tags": [
        "allocation",
        "cleanup",
        "iteration",
        "intermediate"
      ],
      "prototype": "strand_sort(int *arr, int size)",
      "description": "No description available.",
      "parameters": [],
      "return_value": "Return value description not available.",
      "examples": [
        {
          "title": "Basic usage of strand_sort",
          "code": "// Example usage of strand_sort\n// TODO: Add real example",
          "output": null
        }
      ],
      "complexity": null,
      "notes": [],
      "see_also": [],
      "updated_at": null,
      "author_role": null,
      "related": [],
      "manual_path": null,
      "manual_html": null
    },
    "ft_cl_rotate_forward": {
      "name": "ft_cl_rotate_forward",
      "category": "data_structures",
      "category_path": "data_structures/circular_linked_list",
      "tags": [
        "iteration",
        "basic"
      ],
      "prototype": "void\t\t\tft_cl_rotate_forward(t_circular_list *list, size_t steps)",
      "description": "Points to last node (last->next is first)",
      "parameters": [],
      "return_value": "Return value description not available.",
      "examples": [
        {
          "title": "Basic usage of ft_cl_rotate_forward",
          "code": "// Example usage of ft_cl_rotate_forward\n// TODO: Add real example",
          "output": null
        }
      ],
      "complexity": null,
      "notes": [],
      "see_also": [],
      "updated_at": null,
      "author_role": null,
      "related": [],
      "manual_path": null,
      "manual_html": null
    },
    "ft_fscanf_exec": {
      "name": "ft_fscanf_exec",
      "category": "stdio",
      "category_path": "stdio/ft_scanf",
      "tags": [
        "input",
        "iteration",
        "basic"
      ],
      "prototype": "int         ft_fscanf_exec(const char *path, char *const argv[],\n                           char *const envp[], const char *format, ...)",
      "description": "No description available.",
      "parameters": [],
      "return_value": "Return value description not available.",
      "examples": [
        {
          "title": "Basic usage of ft_fscanf_exec",
          "code": "// Example usage of ft_fscanf_exec\n// TODO: Add real example",
          "output": null
        }
      ],
      "complexity": null,
      "notes": [],
      "see_also": [],
      "updated_at": null,
      "author_role": null,
      "related": [],
      "manual_path": null,
      "manual_html": null
    },
    "ft_strstr": {
      "name": "ft_strstr",
      "category": "strings",
      "category_path": "strings",
      "tags": [
        "string",
        "iteration",
        "basic"
      ],
      "prototype": "ft_strstr(const char *haystack, const char *needle)",
      "description": "No description available.",
      "parameters": [],
      "return_value": "Return value description not available.",
      "examples": [
        {
          "title": "Basic usage of ft_strstr",
          "code": "// Example usage of ft_strstr\n// TODO: Add real example",
          "output": null
        }
      ],
      "complexity": null,
      "notes": [],
      "see_also": [],
      "updated_at": null,
      "author_role": null,
      "related": [],
      "manual_path": null,
      "manual_html": null
    },
    "ft_xtoa": {
      "name": "ft_xtoa",
      "category": "stdlib",
      "category_path": "stdlib",
      "tags": [
        "iteration",
        "basic"
      ],
      "prototype": "ft_xtoa(unsigned long int num, int is_upper)",
      "description": "Calculates the number of digits in a hexadecimal number",
      "parameters": [],
      "return_value": "Return value description not available.",
      "examples": [
        {
          "title": "Basic usage of ft_xtoa",
          "code": "// Example usage of ft_xtoa\n// TODO: Add real example",
          "output": null
        }
      ],
      "complexity": null,
      "notes": [],
      "see_also": [],
      "updated_at": null,
      "author_role": null,
      "related": [],
      "manual_path": null,
      "manual_html": null
    },
    "dll_search": {
      "name": "dll_search",
      "category": "data_structures",
      "category_path": "data_structures/doubly_linked_list",
      "tags": [
        "iteration",
        "basic"
      ],
      "prototype": "/* Function: dll_search */",
      "description": "No description available.",
      "parameters": [],
      "return_value": "Return value description not available.",
      "examples": [
        {
          "title": "Basic usage of dll_search",
          "code": "// Example usage of dll_search\n// TODO: Add real example",
          "output": null
        }
      ],
      "complexity": null,
      "notes": [],
      "see_also": [],
      "updated_at": null,
      "author_role": null,
      "related": [],
      "manual_path": null,
      "manual_html": null
    },
    "ft_dll_contains": {
      "name": "ft_dll_contains",
      "category": "data_structures",
      "category_path": "data_structures/doubly_linked_list",
      "tags": [
        "basic"
      ],
      "prototype": "bool\t\t\tft_dll_contains(t_doubly_list *list, void *data)",
      "description": "Core functions",
      "parameters": [],
      "return_value": "Return value description not available.",
      "examples": [
        {
          "title": "Basic usage of ft_dll_contains",
          "code": "// Example usage of ft_dll_contains\n// TODO: Add real example",
          "output": null
        }
      ],
      "complexity": null,
      "notes": [],
      "see_also": [],
      "updated_at": null,
      "author_role": null,
      "related": [],
      "manual_path": null,
      "manual_html": null
    },
    "cl_insert_remove": {
      "name": "cl_insert_remove",
      "category": "data_structures",
      "category_path": "data_structures/circular_linked_list",
      "tags": [
        "allocation",
        "cleanup",
        "iteration",
        "intermediate"
      ],
      "prototype": "/* Function: cl_insert_remove */",
      "description": "No description available.",
      "parameters": [],
      "return_value": "Return value description not available.",
      "examples": [
        {
          "title": "Basic usage of cl_insert_remove",
          "code": "// Example usage of cl_insert_remove\n// TODO: Add real example",
          "output": null
        }
      ],
      "complexity": null,
      "notes": [],
      "see_also": [],
      "updated_at": null,
      "author_role": null,
      "related": [],
      "manual_path": null,
      "manual_html": null
    },
    "ft_isprint": {
      "name": "ft_isprint",
      "category": "ctype",
      "category_path": "ctype",
      "tags": [
        "validation",
        "iteration",
        "basic"
      ],
      "prototype": "int\tft_isprint(int c)\n{\n\treturn (c >= 32 && c <= 126)",
      "description": "//#include <stdio.h>",
      "parameters": [],
      "return_value": "Return value description not available.",
      "examples": [
        {
          "title": "Basic usage of ft_isprint",
          "code": "// Example usage of ft_isprint\n// TODO: Add real example",
          "output": null
        }
      ],
      "complexity": null,
      "notes": [],
      "see_also": [],
      "updated_at": null,
      "author_role": null,
      "related": [],
      "manual_path": null,
      "manual_html": null
    },
    "ft_strndup": {
      "name": "ft_strndup",
      "category": "strings",
      "category_path": "strings",
      "tags": [
        "string",
        "allocation",
        "iteration",
        "intermediate"
      ],
      "prototype": "ft_strndup(const char *s1, t_size n)",
      "description": "No description available.",
      "parameters": [],
      "return_value": "Return value description not available.",
      "examples": [
        {
          "title": "Basic usage of ft_strndup",
          "code": "// Example usage of ft_strndup\n// TODO: Add real example",
          "output": null
        }
      ],
      "complexity": null,
      "notes": [],
      "see_also": [],
      "updated_at": null,
      "author_role": null,
      "related": [],
      "manual_path": null,
      "manual_html": null
    },
    "ft_print_emoji_status": {
      "name": "ft_print_emoji_status",
      "category": "render",
      "category_path": "render",
      "tags": [
        "basic"
      ],
      "prototype": "void\tft_print_emoji_status(const char *message, const char *emoji)",
      "description": "No description available.",
      "parameters": [],
      "return_value": "Return value description not available.",
      "examples": [
        {
          "title": "Basic usage of ft_print_emoji_status",
          "code": "// Example usage of ft_print_emoji_status\n// TODO: Add real example",
          "output": null
        }
      ],
      "complexity": null,
      "notes": [],
      "see_also": [],
      "updated_at": null,
      "author_role": null,
      "related": [],
      "manual_path": null,
      "manual_html": null
    },
    "ft_print_timeline": {
      "name": "ft_print_timeline",
      "category": "render",
      "category_path": "render",
      "tags": [
        "basic"
      ],
      "prototype": "void\tft_print_timeline(char **events, char **times, int count)",
      "description": "No description available.",
      "parameters": [],
      "return_value": "Return value description not available.",
      "examples": [
        {
          "title": "Basic usage of ft_print_timeline",
          "code": "// Example usage of ft_print_timeline\n// TODO: Add real example",
          "output": null
        }
      ],
      "complexity": null,
      "notes": [],
      "see_also": [],
      "updated_at": null,
      "author_role": null,
      "related": [],
      "manual_path": null,
      "manual_html": null
    },
    "greedy_helpers": {
      "name": "greedy_helpers",
      "category": "sort",
      "category_path": "sort",
      "tags": [
        "allocation",
        "iteration",
        "intermediate"
      ],
      "prototype": "/* Function: greedy_helpers */",
      "description": "No description available.",
      "parameters": [],
      "return_value": "Return value description not available.",
      "examples": [
        {
          "title": "Basic usage of greedy_helpers",
          "code": "// Example usage of greedy_helpers\n// TODO: Add real example",
          "output": null
        }
      ],
      "complexity": null,
      "notes": [],
      "see_also": [],
      "updated_at": null,
      "author_role": null,
      "related": [],
      "manual_path": null,
      "manual_html": null
    },
    "ft_get_terminal_width": {
      "name": "ft_get_terminal_width",
      "category": "render",
      "category_path": "render",
      "tags": [
        "basic"
      ],
      "prototype": "int\t\tft_get_terminal_width(void)",
      "description": "No description available.",
      "parameters": [],
      "return_value": "Return value description not available.",
      "examples": [
        {
          "title": "Basic usage of ft_get_terminal_width",
          "code": "// Example usage of ft_get_terminal_width\n// TODO: Add real example",
          "output": null
        }
      ],
      "complexity": null,
      "notes": [],
      "see_also": [],
      "updated_at": null,
      "author_role": null,
      "related": [],
      "manual_path": null,
      "manual_html": null
    },
    "string": {
      "name": "string",
      "category": "stdio",
      "category_path": "stdio/ft_scanf/parse_format",
      "tags": [
        "iteration",
        "basic"
      ],
      "prototype": "string(t_scanf_data *data, va_list args)",
      "description": "No description available.",
      "parameters": [],
      "return_value": "Return value description not available.",
      "examples": [
        {
          "title": "Basic usage of string",
          "code": "// Example usage of string\n// TODO: Add real example",
          "output": null
        }
      ],
      "complexity": null,
      "notes": [],
      "see_also": [],
      "updated_at": null,
      "author_role": null,
      "related": [],
      "manual_path": null,
      "manual_html": null
    },
    "vector_resize": {
      "name": "vector_resize",
      "category": "data_structures",
      "category_path": "data_structures/vector",
      "tags": [
        "allocation",
        "cleanup",
        "iteration",
        "intermediate"
      ],
      "prototype": "vector_resize(t_vector *vector, size_t new_capacity)",
      "description": "No description available.",
      "parameters": [],
      "return_value": "Return value description not available.",
      "examples": [
        {
          "title": "Basic usage of vector_resize",
          "code": "// Example usage of vector_resize\n// TODO: Add real example",
          "output": null
        }
      ],
      "complexity": null,
      "notes": [],
      "see_also": [],
      "updated_at": null,
      "author_role": null,
      "related": [],
      "manual_path": null,
      "manual_html": null
    },
    "isometric_view": {
      "name": "isometric_view",
      "category": "math",
      "category_path": "math/geometry/view",
      "tags": [
        "basic"
      ],
      "prototype": "/* Function: isometric_view */",
      "description": "No description available.",
      "parameters": [],
      "return_value": "Return value description not available.",
      "examples": [
        {
          "title": "Basic usage of isometric_view",
          "code": "// Example usage of isometric_view\n// TODO: Add real example",
          "output": null
        }
      ],
      "complexity": null,
      "notes": [],
      "see_also": [],
      "updated_at": null,
      "author_role": null,
      "related": [],
      "manual_path": null,
      "manual_html": null
    },
    "remove_duplicates": {
      "name": "remove_duplicates",
      "category": "data_structures",
      "category_path": "data_structures/lists",
      "tags": [
        "cleanup",
        "iteration",
        "basic"
      ],
      "prototype": "remove_duplicates(t_list *head)",
      "description": "No description available.",
      "parameters": [],
      "return_value": "Return value description not available.",
      "examples": [
        {
          "title": "Basic usage of remove_duplicates",
          "code": "// Example usage of remove_duplicates\n// TODO: Add real example",
          "output": null
        }
      ],
      "complexity": null,
      "notes": [],
      "see_also": [],
      "updated_at": null,
      "author_role": null,
      "related": [],
      "manual_path": null,
      "manual_html": null
    },
    "ft_memchr": {
      "name": "ft_memchr",
      "category": "memory",
      "category_path": "memory",
      "tags": [
        "memory",
        "iteration",
        "basic"
      ],
      "prototype": "ft_memchr(const void *s, int c, size_t n)",
      "description": "#include \"TDD/test.h\"",
      "parameters": [],
      "return_value": "Return value description not available.",
      "examples": [
        {
          "title": "Basic usage of ft_memchr",
          "code": "// Example usage of ft_memchr\n// TODO: Add real example",
          "output": null
        }
      ],
      "complexity": null,
      "notes": [],
      "see_also": [],
      "updated_at": null,
      "author_role": null,
      "related": [],
      "manual_path": null,
      "manual_html": null
    },
    "ft_is_negative": {
      "name": "ft_is_negative",
      "category": "math",
      "category_path": "math/algebra",
      "tags": [
        "validation",
        "basic"
      ],
      "prototype": "int\t\t\tft_is_negative(int x)",
      "description": "Define M_PI if not already defined",
      "parameters": [],
      "return_value": "Return value description not available.",
      "examples": [
        {
          "title": "Basic usage of ft_is_negative",
          "code": "// Example usage of ft_is_negative\n// TODO: Add real example",
          "output": null
        }
      ],
      "complexity": null,
      "notes": [],
      "see_also": [],
      "updated_at": null,
      "author_role": null,
      "related": [],
      "manual_path": null,
      "manual_html": null
    },
    "ft_sqrt": {
      "name": "ft_sqrt",
      "category": "math",
      "category_path": "math/algebra",
      "tags": [
        "basic"
      ],
      "prototype": "int\t\t\tft_sqrt(int n)",
      "description": "Define M_PI if not already defined",
      "parameters": [],
      "return_value": "Return value description not available.",
      "examples": [
        {
          "title": "Basic usage of ft_sqrt",
          "code": "// Example usage of ft_sqrt\n// TODO: Add real example",
          "output": null
        }
      ],
      "complexity": null,
      "notes": [],
      "see_also": [],
      "updated_at": null,
      "author_role": null,
      "related": [],
      "manual_path": null,
      "manual_html": null
    },
    "ft_isgraph": {
      "name": "ft_isgraph",
      "category": "ctype",
      "category_path": "ctype",
      "tags": [
        "validation",
        "iteration",
        "basic"
      ],
      "prototype": "int\tft_isgraph(int c)\n{\n\treturn (!(((c - 33) | (126 - c)) >> 31))",
      "description": "//#include <stdio.h>",
      "parameters": [],
      "return_value": "Return value description not available.",
      "examples": [
        {
          "title": "Basic usage of ft_isgraph",
          "code": "// Example usage of ft_isgraph\n// TODO: Add real example",
          "output": null
        }
      ],
      "complexity": null,
      "notes": [],
      "see_also": [],
      "updated_at": null,
      "author_role": null,
      "related": [],
      "manual_path": null,
      "manual_html": null
    },
    "integer": {
      "name": "integer",
      "category": "stdio",
      "category_path": "stdio/ft_scanf/parse_format",
      "tags": [
        "iteration",
        "basic"
      ],
      "prototype": "integer(t_scanf_data *data, va_list args)",
      "description": "No description available.",
      "parameters": [],
      "return_value": "Return value description not available.",
      "examples": [
        {
          "title": "Basic usage of integer",
          "code": "// Example usage of integer\n// TODO: Add real example",
          "output": null
        }
      ],
      "complexity": null,
      "notes": [],
      "see_also": [],
      "updated_at": null,
      "author_role": null,
      "related": [],
      "manual_path": null,
      "manual_html": null
    },
    "gnome_sort": {
      "name": "gnome_sort",
      "category": "sort",
      "category_path": "sort",
      "tags": [
        "iteration",
        "basic"
      ],
      "prototype": "gnome_sort(int *arr, int size)",
      "description": "Gnome sort implementation",
      "parameters": [],
      "return_value": "Return value description not available.",
      "examples": [
        {
          "title": "Basic usage of gnome_sort",
          "code": "// Example usage of gnome_sort\n// TODO: Add real example",
          "output": null
        }
      ],
      "complexity": null,
      "notes": [],
      "see_also": [],
      "updated_at": null,
      "author_role": null,
      "related": [],
      "manual_path": null,
      "manual_html": null
    },
    "insertion_sort": {
      "name": "insertion_sort",
      "category": "sort",
      "category_path": "sort",
      "tags": [
        "iteration",
        "basic"
      ],
      "prototype": "insertion_sort(int arr[], int left, int right)",
      "description": "int main(void)",
      "parameters": [],
      "return_value": "Return value description not available.",
      "examples": [
        {
          "title": "Basic usage of insertion_sort",
          "code": "// Example usage of insertion_sort\n// TODO: Add real example",
          "output": null
        }
      ],
      "complexity": null,
      "notes": [],
      "see_also": [],
      "updated_at": null,
      "author_role": null,
      "related": [],
      "manual_path": null,
      "manual_html": null
    },
    "comb_sort": {
      "name": "comb_sort",
      "category": "sort",
      "category_path": "sort",
      "tags": [
        "iteration",
        "basic"
      ],
      "prototype": "comb_sort(int *arr, int size)",
      "description": "int\tmain(void)",
      "parameters": [],
      "return_value": "Return value description not available.",
      "examples": [
        {
          "title": "Basic usage of comb_sort",
          "code": "// Example usage of comb_sort\n// TODO: Add real example",
          "output": null
        }
      ],
      "complexity": null,
      "notes": [],
      "see_also": [],
      "updated_at": null,
      "author_role": null,
      "related": [],
      "manual_path": null,
      "manual_html": null
    },
    "ft_modulo": {
      "name": "ft_modulo",
      "category": "math",
      "category_path": "math/algebra",
      "tags": [
        "basic"
      ],
      "prototype": "int\t\t\tft_modulo(int a, int b)",
      "description": "Define M_PI if not already defined",
      "parameters": [],
      "return_value": "Return value description not available.",
      "examples": [
        {
          "title": "Basic usage of ft_modulo",
          "code": "// Example usage of ft_modulo\n// TODO: Add real example",
          "output": null
        }
      ],
      "complexity": null,
      "notes": [],
      "see_also": [],
      "updated_at": null,
      "author_role": null,
      "related": [],
      "manual_path": null,
      "manual_html": null
    },
    "queue_create": {
      "name": "queue_create",
      "category": "data_structures",
      "category_path": "data_structures/queue",
      "tags": [
        "allocation",
        "intermediate"
      ],
      "prototype": "queue_create(void)",
      "description": "No description available.",
      "parameters": [],
      "return_value": "Return value description not available.",
      "examples": [
        {
          "title": "Basic usage of queue_create",
          "code": "// Example usage of queue_create\n// TODO: Add real example",
          "output": null
        }
      ],
      "complexity": null,
      "notes": [],
      "see_also": [],
      "updated_at": null,
      "author_role": null,
      "related": [],
      "manual_path": null,
      "manual_html": null
    },
    "tag_sort": {
      "name": "tag_sort",
      "category": "sort",
      "category_path": "sort",
      "tags": [
        "allocation",
        "cleanup",
        "iteration",
        "intermediate"
      ],
      "prototype": "tag_sort(int *arr, int size)",
      "description": "int main(void)",
      "parameters": [],
      "return_value": "Return value description not available.",
      "examples": [
        {
          "title": "Basic usage of tag_sort",
          "code": "// Example usage of tag_sort\n// TODO: Add real example",
          "output": null
        }
      ],
      "complexity": null,
      "notes": [],
      "see_also": [],
      "updated_at": null,
      "author_role": null,
      "related": [],
      "manual_path": null,
      "manual_html": null
    },
    "selection_sort": {
      "name": "selection_sort",
      "category": "sort",
      "category_path": "sort",
      "tags": [
        "iteration",
        "basic"
      ],
      "prototype": "selection_sort(int *arr, int n)",
      "description": "No description available.",
      "parameters": [],
      "return_value": "Return value description not available.",
      "examples": [
        {
          "title": "Basic usage of selection_sort",
          "code": "// Example usage of selection_sort\n// TODO: Add real example",
          "output": null
        }
      ],
      "complexity": null,
      "notes": [],
      "see_also": [],
      "updated_at": null,
      "author_role": null,
      "related": [],
      "manual_path": null,
      "manual_html": null
    },
    "normalize_quat": {
      "name": "normalize_quat",
      "category": "math",
      "category_path": "math/geometry/quaternion",
      "tags": [
        "iteration",
        "basic"
      ],
      "prototype": "normalize_quat(float q[4])",
      "description": "No description available.",
      "parameters": [],
      "return_value": "Return value description not available.",
      "examples": [
        {
          "title": "Basic usage of normalize_quat",
          "code": "// Example usage of normalize_quat\n// TODO: Add real example",
          "output": null
        }
      ],
      "complexity": null,
      "notes": [],
      "see_also": [],
      "updated_at": null,
      "author_role": null,
      "related": [],
      "manual_path": null,
      "manual_html": null
    },
    "bubble_sort": {
      "name": "bubble_sort",
      "category": "sort",
      "category_path": "sort",
      "tags": [
        "iteration",
        "basic"
      ],
      "prototype": "bubble_sort(int *arr, int size)",
      "description": "No description available.",
      "parameters": [],
      "return_value": "Return value description not available.",
      "examples": [
        {
          "title": "Basic usage of bubble_sort",
          "code": "// Example usage of bubble_sort\n// TODO: Add real example",
          "output": null
        }
      ],
      "complexity": null,
      "notes": [],
      "see_also": [],
      "updated_at": null,
      "author_role": null,
      "related": [],
      "manual_path": null,
      "manual_html": null
    },
    "orthographic": {
      "name": "orthographic",
      "category": "math",
      "category_path": "math/geometry/view",
      "tags": [
        "basic"
      ],
      "prototype": "/* Function: orthographic */",
      "description": "No description available.",
      "parameters": [],
      "return_value": "Return value description not available.",
      "examples": [
        {
          "title": "Basic usage of orthographic",
          "code": "// Example usage of orthographic\n// TODO: Add real example",
          "output": null
        }
      ],
      "complexity": null,
      "notes": [],
      "see_also": [],
      "updated_at": null,
      "author_role": null,
      "related": [],
      "manual_path": null,
      "manual_html": null
    },
    "ft_menu": {
      "name": "ft_menu",
      "category": "render",
      "category_path": "render",
      "tags": [
        "iteration",
        "basic"
      ],
      "prototype": "/* Function: ft_menu */",
      "description": "No description available.",
      "parameters": [],
      "return_value": "Return value description not available.",
      "examples": [
        {
          "title": "Basic usage of ft_menu",
          "code": "// Example usage of ft_menu\n// TODO: Add real example",
          "output": null
        }
      ],
      "complexity": null,
      "notes": [],
      "see_also": [],
      "updated_at": null,
      "author_role": null,
      "related": [],
      "manual_path": null,
      "manual_html": null
    },
    "ft_get_terminal_height": {
      "name": "ft_get_terminal_height",
      "category": "render",
      "category_path": "render",
      "tags": [
        "basic"
      ],
      "prototype": "int\t\tft_get_terminal_height(void)",
      "description": "No description available.",
      "parameters": [],
      "return_value": "Return value description not available.",
      "examples": [
        {
          "title": "Basic usage of ft_get_terminal_height",
          "code": "// Example usage of ft_get_terminal_height\n// TODO: Add real example",
          "output": null
        }
      ],
      "complexity": null,
      "notes": [],
      "see_also": [],
      "updated_at": null,
      "author_role": null,
      "related": [],
      "manual_path": null,
      "manual_html": null
    },
    "pigeonhole_sort": {
      "name": "pigeonhole_sort",
      "category": "sort",
      "category_path": "sort",
      "tags": [
        "allocation",
        "cleanup",
        "iteration",
        "intermediate"
      ],
      "prototype": "pigeonhole_sort(int *arr, int size)",
      "description": "No description available.",
      "parameters": [],
      "return_value": "Return value description not available.",
      "examples": [
        {
          "title": "Basic usage of pigeonhole_sort",
          "code": "// Example usage of pigeonhole_sort\n// TODO: Add real example",
          "output": null
        }
      ],
      "complexity": null,
      "notes": [],
      "see_also": [],
      "updated_at": null,
      "author_role": null,
      "related": [],
      "manual_path": null,
      "manual_html": null
    },
    "ft_sprintf": {
      "name": "ft_sprintf",
      "category": "stdio",
      "category_path": "stdio",
      "tags": [
        "output",
        "iteration",
        "basic"
      ],
      "prototype": "int     ft_sprintf(char *dst, const char *format, ...)",
      "description": "No description available.",
      "parameters": [],
      "return_value": "Return value description not available.",
      "examples": [
        {
          "title": "Basic usage of ft_sprintf",
          "code": "// Example usage of ft_sprintf\n// TODO: Add real example",
          "output": null
        }
      ],
      "complexity": null,
      "notes": [],
      "see_also": [],
      "updated_at": null,
      "author_role": null,
      "related": [],
      "manual_path": null,
      "manual_html": null
    },
    "slab": {
      "name": "slab",
      "category": "stdlib",
      "category_path": "stdlib/slab",
      "tags": [
        "cleanup",
        "iteration",
        "basic"
      ],
      "prototype": "/* Function: slab */",
      "description": "No description available.",
      "parameters": [],
      "return_value": "Return value description not available.",
      "examples": [
        {
          "title": "Basic usage of slab",
          "code": "// Example usage of slab\n// TODO: Add real example",
          "output": null
        }
      ],
      "complexity": null,
      "notes": [],
      "see_also": [],
      "updated_at": null,
      "author_role": null,
      "related": [],
      "manual_path": null,
      "manual_html": null
    },
    "ft_strnstr": {
      "name": "ft_strnstr",
      "category": "strings",
      "category_path": "strings",
      "tags": [
        "string",
        "iteration",
        "basic"
      ],
      "prototype": "ft_strnstr(const char *haystack, const char *needle, t_size n)",
      "description": "#include \"TDD/test.h\"",
      "parameters": [],
      "return_value": "Return value description not available.",
      "examples": [
        {
          "title": "Basic usage of ft_strnstr",
          "code": "// Example usage of ft_strnstr\n// TODO: Add real example",
          "output": null
        }
      ],
      "complexity": null,
      "notes": [],
      "see_also": [],
      "updated_at": null,
      "author_role": null,
      "related": [],
      "manual_path": null,
      "manual_html": null
    },
    "menu": {
      "name": "menu",
      "category": "classes",
      "category_path": "classes/render/interface",
      "tags": [
        "basic"
      ],
      "prototype": "menu(t_meta *meta)",
      "description": "No description available.",
      "parameters": [],
      "return_value": "Return value description not available.",
      "examples": [
        {
          "title": "Basic usage of menu",
          "code": "// Example usage of menu\n// TODO: Add real example",
          "output": null
        }
      ],
      "complexity": null,
      "notes": [],
      "see_also": [],
      "updated_at": null,
      "author_role": null,
      "related": [],
      "manual_path": null,
      "manual_html": null
    },
    "parser_write_string": {
      "name": "parser_write_string",
      "category": "stdio",
      "category_path": "stdio/ft_printf/src",
      "tags": [
        "basic"
      ],
      "prototype": "parser_write_string(t_parser *p)",
      "description": "No description available.",
      "parameters": [],
      "return_value": "Return value description not available.",
      "examples": [
        {
          "title": "Basic usage of parser_write_string",
          "code": "// Example usage of parser_write_string\n// TODO: Add real example",
          "output": null
        }
      ],
      "complexity": null,
      "notes": [],
      "see_also": [],
      "updated_at": null,
      "author_role": null,
      "related": [],
      "manual_path": null,
      "manual_html": null
    },
    "ft_strjoin": {
      "name": "ft_strjoin",
      "category": "strings",
      "category_path": "strings",
      "tags": [
        "string",
        "allocation",
        "iteration",
        "intermediate"
      ],
      "prototype": "ft_strjoin(char const *s1, char const *s2)",
      "description": "#include \"TDD/test.h\"",
      "parameters": [],
      "return_value": "Return value description not available.",
      "examples": [
        {
          "title": "Basic usage of ft_strjoin",
          "code": "// Example usage of ft_strjoin\n// TODO: Add real example",
          "output": null
        }
      ],
      "complexity": null,
      "notes": [],
      "see_also": [],
      "updated_at": null,
      "author_role": null,
      "related": [],
      "manual_path": null,
      "manual_html": null
    },
    "pool_helpers": {
      "name": "pool_helpers",
      "category": "stdlib",
      "category_path": "stdlib/pool",
      "tags": [
        "allocation",
        "cleanup",
        "iteration",
        "intermediate"
      ],
      "prototype": "/* Function: pool_helpers */",
      "description": "No description available.",
      "parameters": [],
      "return_value": "Return value description not available.",
      "examples": [
        {
          "title": "Basic usage of pool_helpers",
          "code": "// Example usage of pool_helpers\n// TODO: Add real example",
          "output": null
        }
      ],
      "complexity": null,
      "notes": [],
      "see_also": [],
      "updated_at": null,
      "author_role": null,
      "related": [],
      "manual_path": null,
      "manual_html": null
    },
    "dll_push_front": {
      "name": "dll_push_front",
      "category": "data_structures",
      "category_path": "data_structures/doubly_linked_list",
      "tags": [
        "allocation",
        "intermediate"
      ],
      "prototype": "dll_push_front(t_doubly_list *list, void *data)",
      "description": "No description available.",
      "parameters": [],
      "return_value": "Return value description not available.",
      "examples": [
        {
          "title": "Basic usage of dll_push_front",
          "code": "// Example usage of dll_push_front\n// TODO: Add real example",
          "output": null
        }
      ],
      "complexity": null,
      "notes": [],
      "see_also": [],
      "updated_at": null,
      "author_role": null,
      "related": [],
      "manual_path": null,
      "manual_html": null
    },
    "ft_queue_destroy": {
      "name": "ft_queue_destroy",
      "category": "data_structures",
      "category_path": "data_structures/queue",
      "tags": [
        "basic"
      ],
      "prototype": "void\t\t\tft_queue_destroy(t_queue *queue)",
      "description": "Core functions",
      "parameters": [],
      "return_value": "Return value description not available.",
      "examples": [
        {
          "title": "Basic usage of ft_queue_destroy",
          "code": "// Example usage of ft_queue_destroy\n// TODO: Add real example",
          "output": null
        }
      ],
      "complexity": null,
      "notes": [],
      "see_also": [],
      "updated_at": null,
      "author_role": null,
      "related": [],
      "manual_path": null,
      "manual_html": null
    },
    "ft_queue_clear": {
      "name": "ft_queue_clear",
      "category": "data_structures",
      "category_path": "data_structures/queue",
      "tags": [
        "basic"
      ],
      "prototype": "void\t\t\tft_queue_clear(t_queue *queue)",
      "description": "Core functions",
      "parameters": [],
      "return_value": "Return value description not available.",
      "examples": [
        {
          "title": "Basic usage of ft_queue_clear",
          "code": "// Example usage of ft_queue_clear\n// TODO: Add real example",
          "output": null
        }
      ],
      "complexity": null,
      "notes": [],
      "see_also": [],
      "updated_at": null,
      "author_role": null,
      "related": [],
      "manual_path": null,
      "manual_html": null
    },
    "ft_queue_print_addresses": {
      "name": "ft_queue_print_addresses",
      "category": "data_structures",
      "category_path": "data_structures/queue",
      "tags": [
        "basic"
      ],
      "prototype": "void\t\t\tft_queue_print_addresses(t_queue *queue)",
      "description": "Core functions",
      "parameters": [],
      "return_value": "Return value description not available.",
      "examples": [
        {
          "title": "Basic usage of ft_queue_print_addresses",
          "code": "// Example usage of ft_queue_print_addresses\n// TODO: Add real example",
          "output": null
        }
      ],
      "complexity": null,
      "notes": [],
      "see_also": [],
      "updated_at": null,
      "author_role": null,
      "related": [],
      "manual_path": null,
      "manual_html": null
    },
    "ft_vector_destroy": {
      "name": "ft_vector_destroy",
      "category": "data_structures",
      "category_path": "data_structures/vector",
      "tags": [
        "basic"
      ],
      "prototype": "void\t\tft_vector_destroy(t_vector *vector)",
      "description": "Utility functions",
      "parameters": [],
      "return_value": "Return value description not available.",
      "examples": [
        {
          "title": "Basic usage of ft_vector_destroy",
          "code": "// Example usage of ft_vector_destroy\n// TODO: Add real example",
          "output": null
        }
      ],
      "complexity": null,
      "notes": [],
      "see_also": [],
      "updated_at": null,
      "author_role": null,
      "related": [],
      "manual_path": null,
      "manual_html": null
    },
    "ft_create_node": {
      "name": "ft_create_node",
      "category": "data_structures",
      "category_path": "data_structures/lists",
      "tags": [
        "allocation",
        "intermediate"
      ],
      "prototype": "/* Function: ft_create_node */",
      "description": "No description available.",
      "parameters": [],
      "return_value": "Return value description not available.",
      "examples": [
        {
          "title": "Basic usage of ft_create_node",
          "code": "// Example usage of ft_create_node\n// TODO: Add real example",
          "output": null
        }
      ],
      "complexity": null,
      "notes": [],
      "see_also": [],
      "updated_at": null,
      "author_role": null,
      "related": [],
      "manual_path": null,
      "manual_html": null
    },
    "queue_is_empty": {
      "name": "queue_is_empty",
      "category": "data_structures",
      "category_path": "data_structures/queue",
      "tags": [
        "basic"
      ],
      "prototype": "queue_is_empty(t_queue *queue)",
      "description": "No description available.",
      "parameters": [],
      "return_value": "Return value description not available.",
      "examples": [
        {
          "title": "Basic usage of queue_is_empty",
          "code": "// Example usage of queue_is_empty\n// TODO: Add real example",
          "output": null
        }
      ],
      "complexity": null,
      "notes": [],
      "see_also": [],
      "updated_at": null,
      "author_role": null,
      "related": [],
      "manual_path": null,
      "manual_html": null
    },
    "ft_vsprintf": {
      "name": "ft_vsprintf",
      "category": "stdio",
      "category_path": "stdio",
      "tags": [
        "output",
        "iteration",
        "basic"
      ],
      "prototype": "int     ft_vsprintf(char *dst, const char *format, va_list *ap)",
      "description": "No description available.",
      "parameters": [],
      "return_value": "Return value description not available.",
      "examples": [
        {
          "title": "Basic usage of ft_vsprintf",
          "code": "// Example usage of ft_vsprintf\n// TODO: Add real example",
          "output": null
        }
      ],
      "complexity": null,
      "notes": [],
      "see_also": [],
      "updated_at": null,
      "author_role": null,
      "related": [],
      "manual_path": null,
      "manual_html": null
    },
    "ft_isalpha": {
      "name": "ft_isalpha",
      "category": "ctype",
      "category_path": "ctype",
      "tags": [
        "validation",
        "basic"
      ],
      "prototype": "int\tft_isalpha(int c)",
      "description": "No description available.",
      "parameters": [],
      "return_value": "Return value description not available.",
      "examples": [
        {
          "title": "Basic usage of ft_isalpha",
          "code": "// Example usage of ft_isalpha\n// TODO: Add real example",
          "output": null
        }
      ],
      "complexity": null,
      "notes": [],
      "see_also": [],
      "updated_at": null,
      "author_role": null,
      "related": [],
      "manual_path": null,
      "manual_html": null
    },
    "ft_print_table": {
      "name": "ft_print_table",
      "category": "render",
      "category_path": "render",
      "tags": [
        "basic"
      ],
      "prototype": "void\tft_print_table(char **headers, char ***data, int rows, int cols)",
      "description": "No description available.",
      "parameters": [],
      "return_value": "Return value description not available.",
      "examples": [
        {
          "title": "Basic usage of ft_print_table",
          "code": "// Example usage of ft_print_table\n// TODO: Add real example",
          "output": null
        }
      ],
      "complexity": null,
      "notes": [],
      "see_also": [],
      "updated_at": null,
      "author_role": null,
      "related": [],
      "manual_path": null,
      "manual_html": null
    },
    "vector_destroy": {
      "name": "vector_destroy",
      "category": "data_structures",
      "category_path": "data_structures/vector",
      "tags": [
        "cleanup",
        "basic"
      ],
      "prototype": "vector_destroy(t_vector *vector)",
      "description": "No description available.",
      "parameters": [],
      "return_value": "Return value description not available.",
      "examples": [
        {
          "title": "Basic usage of vector_destroy",
          "code": "// Example usage of vector_destroy\n// TODO: Add real example",
          "output": null
        }
      ],
      "complexity": null,
      "notes": [],
      "see_also": [],
      "updated_at": null,
      "author_role": null,
      "related": [],
      "manual_path": null,
      "manual_html": null
    },
    "coktail_shaker_sort": {
      "name": "coktail_shaker_sort",
      "category": "sort",
      "category_path": "sort",
      "tags": [
        "iteration",
        "basic"
      ],
      "prototype": "/* Function: coktail_shaker_sort */",
      "description": "int main(void)",
      "parameters": [],
      "return_value": "Return value description not available.",
      "examples": [
        {
          "title": "Basic usage of coktail_shaker_sort",
          "code": "// Example usage of coktail_shaker_sort\n// TODO: Add real example",
          "output": null
        }
      ],
      "complexity": null,
      "notes": [],
      "see_also": [],
      "updated_at": null,
      "author_role": null,
      "related": [],
      "manual_path": null,
      "manual_html": null
    },
    "ft_subtract": {
      "name": "ft_subtract",
      "category": "math",
      "category_path": "math/algebra",
      "tags": [
        "basic"
      ],
      "prototype": "int\t\t\tft_subtract(int x, int y)",
      "description": "Define M_PI if not already defined",
      "parameters": [],
      "return_value": "Return value description not available.",
      "examples": [
        {
          "title": "Basic usage of ft_subtract",
          "code": "// Example usage of ft_subtract\n// TODO: Add real example",
          "output": null
        }
      ],
      "complexity": null,
      "notes": [],
      "see_also": [],
      "updated_at": null,
      "author_role": null,
      "related": [],
      "manual_path": null,
      "manual_html": null
    },
    "quat_to_matrix": {
      "name": "quat_to_matrix",
      "category": "math",
      "category_path": "math/geometry/quaternion",
      "tags": [
        "basic"
      ],
      "prototype": "/* Function: quat_to_matrix */",
      "description": "Convert quaternion to 3x3 rotation matrix",
      "parameters": [],
      "return_value": "Return value description not available.",
      "examples": [
        {
          "title": "Basic usage of quat_to_matrix",
          "code": "// Example usage of quat_to_matrix\n// TODO: Add real example",
          "output": null
        }
      ],
      "complexity": null,
      "notes": [],
      "see_also": [],
      "updated_at": null,
      "author_role": null,
      "related": [],
      "manual_path": null,
      "manual_html": null
    },
    "ft_countwords_space": {
      "name": "ft_countwords_space",
      "category": "strings",
      "category_path": "strings",
      "tags": [
        "basic"
      ],
      "prototype": "int\t\tft_countwords_space(const char *s1)",
      "description": "No description available.",
      "parameters": [],
      "return_value": "Return value description not available.",
      "examples": [
        {
          "title": "Basic usage of ft_countwords_space",
          "code": "// Example usage of ft_countwords_space\n// TODO: Add real example",
          "output": null
        }
      ],
      "complexity": null,
      "notes": [],
      "see_also": [],
      "updated_at": null,
      "author_role": null,
      "related": [],
      "manual_path": null,
      "manual_html": null
    },
    "ft_first_word": {
      "name": "ft_first_word",
      "category": "stdio",
      "category_path": "stdio",
      "tags": [
        "iteration",
        "basic"
      ],
      "prototype": "void\tft_first_word(char *str)",
      "description": "No description available.",
      "parameters": [],
      "return_value": "Return value description not available.",
      "examples": [
        {
          "title": "Basic usage of ft_first_word",
          "code": "// Example usage of ft_first_word\n// TODO: Add real example",
          "output": null
        }
      ],
      "complexity": null,
      "notes": [],
      "see_also": [],
      "updated_at": null,
      "author_role": null,
      "related": [],
      "manual_path": null,
      "manual_html": null
    },
    "create_linked_list": {
      "name": "create_linked_list",
      "category": "data_structures",
      "category_path": "data_structures/lists",
      "tags": [
        "linked_list",
        "allocation",
        "cleanup",
        "intermediate"
      ],
      "prototype": "t_list\t*create_linked_list(int *arr, int n)\n{\n\tif (n <= 0)\n\t\treturn (NULL)",
      "description": "No description available.",
      "parameters": [],
      "return_value": "Return value description not available.",
      "examples": [
        {
          "title": "Basic usage of create_linked_list",
          "code": "// Example usage of create_linked_list\n// TODO: Add real example",
          "output": null
        }
      ],
      "complexity": null,
      "notes": [],
      "see_also": [],
      "updated_at": null,
      "author_role": null,
      "related": [],
      "manual_path": null,
      "manual_html": null
    },
    "ft_hex_digit": {
      "name": "ft_hex_digit",
      "category": "ctype",
      "category_path": "ctype",
      "tags": [
        "basic"
      ],
      "prototype": "/* Function: ft_hex_digit */",
      "description": "No description available.",
      "parameters": [],
      "return_value": "Return value description not available.",
      "examples": [
        {
          "title": "Basic usage of ft_hex_digit",
          "code": "// Example usage of ft_hex_digit\n// TODO: Add real example",
          "output": null
        }
      ],
      "complexity": null,
      "notes": [],
      "see_also": [],
      "updated_at": null,
      "author_role": null,
      "related": [],
      "manual_path": null,
      "manual_html": null
    },
    "valid_pixel": {
      "name": "valid_pixel",
      "category": "math",
      "category_path": "math/geometry/draw",
      "tags": [
        "basic"
      ],
      "prototype": "valid_pixel(t_point pixel)\n//",
      "description": "int valid_pixel(t_point pixel)",
      "parameters": [],
      "return_value": "Return value description not available.",
      "examples": [
        {
          "title": "Basic usage of valid_pixel",
          "code": "// Example usage of valid_pixel\n// TODO: Add real example",
          "output": null
        }
      ],
      "complexity": null,
      "notes": [],
      "see_also": [],
      "updated_at": null,
      "author_role": null,
      "related": [],
      "manual_path": null,
      "manual_html": null
    },
    "draw_dot": {
      "name": "draw_dot",
      "category": "math",
      "category_path": "math/geometry/draw",
      "tags": [
        "basic"
      ],
      "prototype": "/* Function: draw_dot */",
      "description": "No description available.",
      "parameters": [],
      "return_value": "Return value description not available.",
      "examples": [
        {
          "title": "Basic usage of draw_dot",
          "code": "// Example usage of draw_dot\n// TODO: Add real example",
          "output": null
        }
      ],
      "complexity": null,
      "notes": [],
      "see_also": [],
      "updated_at": null,
      "author_role": null,
      "related": [],
      "manual_path": null,
      "manual_html": null
    },
    "slab_helpers": {
      "name": "slab_helpers",
      "category": "stdlib",
      "category_path": "stdlib/slab",
      "tags": [
        "allocation",
        "cleanup",
        "iteration",
        "intermediate"
      ],
      "prototype": "/* Function: slab_helpers */",
      "description": "No description available.",
      "parameters": [],
      "return_value": "Return value description not available.",
      "examples": [
        {
          "title": "Basic usage of slab_helpers",
          "code": "// Example usage of slab_helpers\n// TODO: Add real example",
          "output": null
        }
      ],
      "complexity": null,
      "notes": [],
      "see_also": [],
      "updated_at": null,
      "author_role": null,
      "related": [],
      "manual_path": null,
      "manual_html": null
    },
    "ft_vector_clear": {
      "name": "ft_vector_clear",
      "category": "data_structures",
      "category_path": "data_structures/vector",
      "tags": [
        "basic"
      ],
      "prototype": "void\t\tft_vector_clear(t_vector *vector)",
      "description": "Utility functions",
      "parameters": [],
      "return_value": "Return value description not available.",
      "examples": [
        {
          "title": "Basic usage of ft_vector_clear",
          "code": "// Example usage of ft_vector_clear\n// TODO: Add real example",
          "output": null
        }
      ],
      "complexity": null,
      "notes": [],
      "see_also": [],
      "updated_at": null,
      "author_role": null,
      "related": [],
      "manual_path": null,
      "manual_html": null
    },
    "collision": {
      "name": "collision",
      "category": "math",
      "category_path": "math/geometry/draw",
      "tags": [
        "iteration",
        "basic"
      ],
      "prototype": "/* Function: collision */",
      "description": "int\tlimits(t_point *points, int len)",
      "parameters": [],
      "return_value": "Return value description not available.",
      "examples": [
        {
          "title": "Basic usage of collision",
          "code": "// Example usage of collision\n// TODO: Add real example",
          "output": null
        }
      ],
      "complexity": null,
      "notes": [],
      "see_also": [],
      "updated_at": null,
      "author_role": null,
      "related": [],
      "manual_path": null,
      "manual_html": null
    },
    "ft_bending": {
      "name": "ft_bending",
      "category": "math",
      "category_path": "math/geometry/draw",
      "tags": [
        "iteration",
        "basic"
      ],
      "prototype": "/* Function: ft_bending */",
      "description": "No description available.",
      "parameters": [],
      "return_value": "Return value description not available.",
      "examples": [
        {
          "title": "Basic usage of ft_bending",
          "code": "// Example usage of ft_bending\n// TODO: Add real example",
          "output": null
        }
      ],
      "complexity": null,
      "notes": [],
      "see_also": [],
      "updated_at": null,
      "author_role": null,
      "related": [],
      "manual_path": null,
      "manual_html": null
    },
    "ft_dll_clear": {
      "name": "ft_dll_clear",
      "category": "data_structures",
      "category_path": "data_structures/doubly_linked_list",
      "tags": [
        "basic"
      ],
      "prototype": "void\t\t\tft_dll_clear(t_doubly_list *list)",
      "description": "Core functions",
      "parameters": [],
      "return_value": "Return value description not available.",
      "examples": [
        {
          "title": "Basic usage of ft_dll_clear",
          "code": "// Example usage of ft_dll_clear\n// TODO: Add real example",
          "output": null
        }
      ],
      "complexity": null,
      "notes": [],
      "see_also": [],
      "updated_at": null,
      "author_role": null,
      "related": [],
      "manual_path": null,
      "manual_html": null
    },
    "draw_info": {
      "name": "draw_info",
      "category": "classes",
      "category_path": "classes/render/interface",
      "tags": [
        "iteration",
        "basic"
      ],
      "prototype": "draw_info(t_meta *meta)",
      "description": "// DRAW INFO ////\");",
      "parameters": [],
      "return_value": "Return value description not available.",
      "examples": [
        {
          "title": "Basic usage of draw_info",
          "code": "// Example usage of draw_info\n// TODO: Add real example",
          "output": null
        }
      ],
      "complexity": null,
      "notes": [],
      "see_also": [],
      "updated_at": null,
      "author_role": null,
      "related": [],
      "manual_path": null,
      "manual_html": null
    },
    "ft_putnbr_fd": {
      "name": "ft_putnbr_fd",
      "category": "stdio",
      "category_path": "stdio",
      "tags": [
        "basic"
      ],
      "prototype": "ft_putnbr_fd(nb / 10, fd)",
      "description": "#include \"TDD/test.h\"",
      "parameters": [],
      "return_value": "Return value description not available.",
      "examples": [
        {
          "title": "Basic usage of ft_putnbr_fd",
          "code": "// Example usage of ft_putnbr_fd\n// TODO: Add real example",
          "output": null
        }
      ],
      "complexity": null,
      "notes": [],
      "see_also": [],
      "updated_at": null,
      "author_role": null,
      "related": [],
      "manual_path": null,
      "manual_html": null
    },
    "ft_isalnum": {
      "name": "ft_isalnum",
      "category": "ctype",
      "category_path": "ctype",
      "tags": [
        "validation",
        "basic"
      ],
      "prototype": "int\tft_isalnum(int c)",
      "description": "No description available.",
      "parameters": [],
      "return_value": "Return value description not available.",
      "examples": [
        {
          "title": "Basic usage of ft_isalnum",
          "code": "// Example usage of ft_isalnum\n// TODO: Add real example",
          "output": null
        }
      ],
      "complexity": null,
      "notes": [],
      "see_also": [],
      "updated_at": null,
      "author_role": null,
      "related": [],
      "manual_path": null,
      "manual_html": null
    },
    "input_handler": {
      "name": "input_handler",
      "category": "classes",
      "category_path": "classes/render/event",
      "tags": [
        "allocation",
        "iteration",
        "intermediate"
      ],
      "prototype": "/* Function: input_handler */",
      "description": "No description available.",
      "parameters": [],
      "return_value": "Return value description not available.",
      "examples": [
        {
          "title": "Basic usage of input_handler",
          "code": "// Example usage of input_handler\n// TODO: Add real example",
          "output": null
        }
      ],
      "complexity": null,
      "notes": [],
      "see_also": [],
      "updated_at": null,
      "author_role": null,
      "related": [],
      "manual_path": null,
      "manual_html": null
    },
    "ft_countwords": {
      "name": "ft_countwords",
      "category": "strings",
      "category_path": "strings",
      "tags": [
        "iteration",
        "basic"
      ],
      "prototype": "return (ft_countwords(s1, ' '))",
      "description": "int main(int argc, char **argv)",
      "parameters": [],
      "return_value": "Return value description not available.",
      "examples": [
        {
          "title": "Basic usage of ft_countwords",
          "code": "// Example usage of ft_countwords\n// TODO: Add real example",
          "output": null
        }
      ],
      "complexity": null,
      "notes": [],
      "see_also": [],
      "updated_at": null,
      "author_role": null,
      "related": [],
      "manual_path": null,
      "manual_html": null
    },
    "tim_sort": {
      "name": "tim_sort",
      "category": "sort",
      "category_path": "sort",
      "tags": [
        "iteration",
        "basic"
      ],
      "prototype": "void\ttim_sort(int *arr, int n)\n{\n\ttim_sort_runs(arr, n)",
      "description": "//int\tmain(void)",
      "parameters": [],
      "return_value": "Return value description not available.",
      "examples": [
        {
          "title": "Basic usage of tim_sort",
          "code": "// Example usage of tim_sort\n// TODO: Add real example",
          "output": null
        }
      ],
      "complexity": null,
      "notes": [],
      "see_also": [],
      "updated_at": null,
      "author_role": null,
      "related": [],
      "manual_path": null,
      "manual_html": null
    },
    "ft_table_utils": {
      "name": "ft_table_utils",
      "category": "render",
      "category_path": "render",
      "tags": [
        "iteration",
        "basic"
      ],
      "prototype": "/* Function: ft_table_utils */",
      "description": "No description available.",
      "parameters": [],
      "return_value": "Return value description not available.",
      "examples": [
        {
          "title": "Basic usage of ft_table_utils",
          "code": "// Example usage of ft_table_utils\n// TODO: Add real example",
          "output": null
        }
      ],
      "complexity": null,
      "notes": [],
      "see_also": [],
      "updated_at": null,
      "author_role": null,
      "related": [],
      "manual_path": null,
      "manual_html": null
    },
    "ft_cycle_sort": {
      "name": "ft_cycle_sort",
      "category": "sort",
      "category_path": "sort",
      "tags": [
        "basic"
      ],
      "prototype": "int\t\tft_cycle_sort(int *arr, int size)",
      "description": "Wrapper functions",
      "parameters": [],
      "return_value": "Return value description not available.",
      "examples": [
        {
          "title": "Basic usage of ft_cycle_sort",
          "code": "// Example usage of ft_cycle_sort\n// TODO: Add real example",
          "output": null
        }
      ],
      "complexity": null,
      "notes": [],
      "see_also": [],
      "updated_at": null,
      "author_role": null,
      "related": [],
      "manual_path": null,
      "manual_html": null
    },
    "ft_lstnew": {
      "name": "ft_lstnew",
      "category": "data_structures",
      "category_path": "data_structures/lists",
      "tags": [
        "allocation",
        "cleanup",
        "iteration",
        "intermediate"
      ],
      "prototype": "ft_lstnew(void *content)",
      "description": "#include \"TDD/test.h\"",
      "parameters": [],
      "return_value": "Return value description not available.",
      "examples": [
        {
          "title": "Basic usage of ft_lstnew",
          "code": "// Example usage of ft_lstnew\n// TODO: Add real example",
          "output": null
        }
      ],
      "complexity": null,
      "notes": [],
      "see_also": [],
      "updated_at": null,
      "author_role": null,
      "related": [],
      "manual_path": null,
      "manual_html": null
    },
    "vnormal": {
      "name": "vnormal",
      "category": "math",
      "category_path": "math/geometry/quaternion",
      "tags": [
        "basic"
      ],
      "prototype": "void\tvnormal(float *v)\n{\n\tvscale(v, 1.0 / vlength(v))",
      "description": "No description available.",
      "parameters": [],
      "return_value": "Return value description not available.",
      "examples": [
        {
          "title": "Basic usage of vnormal",
          "code": "// Example usage of vnormal\n// TODO: Add real example",
          "output": null
        }
      ],
      "complexity": null,
      "notes": [],
      "see_also": [],
      "updated_at": null,
      "author_role": null,
      "related": [],
      "manual_path": null,
      "manual_html": null
    },
    "matric_mult": {
      "name": "matric_mult",
      "category": "math",
      "category_path": "math/geometry/matrices",
      "tags": [
        "iteration",
        "basic"
      ],
      "prototype": "/* Function: matric_mult */",
      "description": "No description available.",
      "parameters": [],
      "return_value": "Return value description not available.",
      "examples": [
        {
          "title": "Basic usage of matric_mult",
          "code": "// Example usage of matric_mult\n// TODO: Add real example",
          "output": null
        }
      ],
      "complexity": null,
      "notes": [],
      "see_also": [],
      "updated_at": null,
      "author_role": null,
      "related": [],
      "manual_path": null,
      "manual_html": null
    },
    "event_system": {
      "name": "event_system",
      "category": "classes",
      "category_path": "classes/render/event",
      "tags": [
        "allocation",
        "iteration",
        "intermediate"
      ],
      "prototype": "/* Function: event_system */",
      "description": "No description available.",
      "parameters": [],
      "return_value": "Return value description not available.",
      "examples": [
        {
          "title": "Basic usage of event_system",
          "code": "// Example usage of event_system\n// TODO: Add real example",
          "output": null
        }
      ],
      "complexity": null,
      "notes": [],
      "see_also": [],
      "updated_at": null,
      "author_role": null,
      "related": [],
      "manual_path": null,
      "manual_html": null
    },
    "writer_write_format": {
      "name": "writer_write_format",
      "category": "stdio",
      "category_path": "stdio/ft_printf/src",
      "tags": [
        "iteration",
        "basic"
      ],
      "prototype": "/* Function: writer_write_format */",
      "description": "No description available.",
      "parameters": [],
      "return_value": "Return value description not available.",
      "examples": [
        {
          "title": "Basic usage of writer_write_format",
          "code": "// Example usage of writer_write_format\n// TODO: Add real example",
          "output": null
        }
      ],
      "complexity": null,
      "notes": [],
      "see_also": [],
      "updated_at": null,
      "author_role": null,
      "related": [],
      "manual_path": null,
      "manual_html": null
    },
    "ft_cl_rotate_backward": {
      "name": "ft_cl_rotate_backward",
      "category": "data_structures",
      "category_path": "data_structures/circular_linked_list",
      "tags": [
        "iteration",
        "basic"
      ],
      "prototype": "void\t\t\tft_cl_rotate_backward(t_circular_list *list, size_t steps)",
      "description": "Points to last node (last->next is first)",
      "parameters": [],
      "return_value": "Return value description not available.",
      "examples": [
        {
          "title": "Basic usage of ft_cl_rotate_backward",
          "code": "// Example usage of ft_cl_rotate_backward\n// TODO: Add real example",
          "output": null
        }
      ],
      "complexity": null,
      "notes": [],
      "see_also": [],
      "updated_at": null,
      "author_role": null,
      "related": [],
      "manual_path": null,
      "manual_html": null
    },
    "ft_vector_set": {
      "name": "ft_vector_set",
      "category": "data_structures",
      "category_path": "data_structures/vector",
      "tags": [
        "basic"
      ],
      "prototype": "bool\t\tft_vector_set(t_vector *vector, size_t index, void *element)",
      "description": "Utility functions",
      "parameters": [],
      "return_value": "Return value description not available.",
      "examples": [
        {
          "title": "Basic usage of ft_vector_set",
          "code": "// Example usage of ft_vector_set\n// TODO: Add real example",
          "output": null
        }
      ],
      "complexity": null,
      "notes": [],
      "see_also": [],
      "updated_at": null,
      "author_role": null,
      "related": [],
      "manual_path": null,
      "manual_html": null
    },
    "sorted_merge": {
      "name": "sorted_merge",
      "category": "data_structures",
      "category_path": "data_structures/lists",
      "tags": [
        "iteration",
        "basic"
      ],
      "prototype": "sorted_merge(t_list *head1, t_list *head2)",
      "description": "No description available.",
      "parameters": [],
      "return_value": "Return value description not available.",
      "examples": [
        {
          "title": "Basic usage of sorted_merge",
          "code": "// Example usage of sorted_merge\n// TODO: Add real example",
          "output": null
        }
      ],
      "complexity": null,
      "notes": [],
      "see_also": [],
      "updated_at": null,
      "author_role": null,
      "related": [],
      "manual_path": null,
      "manual_html": null
    },
    "sigsegv": {
      "name": "sigsegv",
      "category": "debug",
      "category_path": "debug",
      "tags": [
        "iteration",
        "basic"
      ],
      "prototype": "sigsegv(int sig, siginfo_t *info, void *uctx)",
      "description": "signal-safe write that consumes all bytes or stops on error",
      "parameters": [],
      "return_value": "Return value description not available.",
      "examples": [
        {
          "title": "Basic usage of sigsegv",
          "code": "// Example usage of sigsegv\n// TODO: Add real example",
          "output": null
        }
      ],
      "complexity": null,
      "notes": [],
      "see_also": [],
      "updated_at": null,
      "author_role": null,
      "related": [],
      "manual_path": null,
      "manual_html": null
    },
    "lerp_chan": {
      "name": "lerp_chan",
      "category": "math",
      "category_path": "math/algebra",
      "tags": [
        "basic"
      ],
      "prototype": "uint32_t\tlerp_chan(uint32_t a, uint32_t b, float t)\n{\n\treturn ((uint32_t)(a + (b - a) * t))",
      "description": "No description available.",
      "parameters": [],
      "return_value": "Return value description not available.",
      "examples": [
        {
          "title": "Basic usage of lerp_chan",
          "code": "// Example usage of lerp_chan\n// TODO: Add real example",
          "output": null
        }
      ],
      "complexity": null,
      "notes": [],
      "see_also": [],
      "updated_at": null,
      "author_role": null,
      "related": [],
      "manual_path": null,
      "manual_html": null
    },
    "ft_printf": {
      "name": "ft_printf",
      "category": "stdio",
      "category_path": "stdio/ft_printf/src",
      "tags": [
        "output",
        "iteration",
        "basic"
      ],
      "prototype": "ft_printf(const char *format, ...)",
      "description": "No description available.",
      "parameters": [],
      "return_value": "Return value description not available.",
      "examples": [
        {
          "title": "Basic usage of ft_printf",
          "code": "// Example usage of ft_printf\n// TODO: Add real example",
          "output": null
        }
      ],
      "complexity": null,
      "notes": [],
      "see_also": [],
      "updated_at": null,
      "author_role": null,
      "related": [],
      "manual_path": null,
      "manual_html": null
    },
    "ft_dll_print_addresses": {
      "name": "ft_dll_print_addresses",
      "category": "data_structures",
      "category_path": "data_structures/doubly_linked_list",
      "tags": [
        "basic"
      ],
      "prototype": "void\t\t\tft_dll_print_addresses(t_doubly_list *list)",
      "description": "Core functions",
      "parameters": [],
      "return_value": "Return value description not available.",
      "examples": [
        {
          "title": "Basic usage of ft_dll_print_addresses",
          "code": "// Example usage of ft_dll_print_addresses\n// TODO: Add real example",
          "output": null
        }
      ],
      "complexity": null,
      "notes": [],
      "see_also": [],
      "updated_at": null,
      "author_role": null,
      "related": [],
      "manual_path": null,
      "manual_html": null
    },
    "vdot": {
      "name": "vdot",
      "category": "math",
      "category_path": "math/geometry/quaternion",
      "tags": [
        "basic"
      ],
      "prototype": "float\tvdot(const float *v1, const float *v2)\n{\n\treturn (v1[0] * v2[0] + v1[1] * v2[1] + v1[2] * v2[2])",
      "description": "No description available.",
      "parameters": [],
      "return_value": "Return value description not available.",
      "examples": [
        {
          "title": "Basic usage of vdot",
          "code": "// Example usage of vdot\n// TODO: Add real example",
          "output": null
        }
      ],
      "complexity": null,
      "notes": [],
      "see_also": [],
      "updated_at": null,
      "author_role": null,
      "related": [],
      "manual_path": null,
      "manual_html": null
    },
    "ft_super_trim": {
      "name": "ft_super_trim",
      "category": "strings",
      "category_path": "strings",
      "tags": [
        "iteration",
        "basic"
      ],
      "prototype": "ft_super_trim(t_addr *ptr, int flags)",
      "description": "No description available.",
      "parameters": [],
      "return_value": "Return value description not available.",
      "examples": [
        {
          "title": "Basic usage of ft_super_trim",
          "code": "// Example usage of ft_super_trim\n// TODO: Add real example",
          "output": null
        }
      ],
      "complexity": null,
      "notes": [],
      "see_also": [],
      "updated_at": null,
      "author_role": null,
      "related": [],
      "manual_path": null,
      "manual_html": null
    },
    "ft_print_hex": {
      "name": "ft_print_hex",
      "category": "memory",
      "category_path": "memory",
      "tags": [
        "allocation",
        "intermediate"
      ],
      "prototype": "void\tft_print_hex(unsigned char *p, unsigned int size, unsigned long addr)",
      "description": "No description available.",
      "parameters": [],
      "return_value": "Return value description not available.",
      "examples": [
        {
          "title": "Basic usage of ft_print_hex",
          "code": "// Example usage of ft_print_hex\n// TODO: Add real example",
          "output": null
        }
      ],
      "complexity": null,
      "notes": [],
      "see_also": [],
      "updated_at": null,
      "author_role": null,
      "related": [],
      "manual_path": null,
      "manual_html": null
    },
    "vector_capacity": {
      "name": "vector_capacity",
      "category": "data_structures",
      "category_path": "data_structures/vector",
      "tags": [
        "basic"
      ],
      "prototype": "vector_capacity(t_vector *vector)",
      "description": "No description available.",
      "parameters": [],
      "return_value": "Return value description not available.",
      "examples": [
        {
          "title": "Basic usage of vector_capacity",
          "code": "// Example usage of vector_capacity\n// TODO: Add real example",
          "output": null
        }
      ],
      "complexity": null,
      "notes": [],
      "see_also": [],
      "updated_at": null,
      "author_role": null,
      "related": [],
      "manual_path": null,
      "manual_html": null
    },
    "ft_putendl_fd": {
      "name": "ft_putendl_fd",
      "category": "stdio",
      "category_path": "stdio",
      "tags": [
        "iteration",
        "basic"
      ],
      "prototype": "void\tft_putendl_fd(char *s, int fd)",
      "description": "No description available.",
      "parameters": [],
      "return_value": "Return value description not available.",
      "examples": [
        {
          "title": "Basic usage of ft_putendl_fd",
          "code": "// Example usage of ft_putendl_fd\n// TODO: Add real example",
          "output": null
        }
      ],
      "complexity": null,
      "notes": [],
      "see_also": [],
      "updated_at": null,
      "author_role": null,
      "related": [],
      "manual_path": null,
      "manual_html": null
    },
    "ft_dll_reverse": {
      "name": "ft_dll_reverse",
      "category": "data_structures",
      "category_path": "data_structures/doubly_linked_list",
      "tags": [
        "basic"
      ],
      "prototype": "void\t\t\tft_dll_reverse(t_doubly_list *list)",
      "description": "Core functions",
      "parameters": [],
      "return_value": "Return value description not available.",
      "examples": [
        {
          "title": "Basic usage of ft_dll_reverse",
          "code": "// Example usage of ft_dll_reverse\n// TODO: Add real example",
          "output": null
        }
      ],
      "complexity": null,
      "notes": [],
      "see_also": [],
      "updated_at": null,
      "author_role": null,
      "related": [],
      "manual_path": null,
      "manual_html": null
    },
    "slab_destroy": {
      "name": "slab_destroy",
      "category": "stdlib",
      "category_path": "stdlib/slab",
      "tags": [
        "cleanup",
        "iteration",
        "basic"
      ],
      "prototype": "slab_destroy(t_slab_allocator *slab)",
      "description": "No description available.",
      "parameters": [],
      "return_value": "Return value description not available.",
      "examples": [
        {
          "title": "Basic usage of slab_destroy",
          "code": "// Example usage of slab_destroy\n// TODO: Add real example",
          "output": null
        }
      ],
      "complexity": null,
      "notes": [],
      "see_also": [],
      "updated_at": null,
      "author_role": null,
      "related": [],
      "manual_path": null,
      "manual_html": null
    },
    "ft_queue_is_empty": {
      "name": "ft_queue_is_empty",
      "category": "data_structures",
      "category_path": "data_structures/queue",
      "tags": [
        "basic"
      ],
      "prototype": "bool\t\t\tft_queue_is_empty(t_queue *queue)",
      "description": "Core functions",
      "parameters": [],
      "return_value": "Return value description not available.",
      "examples": [
        {
          "title": "Basic usage of ft_queue_is_empty",
          "code": "// Example usage of ft_queue_is_empty\n// TODO: Add real example",
          "output": null
        }
      ],
      "complexity": null,
      "notes": [],
      "see_also": [],
      "updated_at": null,
      "author_role": null,
      "related": [],
      "manual_path": null,
      "manual_html": null
    },
    "ft_table": {
      "name": "ft_table",
      "category": "render",
      "category_path": "render",
      "tags": [
        "iteration",
        "basic"
      ],
      "prototype": "/* Function: ft_table */",
      "description": "No description available.",
      "parameters": [],
      "return_value": "Return value description not available.",
      "examples": [
        {
          "title": "Basic usage of ft_table",
          "code": "// Example usage of ft_table\n// TODO: Add real example",
          "output": null
        }
      ],
      "complexity": null,
      "notes": [],
      "see_also": [],
      "updated_at": null,
      "author_role": null,
      "related": [],
      "manual_path": null,
      "manual_html": null
    },
    "utils2": {
      "name": "utils2",
      "category": "sort",
      "category_path": "sort",
      "tags": [
        "iteration",
        "basic"
      ],
      "prototype": "/* Function: utils2 */",
      "description": "No description available.",
      "parameters": [],
      "return_value": "Return value description not available.",
      "examples": [
        {
          "title": "Basic usage of utils2",
          "code": "// Example usage of utils2\n// TODO: Add real example",
          "output": null
        }
      ],
      "complexity": null,
      "notes": [],
      "see_also": [],
      "updated_at": null,
      "author_role": null,
      "related": [],
      "manual_path": null,
      "manual_html": null
    },
    "ft_substract": {
      "name": "ft_substract",
      "category": "math",
      "category_path": "math/algebra",
      "tags": [
        "basic"
      ],
      "prototype": "/* Function: ft_substract */",
      "description": "int main(int argc, char **argv)",
      "parameters": [],
      "return_value": "Return value description not available.",
      "examples": [
        {
          "title": "Basic usage of ft_substract",
          "code": "// Example usage of ft_substract\n// TODO: Add real example",
          "output": null
        }
      ],
      "complexity": null,
      "notes": [],
      "see_also": [],
      "updated_at": null,
      "author_role": null,
      "related": [],
      "manual_path": null,
      "manual_html": null
    },
    "axis_to_quat": {
      "name": "axis_to_quat",
      "category": "math",
      "category_path": "math/geometry/quaternion",
      "tags": [
        "basic"
      ],
      "prototype": "void\taxis_to_quat(float a[3], float phi, float q[4])\n{\n\tvcopy(a, q)",
      "description": "No description available.",
      "parameters": [],
      "return_value": "Return value description not available.",
      "examples": [
        {
          "title": "Basic usage of axis_to_quat",
          "code": "// Example usage of axis_to_quat\n// TODO: Add real example",
          "output": null
        }
      ],
      "complexity": null,
      "notes": [],
      "see_also": [],
      "updated_at": null,
      "author_role": null,
      "related": [],
      "manual_path": null,
      "manual_html": null
    },
    "input_handler_handlers": {
      "name": "input_handler_handlers",
      "category": "classes",
      "category_path": "classes/render/event",
      "tags": [
        "iteration",
        "basic"
      ],
      "prototype": "/* Function: input_handler_handlers */",
      "description": "No description available.",
      "parameters": [],
      "return_value": "Return value description not available.",
      "examples": [
        {
          "title": "Basic usage of input_handler_handlers",
          "code": "// Example usage of input_handler_handlers\n// TODO: Add real example",
          "output": null
        }
      ],
      "complexity": null,
      "notes": [],
      "see_also": [],
      "updated_at": null,
      "author_role": null,
      "related": [],
      "manual_path": null,
      "manual_html": null
    },
    "ft_isascii": {
      "name": "ft_isascii",
      "category": "ctype",
      "category_path": "ctype",
      "tags": [
        "validation",
        "iteration",
        "basic"
      ],
      "prototype": "int\tft_isascii(int c)\n{\n\treturn (c >= 0 && c <= 127)",
      "description": "//#include <stdio.h>",
      "parameters": [],
      "return_value": "Return value description not available.",
      "examples": [
        {
          "title": "Basic usage of ft_isascii",
          "code": "// Example usage of ft_isascii\n// TODO: Add real example",
          "output": null
        }
      ],
      "complexity": null,
      "notes": [],
      "see_also": [],
      "updated_at": null,
      "author_role": null,
      "related": [],
      "manual_path": null,
      "manual_html": null
    },
    "matrix_transpose": {
      "name": "matrix_transpose",
      "category": "math",
      "category_path": "math/geometry/matrices",
      "tags": [
        "iteration",
        "basic"
      ],
      "prototype": "** Usage: matrix_transpose(&out, &in)",
      "description": "No description available.",
      "parameters": [],
      "return_value": "Return value description not available.",
      "examples": [
        {
          "title": "Basic usage of matrix_transpose",
          "code": "// Example usage of matrix_transpose\n// TODO: Add real example",
          "output": null
        }
      ],
      "complexity": null,
      "notes": [],
      "see_also": [],
      "updated_at": null,
      "author_role": null,
      "related": [],
      "manual_path": null,
      "manual_html": null
    },
    "z_div": {
      "name": "z_div",
      "category": "math",
      "category_path": "math/geometry/draw",
      "tags": [
        "iteration",
        "basic"
      ],
      "prototype": "/* Function: z_div */",
      "description": "No description available.",
      "parameters": [],
      "return_value": "Return value description not available.",
      "examples": [
        {
          "title": "Basic usage of z_div",
          "code": "// Example usage of z_div\n// TODO: Add real example",
          "output": null
        }
      ],
      "complexity": null,
      "notes": [],
      "see_also": [],
      "updated_at": null,
      "author_role": null,
      "related": [],
      "manual_path": null,
      "manual_html": null
    },
    "ft_vector_add_back": {
      "name": "ft_vector_add_back",
      "category": "data_structures",
      "category_path": "data_structures/vector",
      "tags": [
        "basic"
      ],
      "prototype": "bool\t\tft_vector_add_back(t_vector *vector, void *element)",
      "description": "Utility functions",
      "parameters": [],
      "return_value": "Return value description not available.",
      "examples": [
        {
          "title": "Basic usage of ft_vector_add_back",
          "code": "// Example usage of ft_vector_add_back\n// TODO: Add real example",
          "output": null
        }
      ],
      "complexity": null,
      "notes": [],
      "see_also": [],
      "updated_at": null,
      "author_role": null,
      "related": [],
      "manual_path": null,
      "manual_html": null
    },
    "ft_typewriter_effect": {
      "name": "ft_typewriter_effect",
      "category": "render",
      "category_path": "render",
      "tags": [
        "basic"
      ],
      "prototype": "void\tft_typewriter_effect(const char *text, int delay_ms)",
      "description": "No description available.",
      "parameters": [],
      "return_value": "Return value description not available.",
      "examples": [
        {
          "title": "Basic usage of ft_typewriter_effect",
          "code": "// Example usage of ft_typewriter_effect\n// TODO: Add real example",
          "output": null
        }
      ],
      "complexity": null,
      "notes": [],
      "see_also": [],
      "updated_at": null,
      "author_role": null,
      "related": [],
      "manual_path": null,
      "manual_html": null
    },
    "float": {
      "name": "float",
      "category": "stdio",
      "category_path": "stdio/ft_scanf/parse_format",
      "tags": [
        "basic"
      ],
      "prototype": "/* Function: float */",
      "description": "No description available.",
      "parameters": [],
      "return_value": "Return value description not available.",
      "examples": [
        {
          "title": "Basic usage of float",
          "code": "// Example usage of float\n// TODO: Add real example",
          "output": null
        }
      ],
      "complexity": null,
      "notes": [],
      "see_also": [],
      "updated_at": null,
      "author_role": null,
      "related": [],
      "manual_path": null,
      "manual_html": null
    },
    "ft_toupper": {
      "name": "ft_toupper",
      "category": "memory",
      "category_path": "memory",
      "tags": [
        "conversion",
        "allocation",
        "intermediate"
      ],
      "prototype": "int\t\tft_toupper(int c)",
      "description": "No description available.",
      "parameters": [],
      "return_value": "Return value description not available.",
      "examples": [
        {
          "title": "Basic usage of ft_toupper",
          "code": "// Example usage of ft_toupper\n// TODO: Add real example",
          "output": null
        }
      ],
      "complexity": null,
      "notes": [],
      "see_also": [],
      "updated_at": null,
      "author_role": null,
      "related": [],
      "manual_path": null,
      "manual_html": null
    },
    "ft_isdigit": {
      "name": "ft_isdigit",
      "category": "ctype",
      "category_path": "ctype",
      "tags": [
        "validation",
        "basic"
      ],
      "prototype": "ft_isdigit(int c)",
      "description": "No description available.",
      "parameters": [],
      "return_value": "Return value description not available.",
      "examples": [
        {
          "title": "Basic usage of ft_isdigit",
          "code": "// Example usage of ft_isdigit\n// TODO: Add real example",
          "output": null
        }
      ],
      "complexity": null,
      "notes": [],
      "see_also": [],
      "updated_at": null,
      "author_role": null,
      "related": [],
      "manual_path": null,
      "manual_html": null
    },
    "ft_vector_reserve": {
      "name": "ft_vector_reserve",
      "category": "data_structures",
      "category_path": "data_structures/vector",
      "tags": [
        "basic"
      ],
      "prototype": "bool\t\tft_vector_reserve(t_vector *vector, size_t capacity)",
      "description": "Utility functions",
      "parameters": [],
      "return_value": "Return value description not available.",
      "examples": [
        {
          "title": "Basic usage of ft_vector_reserve",
          "code": "// Example usage of ft_vector_reserve\n// TODO: Add real example",
          "output": null
        }
      ],
      "complexity": null,
      "notes": [],
      "see_also": [],
      "updated_at": null,
      "author_role": null,
      "related": [],
      "manual_path": null,
      "manual_html": null
    },
    "counting_sort": {
      "name": "counting_sort",
      "category": "sort",
      "category_path": "sort",
      "tags": [
        "cleanup",
        "iteration",
        "basic"
      ],
      "prototype": "counting_sort(int *arr, int size)",
      "description": "int\tmain(void)",
      "parameters": [],
      "return_value": "Return value description not available.",
      "examples": [
        {
          "title": "Basic usage of counting_sort",
          "code": "// Example usage of counting_sort\n// TODO: Add real example",
          "output": null
        }
      ],
      "complexity": null,
      "notes": [],
      "see_also": [],
      "updated_at": null,
      "author_role": null,
      "related": [],
      "manual_path": null,
      "manual_html": null
    },
    "ft_lstadd_back": {
      "name": "ft_lstadd_back",
      "category": "data_structures",
      "category_path": "data_structures/lists",
      "tags": [
        "iteration",
        "basic"
      ],
      "prototype": "ft_lstadd_back(t_list **lst, t_list *new)",
      "description": "#include \"TDD/test.h\"",
      "parameters": [],
      "return_value": "Return value description not available.",
      "examples": [
        {
          "title": "Basic usage of ft_lstadd_back",
          "code": "// Example usage of ft_lstadd_back\n// TODO: Add real example",
          "output": null
        }
      ],
      "complexity": null,
      "notes": [],
      "see_also": [],
      "updated_at": null,
      "author_role": null,
      "related": [],
      "manual_path": null,
      "manual_html": null
    },
    "ft_lcm": {
      "name": "ft_lcm",
      "category": "math",
      "category_path": "math/algebra",
      "tags": [
        "basic"
      ],
      "prototype": "int\t\t\tft_lcm(int x, int y)",
      "description": "Define M_PI if not already defined",
      "parameters": [],
      "return_value": "Return value description not available.",
      "examples": [
        {
          "title": "Basic usage of ft_lcm",
          "code": "// Example usage of ft_lcm\n// TODO: Add real example",
          "output": null
        }
      ],
      "complexity": null,
      "notes": [],
      "see_also": [],
      "updated_at": null,
      "author_role": null,
      "related": [],
      "manual_path": null,
      "manual_html": null
    },
    "ft_strrchr": {
      "name": "ft_strrchr",
      "category": "strings",
      "category_path": "strings",
      "tags": [
        "string",
        "iteration",
        "basic"
      ],
      "prototype": "ft_strrchr(const char *s, int c)",
      "description": "#include \"TDD/test.h\"",
      "parameters": [],
      "return_value": "Return value description not available.",
      "examples": [
        {
          "title": "Basic usage of ft_strrchr",
          "code": "// Example usage of ft_strrchr\n// TODO: Add real example",
          "output": null
        }
      ],
      "complexity": null,
      "notes": [],
      "see_also": [],
      "updated_at": null,
      "author_role": null,
      "related": [],
      "manual_path": null,
      "manual_html": null
    },
    "ft_add": {
      "name": "ft_add",
      "category": "math",
      "category_path": "math/algebra",
      "tags": [
        "basic"
      ],
      "prototype": "int\t\t\tft_add(int x, int y)",
      "description": "Define M_PI if not already defined",
      "parameters": [],
      "return_value": "Return value description not available.",
      "examples": [
        {
          "title": "Basic usage of ft_add",
          "code": "// Example usage of ft_add\n// TODO: Add real example",
          "output": null
        }
      ],
      "complexity": null,
      "notes": [],
      "see_also": [],
      "updated_at": null,
      "author_role": null,
      "related": [],
      "manual_path": null,
      "manual_html": null
    },
    "double": {
      "name": "double",
      "category": "stdio",
      "category_path": "stdio/ft_scanf/parse_format",
      "tags": [
        "basic"
      ],
      "prototype": "/* Function: double */",
      "description": "No description available.",
      "parameters": [],
      "return_value": "Return value description not available.",
      "examples": [
        {
          "title": "Basic usage of double",
          "code": "// Example usage of double\n// TODO: Add real example",
          "output": null
        }
      ],
      "complexity": null,
      "notes": [],
      "see_also": [],
      "updated_at": null,
      "author_role": null,
      "related": [],
      "manual_path": null,
      "manual_html": null
    },
    "ft_isupper": {
      "name": "ft_isupper",
      "category": "ctype",
      "category_path": "ctype",
      "tags": [
        "validation",
        "basic"
      ],
      "prototype": "int\tft_isupper(int c)",
      "description": "No description available.",
      "parameters": [],
      "return_value": "Return value description not available.",
      "examples": [
        {
          "title": "Basic usage of ft_isupper",
          "code": "// Example usage of ft_isupper\n// TODO: Add real example",
          "output": null
        }
      ],
      "complexity": null,
      "notes": [],
      "see_also": [],
      "updated_at": null,
      "author_role": null,
      "related": [],
      "manual_path": null,
      "manual_html": null
    },
    "vector_reserve": {
      "name": "vector_reserve",
      "category": "data_structures",
      "category_path": "data_structures/vector",
      "tags": [
        "basic"
      ],
      "prototype": "vector_reserve(t_vector *vector, size_t capacity)",
      "description": "No description available.",
      "parameters": [],
      "return_value": "Return value description not available.",
      "examples": [
        {
          "title": "Basic usage of vector_reserve",
          "code": "// Example usage of vector_reserve\n// TODO: Add real example",
          "output": null
        }
      ],
      "complexity": null,
      "notes": [],
      "see_also": [],
      "updated_at": null,
      "author_role": null,
      "related": [],
      "manual_path": null,
      "manual_html": null
    },
    "ft_merge_sort": {
      "name": "ft_merge_sort",
      "category": "sort",
      "category_path": "sort",
      "tags": [
        "basic"
      ],
      "prototype": "void\tft_merge_sort(int *arr, int l, int r)",
      "description": "Wrapper functions",
      "parameters": [],
      "return_value": "Return value description not available.",
      "examples": [
        {
          "title": "Basic usage of ft_merge_sort",
          "code": "// Example usage of ft_merge_sort\n// TODO: Add real example",
          "output": null
        }
      ],
      "complexity": null,
      "notes": [],
      "see_also": [],
      "updated_at": null,
      "author_role": null,
      "related": [],
      "manual_path": null,
      "manual_html": null
    },
    "ft_print_graph": {
      "name": "ft_print_graph",
      "category": "render",
      "category_path": "render",
      "tags": [
        "basic"
      ],
      "prototype": "void\tft_print_graph(int *values, int count, int max_height)",
      "description": "No description available.",
      "parameters": [],
      "return_value": "Return value description not available.",
      "examples": [
        {
          "title": "Basic usage of ft_print_graph",
          "code": "// Example usage of ft_print_graph\n// TODO: Add real example",
          "output": null
        }
      ],
      "complexity": null,
      "notes": [],
      "see_also": [],
      "updated_at": null,
      "author_role": null,
      "related": [],
      "manual_path": null,
      "manual_html": null
    },
    "dll_insert_remove": {
      "name": "dll_insert_remove",
      "category": "data_structures",
      "category_path": "data_structures/doubly_linked_list",
      "tags": [
        "allocation",
        "cleanup",
        "iteration",
        "intermediate"
      ],
      "prototype": "/* Function: dll_insert_remove */",
      "description": "No description available.",
      "parameters": [],
      "return_value": "Return value description not available.",
      "examples": [
        {
          "title": "Basic usage of dll_insert_remove",
          "code": "// Example usage of dll_insert_remove\n// TODO: Add real example",
          "output": null
        }
      ],
      "complexity": null,
      "notes": [],
      "see_also": [],
      "updated_at": null,
      "author_role": null,
      "related": [],
      "manual_path": null,
      "manual_html": null
    },
    "ft_vfscanf_fd": {
      "name": "ft_vfscanf_fd",
      "category": "stdio",
      "category_path": "stdio/ft_scanf",
      "tags": [
        "input",
        "iteration",
        "basic"
      ],
      "prototype": "int         ft_vfscanf_fd(int fd, const char *format, va_list args)",
      "description": "No description available.",
      "parameters": [],
      "return_value": "Return value description not available.",
      "examples": [
        {
          "title": "Basic usage of ft_vfscanf_fd",
          "code": "// Example usage of ft_vfscanf_fd\n// TODO: Add real example",
          "output": null
        }
      ],
      "complexity": null,
      "notes": [],
      "see_also": [],
      "updated_at": null,
      "author_role": null,
      "related": [],
      "manual_path": null,
      "manual_html": null
    },
    "vector_clear": {
      "name": "vector_clear",
      "category": "data_structures",
      "category_path": "data_structures/vector",
      "tags": [
        "iteration",
        "basic"
      ],
      "prototype": "vector_clear(t_vector *vector)",
      "description": "No description available.",
      "parameters": [],
      "return_value": "Return value description not available.",
      "examples": [
        {
          "title": "Basic usage of vector_clear",
          "code": "// Example usage of vector_clear\n// TODO: Add real example",
          "output": null
        }
      ],
      "complexity": null,
      "notes": [],
      "see_also": [],
      "updated_at": null,
      "author_role": null,
      "related": [],
      "manual_path": null,
      "manual_html": null
    },
    "ft_abs": {
      "name": "ft_abs",
      "category": "math",
      "category_path": "math/algebra",
      "tags": [
        "basic"
      ],
      "prototype": "int\t\t\tft_abs(int x)",
      "description": "Define M_PI if not already defined",
      "parameters": [],
      "return_value": "Return value description not available.",
      "examples": [
        {
          "title": "Basic usage of ft_abs",
          "code": "// Example usage of ft_abs\n// TODO: Add real example",
          "output": null
        }
      ],
      "complexity": null,
      "notes": [],
      "see_also": [],
      "updated_at": null,
      "author_role": null,
      "related": [],
      "manual_path": null,
      "manual_html": null
    },
    "get_raw_color": {
      "name": "get_raw_color",
      "category": "math",
      "category_path": "math/algebra",
      "tags": [
        "basic"
      ],
      "prototype": "/* Function: get_raw_color */",
      "description": "No description available.",
      "parameters": [],
      "return_value": "Return value description not available.",
      "examples": [
        {
          "title": "Basic usage of get_raw_color",
          "code": "// Example usage of get_raw_color\n// TODO: Add real example",
          "output": null
        }
      ],
      "complexity": null,
      "notes": [],
      "see_also": [],
      "updated_at": null,
      "author_role": null,
      "related": [],
      "manual_path": null,
      "manual_html": null
    },
    "ft_lstclear": {
      "name": "ft_lstclear",
      "category": "data_structures",
      "category_path": "data_structures/lists",
      "tags": [
        "cleanup",
        "iteration",
        "basic"
      ],
      "prototype": "ft_lstclear(t_list **lst, void (*del)(void *))",
      "description": "#include \"TDD/test.h\"",
      "parameters": [],
      "return_value": "Return value description not available.",
      "examples": [
        {
          "title": "Basic usage of ft_lstclear",
          "code": "// Example usage of ft_lstclear\n// TODO: Add real example",
          "output": null
        }
      ],
      "complexity": null,
      "notes": [],
      "see_also": [],
      "updated_at": null,
      "author_role": null,
      "related": [],
      "manual_path": null,
      "manual_html": null
    },
    "mapinfo": {
      "name": "mapinfo",
      "category": "classes",
      "category_path": "classes/render/interface",
      "tags": [
        "basic"
      ],
      "prototype": "mapinfo(t_meta *meta)",
      "description": "// MAP INFO ////\");",
      "parameters": [],
      "return_value": "Return value description not available.",
      "examples": [
        {
          "title": "Basic usage of mapinfo",
          "code": "// Example usage of mapinfo\n// TODO: Add real example",
          "output": null
        }
      ],
      "complexity": null,
      "notes": [],
      "see_also": [],
      "updated_at": null,
      "author_role": null,
      "related": [],
      "manual_path": null,
      "manual_html": null
    },
    "ft_dll_destroy": {
      "name": "ft_dll_destroy",
      "category": "data_structures",
      "category_path": "data_structures/doubly_linked_list",
      "tags": [
        "basic"
      ],
      "prototype": "void\t\t\tft_dll_destroy(t_doubly_list *list)",
      "description": "Core functions",
      "parameters": [],
      "return_value": "Return value description not available.",
      "examples": [
        {
          "title": "Basic usage of ft_dll_destroy",
          "code": "// Example usage of ft_dll_destroy\n// TODO: Add real example",
          "output": null
        }
      ],
      "complexity": null,
      "notes": [],
      "see_also": [],
      "updated_at": null,
      "author_role": null,
      "related": [],
      "manual_path": null,
      "manual_html": null
    },
    "parser_hash_flag": {
      "name": "parser_hash_flag",
      "category": "stdio",
      "category_path": "stdio/ft_printf/src",
      "tags": [
        "basic"
      ],
      "prototype": "/* Function: parser_hash_flag */",
      "description": "No description available.",
      "parameters": [],
      "return_value": "Return value description not available.",
      "examples": [
        {
          "title": "Basic usage of parser_hash_flag",
          "code": "// Example usage of parser_hash_flag\n// TODO: Add real example",
          "output": null
        }
      ],
      "complexity": null,
      "notes": [],
      "see_also": [],
      "updated_at": null,
      "author_role": null,
      "related": [],
      "manual_path": null,
      "manual_html": null
    },
    "get_color": {
      "name": "get_color",
      "category": "math",
      "category_path": "math/geometry/draw",
      "tags": [
        "basic"
      ],
      "prototype": "/* Function: get_color */",
      "description": "No description available.",
      "parameters": [],
      "return_value": "Return value description not available.",
      "examples": [
        {
          "title": "Basic usage of get_color",
          "code": "// Example usage of get_color\n// TODO: Add real example",
          "output": null
        }
      ],
      "complexity": null,
      "notes": [],
      "see_also": [],
      "updated_at": null,
      "author_role": null,
      "related": [],
      "manual_path": null,
      "manual_html": null
    },
    "ft_bzero": {
      "name": "ft_bzero",
      "category": "memory",
      "category_path": "memory",
      "tags": [
        "allocation",
        "cleanup",
        "iteration",
        "intermediate"
      ],
      "prototype": "void\tft_bzero(void *s, size_t n)\n{\n\tft_memset(s, 0, n)",
      "description": "void prepare_network_packet(char *buffer, size_t size)",
      "parameters": [],
      "return_value": "Return value description not available.",
      "examples": [
        {
          "title": "Basic usage of ft_bzero",
          "code": "// Example usage of ft_bzero\n// TODO: Add real example",
          "output": null
        }
      ],
      "complexity": null,
      "notes": [],
      "see_also": [],
      "updated_at": null,
      "author_role": null,
      "related": [],
      "manual_path": null,
      "manual_html": null
    },
    "chunk_sort_helpers": {
      "name": "chunk_sort_helpers",
      "category": "sort",
      "category_path": "sort",
      "tags": [
        "cleanup",
        "iteration",
        "basic"
      ],
      "prototype": "/* Function: chunk_sort_helpers */",
      "description": "No description available.",
      "parameters": [],
      "return_value": "Return value description not available.",
      "examples": [
        {
          "title": "Basic usage of chunk_sort_helpers",
          "code": "// Example usage of chunk_sort_helpers\n// TODO: Add real example",
          "output": null
        }
      ],
      "complexity": null,
      "notes": [],
      "see_also": [],
      "updated_at": null,
      "author_role": null,
      "related": [],
      "manual_path": null,
      "manual_html": null
    },
    "ft_strtok": {
      "name": "ft_strtok",
      "category": "strings",
      "category_path": "strings",
      "tags": [
        "string",
        "iteration",
        "basic"
      ],
      "prototype": "ft_strtok(char *str, const char *delim)",
      "description": "No description available.",
      "parameters": [],
      "return_value": "Return value description not available.",
      "examples": [
        {
          "title": "Basic usage of ft_strtok",
          "code": "// Example usage of ft_strtok\n// TODO: Add real example",
          "output": null
        }
      ],
      "complexity": null,
      "notes": [],
      "see_also": [],
      "updated_at": null,
      "author_role": null,
      "related": [],
      "manual_path": null,
      "manual_html": null
    },
    "cl_pop": {
      "name": "cl_pop",
      "category": "data_structures",
      "category_path": "data_structures/circular_linked_list",
      "tags": [
        "cleanup",
        "iteration",
        "basic"
      ],
      "prototype": "/* Function: cl_pop */",
      "description": "No description available.",
      "parameters": [],
      "return_value": "Return value description not available.",
      "examples": [
        {
          "title": "Basic usage of cl_pop",
          "code": "// Example usage of cl_pop\n// TODO: Add real example",
          "output": null
        }
      ],
      "complexity": null,
      "notes": [],
      "see_also": [],
      "updated_at": null,
      "author_role": null,
      "related": [],
      "manual_path": null,
      "manual_html": null
    },
    "camera": {
      "name": "camera",
      "category": "classes",
      "category_path": "classes/render/camera",
      "tags": [
        "allocation",
        "cleanup",
        "intermediate"
      ],
      "prototype": "/* Function: camera */",
      "description": "No description available.",
      "parameters": [],
      "return_value": "Return value description not available.",
      "examples": [
        {
          "title": "Basic usage of camera",
          "code": "// Example usage of camera\n// TODO: Add real example",
          "output": null
        }
      ],
      "complexity": null,
      "notes": [],
      "see_also": [],
      "updated_at": null,
      "author_role": null,
      "related": [],
      "manual_path": null,
      "manual_html": null
    },
    "ft_putnbr_base": {
      "name": "ft_putnbr_base",
      "category": "stdio",
      "category_path": "stdio",
      "tags": [
        "iteration",
        "basic"
      ],
      "prototype": "* void ft_putnbr_base(int nbr, char *base)",
      "description": "//int main(void)",
      "parameters": [],
      "return_value": "Return value description not available.",
      "examples": [
        {
          "title": "Basic usage of ft_putnbr_base",
          "code": "// Example usage of ft_putnbr_base\n// TODO: Add real example",
          "output": null
        }
      ],
      "complexity": null,
      "notes": [],
      "see_also": [],
      "updated_at": null,
      "author_role": null,
      "related": [],
      "manual_path": null,
      "manual_html": null
    },
    "queue_destroy": {
      "name": "queue_destroy",
      "category": "data_structures",
      "category_path": "data_structures/queue",
      "tags": [
        "cleanup",
        "basic"
      ],
      "prototype": "queue_destroy(t_queue *queue)",
      "description": "No description available.",
      "parameters": [],
      "return_value": "Return value description not available.",
      "examples": [
        {
          "title": "Basic usage of queue_destroy",
          "code": "// Example usage of queue_destroy\n// TODO: Add real example",
          "output": null
        }
      ],
      "complexity": null,
      "notes": [],
      "see_also": [],
      "updated_at": null,
      "author_role": null,
      "related": [],
      "manual_path": null,
      "manual_html": null
    },
    "slab_free": {
      "name": "slab_free",
      "category": "stdlib",
      "category_path": "stdlib/slab",
      "tags": [
        "cleanup",
        "iteration",
        "basic"
      ],
      "prototype": "slab_free(t_slab_allocator *slab, void *ptr)",
      "description": "No description available.",
      "parameters": [],
      "return_value": "Return value description not available.",
      "examples": [
        {
          "title": "Basic usage of slab_free",
          "code": "// Example usage of slab_free\n// TODO: Add real example",
          "output": null
        }
      ],
      "complexity": null,
      "notes": [],
      "see_also": [],
      "updated_at": null,
      "author_role": null,
      "related": [],
      "manual_path": null,
      "manual_html": null
    },
    "queue_print": {
      "name": "queue_print",
      "category": "data_structures",
      "category_path": "data_structures/queue",
      "tags": [
        "iteration",
        "basic"
      ],
      "prototype": "/* Function: queue_print */",
      "description": "No description available.",
      "parameters": [],
      "return_value": "Return value description not available.",
      "examples": [
        {
          "title": "Basic usage of queue_print",
          "code": "// Example usage of queue_print\n// TODO: Add real example",
          "output": null
        }
      ],
      "complexity": null,
      "notes": [],
      "see_also": [],
      "updated_at": null,
      "author_role": null,
      "related": [],
      "manual_path": null,
      "manual_html": null
    },
    "ft_vector_print_addresses": {
      "name": "ft_vector_print_addresses",
      "category": "data_structures",
      "category_path": "data_structures/vector",
      "tags": [
        "basic"
      ],
      "prototype": "void\t\tft_vector_print_addresses(t_vector *vector)",
      "description": "Utility functions",
      "parameters": [],
      "return_value": "Return value description not available.",
      "examples": [
        {
          "title": "Basic usage of ft_vector_print_addresses",
          "code": "// Example usage of ft_vector_print_addresses\n// TODO: Add real example",
          "output": null
        }
      ],
      "complexity": null,
      "notes": [],
      "see_also": [],
      "updated_at": null,
      "author_role": null,
      "related": [],
      "manual_path": null,
      "manual_html": null
    },
    "vector_binary_search": {
      "name": "vector_binary_search",
      "category": "data_structures",
      "category_path": "data_structures/vector",
      "tags": [
        "iteration",
        "basic"
      ],
      "prototype": "vector_binary_search(t_vector *vec, void *target,\n\t\tint (*cmp)(const void *, const void *))",
      "description": "No description available.",
      "parameters": [],
      "return_value": "Return value description not available.",
      "examples": [
        {
          "title": "Basic usage of vector_binary_search",
          "code": "// Example usage of vector_binary_search\n// TODO: Add real example",
          "output": null
        }
      ],
      "complexity": null,
      "notes": [],
      "see_also": [],
      "updated_at": null,
      "author_role": null,
      "related": [],
      "manual_path": null,
      "manual_html": null
    },
    "slab_alloc": {
      "name": "slab_alloc",
      "category": "stdlib",
      "category_path": "stdlib/slab",
      "tags": [
        "allocation",
        "cleanup",
        "iteration",
        "intermediate"
      ],
      "prototype": "slab_alloc(t_slab_allocator *slab, size_t size)",
      "description": "No description available.",
      "parameters": [],
      "return_value": "Return value description not available.",
      "examples": [
        {
          "title": "Basic usage of slab_alloc",
          "code": "// Example usage of slab_alloc\n// TODO: Add real example",
          "output": null
        }
      ],
      "complexity": null,
      "notes": [],
      "see_also": [],
      "updated_at": null,
      "author_role": null,
      "related": [],
      "manual_path": null,
      "manual_html": null
    },
    "dll_print": {
      "name": "dll_print",
      "category": "data_structures",
      "category_path": "data_structures/doubly_linked_list",
      "tags": [
        "iteration",
        "basic"
      ],
      "prototype": "/* Function: dll_print */",
      "description": "No description available.",
      "parameters": [],
      "return_value": "Return value description not available.",
      "examples": [
        {
          "title": "Basic usage of dll_print",
          "code": "// Example usage of dll_print\n// TODO: Add real example",
          "output": null
        }
      ],
      "complexity": null,
      "notes": [],
      "see_also": [],
      "updated_at": null,
      "author_role": null,
      "related": [],
      "manual_path": null,
      "manual_html": null
    },
    "quat_normalize": {
      "name": "quat_normalize",
      "category": "math",
      "category_path": "math/geometry/quaternion",
      "tags": [
        "iteration",
        "basic"
      ],
      "prototype": "/* Function: quat_normalize */",
      "description": "No description available.",
      "parameters": [],
      "return_value": "Return value description not available.",
      "examples": [
        {
          "title": "Basic usage of quat_normalize",
          "code": "// Example usage of quat_normalize\n// TODO: Add real example",
          "output": null
        }
      ],
      "complexity": null,
      "notes": [],
      "see_also": [],
      "updated_at": null,
      "author_role": null,
      "related": [],
      "manual_path": null,
      "manual_html": null
    },
    "ft_isspace": {
      "name": "ft_isspace",
      "category": "ctype",
      "category_path": "ctype",
      "tags": [
        "validation",
        "basic"
      ],
      "prototype": "int\tft_isspace(int c)",
      "description": "No description available.",
      "parameters": [],
      "return_value": "Return value description not available.",
      "examples": [
        {
          "title": "Basic usage of ft_isspace",
          "code": "// Example usage of ft_isspace\n// TODO: Add real example",
          "output": null
        }
      ],
      "complexity": null,
      "notes": [],
      "see_also": [],
      "updated_at": null,
      "author_role": null,
      "related": [],
      "manual_path": null,
      "manual_html": null
    },
    "ft_islower": {
      "name": "ft_islower",
      "category": "ctype",
      "category_path": "ctype",
      "tags": [
        "validation",
        "iteration",
        "basic"
      ],
      "prototype": "int\tft_islower(int c)\n{\n\treturn ((unsigned)(c - 'a') < 26)",
      "description": "//#include <stdio.h>",
      "parameters": [],
      "return_value": "Return value description not available.",
      "examples": [
        {
          "title": "Basic usage of ft_islower",
          "code": "// Example usage of ft_islower\n// TODO: Add real example",
          "output": null
        }
      ],
      "complexity": null,
      "notes": [],
      "see_also": [],
      "updated_at": null,
      "author_role": null,
      "related": [],
      "manual_path": null,
      "manual_html": null
    },
    "ft_strmapi": {
      "name": "ft_strmapi",
      "category": "strings",
      "category_path": "strings",
      "tags": [
        "string",
        "allocation",
        "cleanup",
        "iteration",
        "intermediate"
      ],
      "prototype": "ft_strmapi(char const *s, char (*f)(unsigned int, char))",
      "description": "#include \"TDD/test.h\"",
      "parameters": [],
      "return_value": "Return value description not available.",
      "examples": [
        {
          "title": "Basic usage of ft_strmapi",
          "code": "// Example usage of ft_strmapi\n// TODO: Add real example",
          "output": null
        }
      ],
      "complexity": null,
      "notes": [],
      "see_also": [],
      "updated_at": null,
      "author_role": null,
      "related": [],
      "manual_path": null,
      "manual_html": null
    },
    "matrix_init": {
      "name": "matrix_init",
      "category": "classes",
      "category_path": "classes/render/camera",
      "tags": [
        "iteration",
        "basic"
      ],
      "prototype": "matrix_init(float (*matrix)[3])",
      "description": "No description available.",
      "parameters": [],
      "return_value": "Return value description not available.",
      "examples": [
        {
          "title": "Basic usage of matrix_init",
          "code": "// Example usage of matrix_init\n// TODO: Add real example",
          "output": null
        }
      ],
      "complexity": null,
      "notes": [],
      "see_also": [],
      "updated_at": null,
      "author_role": null,
      "related": [],
      "manual_path": null,
      "manual_html": null
    },
    "ft_advanced": {
      "name": "ft_advanced",
      "category": "render",
      "category_path": "render",
      "tags": [
        "basic"
      ],
      "prototype": "/* Function: ft_advanced */",
      "description": "No description available.",
      "parameters": [],
      "return_value": "Return value description not available.",
      "examples": [
        {
          "title": "Basic usage of ft_advanced",
          "code": "// Example usage of ft_advanced\n// TODO: Add real example",
          "output": null
        }
      ],
      "complexity": null,
      "notes": [],
      "see_also": [],
      "updated_at": null,
      "author_role": null,
      "related": [],
      "manual_path": null,
      "manual_html": null
    },
    "ft_tab_mult": {
      "name": "ft_tab_mult",
      "category": "math",
      "category_path": "math/algebra",
      "tags": [
        "basic"
      ],
      "prototype": "int\t\t\tft_tab_mult(int x)",
      "description": "Define M_PI if not already defined",
      "parameters": [],
      "return_value": "Return value description not available.",
      "examples": [
        {
          "title": "Basic usage of ft_tab_mult",
          "code": "// Example usage of ft_tab_mult\n// TODO: Add real example",
          "output": null
        }
      ],
      "complexity": null,
      "notes": [],
      "see_also": [],
      "updated_at": null,
      "author_role": null,
      "related": [],
      "manual_path": null,
      "manual_html": null
    },
    "gradient": {
      "name": "gradient",
      "category": "math",
      "category_path": "math/geometry/draw",
      "tags": [
        "iteration",
        "basic"
      ],
      "prototype": "gradient(int startcolor, int endcolor, int len, int pix)",
      "description": "No description available.",
      "parameters": [],
      "return_value": "Return value description not available.",
      "examples": [
        {
          "title": "Basic usage of gradient",
          "code": "// Example usage of gradient\n// TODO: Add real example",
          "output": null
        }
      ],
      "complexity": null,
      "notes": [],
      "see_also": [],
      "updated_at": null,
      "author_role": null,
      "related": [],
      "manual_path": null,
      "manual_html": null
    },
    "matric_from_quaternon": {
      "name": "matric_from_quaternon",
      "category": "math",
      "category_path": "math/geometry/matrices",
      "tags": [
        "basic"
      ],
      "prototype": "/* Function: matric_from_quaternon */",
      "description": "No description available.",
      "parameters": [],
      "return_value": "Return value description not available.",
      "examples": [
        {
          "title": "Basic usage of matric_from_quaternon",
          "code": "// Example usage of matric_from_quaternon\n// TODO: Add real example",
          "output": null
        }
      ],
      "complexity": null,
      "notes": [],
      "see_also": [],
      "updated_at": null,
      "author_role": null,
      "related": [],
      "manual_path": null,
      "manual_html": null
    },
    "general_err_handler": {
      "name": "general_err_handler",
      "category": "classes",
      "category_path": "classes/trace/error",
      "tags": [
        "allocation",
        "cleanup",
        "iteration",
        "intermediate"
      ],
      "prototype": "/* Function: general_err_handler */",
      "description": "No description available.",
      "parameters": [],
      "return_value": "Return value description not available.",
      "examples": [
        {
          "title": "Basic usage of general_err_handler",
          "code": "// Example usage of general_err_handler\n// TODO: Add real example",
          "output": null
        }
      ],
      "complexity": null,
      "notes": [],
      "see_also": [],
      "updated_at": null,
      "author_role": null,
      "related": [],
      "manual_path": null,
      "manual_html": null
    },
    "ft_print_banner": {
      "name": "ft_print_banner",
      "category": "render",
      "category_path": "render",
      "tags": [
        "basic"
      ],
      "prototype": "void\tft_print_banner(const char *title, const char *subtitle,\n\t\t\tt_banner_style style)",
      "description": "No description available.",
      "parameters": [],
      "return_value": "Return value description not available.",
      "examples": [
        {
          "title": "Basic usage of ft_print_banner",
          "code": "// Example usage of ft_print_banner\n// TODO: Add real example",
          "output": null
        }
      ],
      "complexity": null,
      "notes": [],
      "see_also": [],
      "updated_at": null,
      "author_role": null,
      "related": [],
      "manual_path": null,
      "manual_html": null
    },
    "deleteAtPosition": {
      "name": "deleteAtPosition",
      "category": "data_structures",
      "category_path": "data_structures/lists",
      "tags": [
        "cleanup",
        "iteration",
        "basic"
      ],
      "prototype": "/* Function: deleteAtPosition */",
      "description": "No description available.",
      "parameters": [],
      "return_value": "Return value description not available.",
      "examples": [
        {
          "title": "Basic usage of deleteAtPosition",
          "code": "// Example usage of deleteAtPosition\n// TODO: Add real example",
          "output": null
        }
      ],
      "complexity": null,
      "notes": [],
      "see_also": [],
      "updated_at": null,
      "author_role": null,
      "related": [],
      "manual_path": null,
      "manual_html": null
    },
    "ft_memcpy": {
      "name": "ft_memcpy",
      "category": "memory",
      "category_path": "memory",
      "tags": [
        "memory",
        "allocation",
        "iteration",
        "intermediate"
      ],
      "prototype": "ft_memcpy(void *dest, const void *src, size_t n)",
      "description": "#include \"TDD/test.h\"",
      "parameters": [],
      "return_value": "Return value description not available.",
      "examples": [
        {
          "title": "Basic usage of ft_memcpy",
          "code": "// Example usage of ft_memcpy\n// TODO: Add real example",
          "output": null
        }
      ],
      "complexity": null,
      "notes": [],
      "see_also": [],
      "updated_at": null,
      "author_role": null,
      "related": [],
      "manual_path": null,
      "manual_html": null
    },
    "radix_sort": {
      "name": "radix_sort",
      "category": "sort",
      "category_path": "sort",
      "tags": [
        "allocation",
        "cleanup",
        "iteration",
        "intermediate"
      ],
      "prototype": "radix_sort(int *arr, int size, int max_bits)",
      "description": "void\tprint_array(int *arr, int size)",
      "parameters": [],
      "return_value": "Return value description not available.",
      "examples": [
        {
          "title": "Basic usage of radix_sort",
          "code": "// Example usage of radix_sort\n// TODO: Add real example",
          "output": null
        }
      ],
      "complexity": null,
      "notes": [],
      "see_also": [],
      "updated_at": null,
      "author_role": null,
      "related": [],
      "manual_path": null,
      "manual_html": null
    },
    "cl_search": {
      "name": "cl_search",
      "category": "data_structures",
      "category_path": "data_structures/circular_linked_list",
      "tags": [
        "iteration",
        "basic"
      ],
      "prototype": "/* Function: cl_search */",
      "description": "No description available.",
      "parameters": [],
      "return_value": "Return value description not available.",
      "examples": [
        {
          "title": "Basic usage of cl_search",
          "code": "// Example usage of cl_search\n// TODO: Add real example",
          "output": null
        }
      ],
      "complexity": null,
      "notes": [],
      "see_also": [],
      "updated_at": null,
      "author_role": null,
      "related": [],
      "manual_path": null,
      "manual_html": null
    },
    "main_bak": {
      "name": "main_bak",
      "category": "stdio",
      "category_path": "stdio/ft_scanf",
      "tags": [
        "iteration",
        "basic"
      ],
      "prototype": "/* Function: main_bak */",
      "description": "int main(void)",
      "parameters": [],
      "return_value": "Return value description not available.",
      "examples": [
        {
          "title": "Basic usage of main_bak",
          "code": "// Example usage of main_bak\n// TODO: Add real example",
          "output": null
        }
      ],
      "complexity": null,
      "notes": [],
      "see_also": [],
      "updated_at": null,
      "author_role": null,
      "related": [],
      "manual_path": null,
      "manual_html": null
    },
    "ft_cl_contains": {
      "name": "ft_cl_contains",
      "category": "data_structures",
      "category_path": "data_structures/circular_linked_list",
      "tags": [
        "iteration",
        "basic"
      ],
      "prototype": "bool\t\t\tft_cl_contains(t_circular_list *list, void *data)",
      "description": "Points to last node (last->next is first)",
      "parameters": [],
      "return_value": "Return value description not available.",
      "examples": [
        {
          "title": "Basic usage of ft_cl_contains",
          "code": "// Example usage of ft_cl_contains\n// TODO: Add real example",
          "output": null
        }
      ],
      "complexity": null,
      "notes": [],
      "see_also": [],
      "updated_at": null,
      "author_role": null,
      "related": [],
      "manual_path": null,
      "manual_html": null
    },
    "ft_snprintf": {
      "name": "ft_snprintf",
      "category": "stdio",
      "category_path": "stdio",
      "tags": [
        "output",
        "iteration",
        "basic"
      ],
      "prototype": "int     ft_snprintf(char *dst, size_t cap, const char *format, ...)",
      "description": "No description available.",
      "parameters": [],
      "return_value": "Return value description not available.",
      "examples": [
        {
          "title": "Basic usage of ft_snprintf",
          "code": "// Example usage of ft_snprintf\n// TODO: Add real example",
          "output": null
        }
      ],
      "complexity": null,
      "notes": [],
      "see_also": [],
      "updated_at": null,
      "author_role": null,
      "related": [],
      "manual_path": null,
      "manual_html": null
    },
    "trackball_rotate": {
      "name": "trackball_rotate",
      "category": "math",
      "category_path": "math/geometry/quaternion",
      "tags": [
        "basic"
      ],
      "prototype": "trackball_rotate(float q[4], t_fpoint2 p1, t_fpoint2 p2)",
      "description": "No description available.",
      "parameters": [],
      "return_value": "Return value description not available.",
      "examples": [
        {
          "title": "Basic usage of trackball_rotate",
          "code": "// Example usage of trackball_rotate\n// TODO: Add real example",
          "output": null
        }
      ],
      "complexity": null,
      "notes": [],
      "see_also": [],
      "updated_at": null,
      "author_role": null,
      "related": [],
      "manual_path": null,
      "manual_html": null
    },
    "matrix_vec_multiply": {
      "name": "matrix_vec_multiply",
      "category": "math",
      "category_path": "math/geometry/matrices",
      "tags": [
        "iteration",
        "basic"
      ],
      "prototype": "** Usage: matrix_vec_multiply(&out, &mat, &vec)",
      "description": "No description available.",
      "parameters": [],
      "return_value": "Return value description not available.",
      "examples": [
        {
          "title": "Basic usage of matrix_vec_multiply",
          "code": "// Example usage of matrix_vec_multiply\n// TODO: Add real example",
          "output": null
        }
      ],
      "complexity": null,
      "notes": [],
      "see_also": [],
      "updated_at": null,
      "author_role": null,
      "related": [],
      "manual_path": null,
      "manual_html": null
    },
    "parser": {
      "name": "parser",
      "category": "stdio",
      "category_path": "stdio/ft_printf/src",
      "tags": [
        "iteration",
        "basic"
      ],
      "prototype": "/* Function: parser */",
      "description": "No description available.",
      "parameters": [],
      "return_value": "Return value description not available.",
      "examples": [
        {
          "title": "Basic usage of parser",
          "code": "// Example usage of parser\n// TODO: Add real example",
          "output": null
        }
      ],
      "complexity": null,
      "notes": [],
      "see_also": [],
      "updated_at": null,
      "author_role": null,
      "related": [],
      "manual_path": null,
      "manual_html": null
    },
    "ft_strcmp": {
      "name": "ft_strcmp",
      "category": "strings",
      "category_path": "strings",
      "tags": [
        "string",
        "iteration",
        "basic"
      ],
      "prototype": "ft_strcmp(const char *s1, const char *s2)",
      "description": "No description available.",
      "parameters": [],
      "return_value": "Return value description not available.",
      "examples": [
        {
          "title": "Basic usage of ft_strcmp",
          "code": "// Example usage of ft_strcmp\n// TODO: Add real example",
          "output": null
        }
      ],
      "complexity": null,
      "notes": [],
      "see_also": [],
      "updated_at": null,
      "author_role": null,
      "related": [],
      "manual_path": null,
      "manual_html": null
    },
    "ft_cl_remove_data": {
      "name": "ft_cl_remove_data",
      "category": "data_structures",
      "category_path": "data_structures/circular_linked_list",
      "tags": [
        "iteration",
        "basic"
      ],
      "prototype": "bool\t\t\tft_cl_remove_data(t_circular_list *list, void *data)",
      "description": "Points to last node (last->next is first)",
      "parameters": [],
      "return_value": "Return value description not available.",
      "examples": [
        {
          "title": "Basic usage of ft_cl_remove_data",
          "code": "// Example usage of ft_cl_remove_data\n// TODO: Add real example",
          "output": null
        }
      ],
      "complexity": null,
      "notes": [],
      "see_also": [],
      "updated_at": null,
      "author_role": null,
      "related": [],
      "manual_path": null,
      "manual_html": null
    },
    "ft_fmaxf": {
      "name": "ft_fmaxf",
      "category": "math",
      "category_path": "math/algebra",
      "tags": [
        "basic"
      ],
      "prototype": "float\t\tft_fmaxf(float a, float b)",
      "description": "Define M_PI if not already defined",
      "parameters": [],
      "return_value": "Return value description not available.",
      "examples": [
        {
          "title": "Basic usage of ft_fmaxf",
          "code": "// Example usage of ft_fmaxf\n// TODO: Add real example",
          "output": null
        }
      ],
      "complexity": null,
      "notes": [],
      "see_also": [],
      "updated_at": null,
      "author_role": null,
      "related": [],
      "manual_path": null,
      "manual_html": null
    },
    "get_next_line_utils": {
      "name": "get_next_line_utils",
      "category": "stdio",
      "category_path": "stdio/gnl",
      "tags": [
        "allocation",
        "cleanup",
        "iteration",
        "intermediate"
      ],
      "prototype": "/* Function: get_next_line_utils */",
      "description": "No description available.",
      "parameters": [],
      "return_value": "Return value description not available.",
      "examples": [
        {
          "title": "Basic usage of get_next_line_utils",
          "code": "// Example usage of get_next_line_utils\n// TODO: Add real example",
          "output": null
        }
      ],
      "complexity": null,
      "notes": [],
      "see_also": [],
      "updated_at": null,
      "author_role": null,
      "related": [],
      "manual_path": null,
      "manual_html": null
    },
    "colors": {
      "name": "colors",
      "category": "math",
      "category_path": "math/geometry/draw",
      "tags": [
        "basic"
      ],
      "prototype": "/* Function: colors */",
      "description": "No description available.",
      "parameters": [],
      "return_value": "Return value description not available.",
      "examples": [
        {
          "title": "Basic usage of colors",
          "code": "// Example usage of colors\n// TODO: Add real example",
          "output": null
        }
      ],
      "complexity": null,
      "notes": [],
      "see_also": [],
      "updated_at": null,
      "author_role": null,
      "related": [],
      "manual_path": null,
      "manual_html": null
    },
    "mini_push_swap": {
      "name": "mini_push_swap",
      "category": "sort",
      "category_path": "sort",
      "tags": [
        "allocation",
        "cleanup",
        "iteration",
        "intermediate"
      ],
      "prototype": "/* Function: mini_push_swap */",
      "description": "No description available.",
      "parameters": [],
      "return_value": "Return value description not available.",
      "examples": [
        {
          "title": "Basic usage of mini_push_swap",
          "code": "// Example usage of mini_push_swap\n// TODO: Add real example",
          "output": null
        }
      ],
      "complexity": null,
      "notes": [],
      "see_also": [],
      "updated_at": null,
      "author_role": null,
      "related": [],
      "manual_path": null,
      "manual_html": null
    },
    "3-way-merge_sort": {
      "name": "3-way-merge_sort",
      "category": "sort",
      "category_path": "sort",
      "tags": [
        "allocation",
        "cleanup",
        "intermediate"
      ],
      "prototype": "/* Function: 3-way-merge_sort */",
      "description": "No description available.",
      "parameters": [],
      "return_value": "Return value description not available.",
      "examples": [
        {
          "title": "Basic usage of 3-way-merge_sort",
          "code": "// Example usage of 3-way-merge_sort\n// TODO: Add real example",
          "output": null
        }
      ],
      "complexity": null,
      "notes": [],
      "see_also": [],
      "updated_at": null,
      "author_role": null,
      "related": [],
      "manual_path": null,
      "manual_html": null
    },
    "vlength": {
      "name": "vlength",
      "category": "math",
      "category_path": "math/geometry/quaternion",
      "tags": [
        "basic"
      ],
      "prototype": "float\tvlength(const float *v)\n{\n\treturn (ft_sqrt(v[0] * v[0] + v[1] * v[1] + v[2] * v[2]))",
      "description": "No description available.",
      "parameters": [],
      "return_value": "Return value description not available.",
      "examples": [
        {
          "title": "Basic usage of vlength",
          "code": "// Example usage of vlength\n// TODO: Add real example",
          "output": null
        }
      ],
      "complexity": null,
      "notes": [],
      "see_also": [],
      "updated_at": null,
      "author_role": null,
      "related": [],
      "manual_path": null,
      "manual_html": null
    },
    "ft_print_ascii": {
      "name": "ft_print_ascii",
      "category": "memory",
      "category_path": "memory",
      "tags": [
        "allocation",
        "intermediate"
      ],
      "prototype": "void\tft_print_ascii(unsigned char *p, unsigned int size)",
      "description": "No description available.",
      "parameters": [],
      "return_value": "Return value description not available.",
      "examples": [
        {
          "title": "Basic usage of ft_print_ascii",
          "code": "// Example usage of ft_print_ascii\n// TODO: Add real example",
          "output": null
        }
      ],
      "complexity": null,
      "notes": [],
      "see_also": [],
      "updated_at": null,
      "author_role": null,
      "related": [],
      "manual_path": null,
      "manual_html": null
    },
    "ft_fprintf": {
      "name": "ft_fprintf",
      "category": "stdio",
      "category_path": "stdio",
      "tags": [
        "output",
        "iteration",
        "basic"
      ],
      "prototype": "int\t\tft_fprintf(int fd, const char *format, ...)",
      "description": "No description available.",
      "parameters": [],
      "return_value": "Return value description not available.",
      "examples": [
        {
          "title": "Basic usage of ft_fprintf",
          "code": "// Example usage of ft_fprintf\n// TODO: Add real example",
          "output": null
        }
      ],
      "complexity": null,
      "notes": [],
      "see_also": [],
      "updated_at": null,
      "author_role": null,
      "related": [],
      "manual_path": null,
      "manual_html": null
    },
    "ft_fscanf_sh": {
      "name": "ft_fscanf_sh",
      "category": "stdio",
      "category_path": "stdio/ft_scanf",
      "tags": [
        "input",
        "iteration",
        "basic"
      ],
      "prototype": "int         ft_fscanf_sh(const char *command, const char *format, ...)",
      "description": "No description available.",
      "parameters": [],
      "return_value": "Return value description not available.",
      "examples": [
        {
          "title": "Basic usage of ft_fscanf_sh",
          "code": "// Example usage of ft_fscanf_sh\n// TODO: Add real example",
          "output": null
        }
      ],
      "complexity": null,
      "notes": [],
      "see_also": [],
      "updated_at": null,
      "author_role": null,
      "related": [],
      "manual_path": null,
      "manual_html": null
    },
    "ft_print_boxed": {
      "name": "ft_print_boxed",
      "category": "render",
      "category_path": "render",
      "tags": [
        "basic"
      ],
      "prototype": "void\tft_print_boxed(const char *text)",
      "description": "No description available.",
      "parameters": [],
      "return_value": "Return value description not available.",
      "examples": [
        {
          "title": "Basic usage of ft_print_boxed",
          "code": "// Example usage of ft_print_boxed\n// TODO: Add real example",
          "output": null
        }
      ],
      "complexity": null,
      "notes": [],
      "see_also": [],
      "updated_at": null,
      "author_role": null,
      "related": [],
      "manual_path": null,
      "manual_html": null
    },
    "vsub": {
      "name": "vsub",
      "category": "math",
      "category_path": "math/geometry/quaternion",
      "tags": [
        "basic"
      ],
      "prototype": "vsub(const float *src1, const float *src2, float *dst)",
      "description": "No description available.",
      "parameters": [],
      "return_value": "Return value description not available.",
      "examples": [
        {
          "title": "Basic usage of vsub",
          "code": "// Example usage of vsub\n// TODO: Add real example",
          "output": null
        }
      ],
      "complexity": null,
      "notes": [],
      "see_also": [],
      "updated_at": null,
      "author_role": null,
      "related": [],
      "manual_path": null,
      "manual_html": null
    },
    "cycle_sort": {
      "name": "cycle_sort",
      "category": "sort",
      "category_path": "sort",
      "tags": [
        "iteration",
        "basic"
      ],
      "prototype": "cycle_sort(int *arr, int size)",
      "description": "int\tmain(void)",
      "parameters": [],
      "return_value": "Return value description not available.",
      "examples": [
        {
          "title": "Basic usage of cycle_sort",
          "code": "// Example usage of cycle_sort\n// TODO: Add real example",
          "output": null
        }
      ],
      "complexity": null,
      "notes": [],
      "see_also": [],
      "updated_at": null,
      "author_role": null,
      "related": [],
      "manual_path": null,
      "manual_html": null
    },
    "memory_tracker": {
      "name": "memory_tracker",
      "category": "memory",
      "category_path": "memory",
      "tags": [
        "allocation",
        "cleanup",
        "iteration",
        "intermediate"
      ],
      "prototype": "/* Function: memory_tracker */",
      "description": "Create: memory_tracker.c",
      "parameters": [],
      "return_value": "Return value description not available.",
      "examples": [
        {
          "title": "Basic usage of memory_tracker",
          "code": "// Example usage of memory_tracker\n// TODO: Add real example",
          "output": null
        }
      ],
      "complexity": null,
      "notes": [],
      "see_also": [],
      "updated_at": null,
      "author_role": null,
      "related": [],
      "manual_path": null,
      "manual_html": null
    },
    "ft_cl_insert": {
      "name": "ft_cl_insert",
      "category": "data_structures",
      "category_path": "data_structures/circular_linked_list",
      "tags": [
        "iteration",
        "basic"
      ],
      "prototype": "bool\t\t\tft_cl_insert(t_circular_list *list, size_t index, void *data)",
      "description": "Points to last node (last->next is first)",
      "parameters": [],
      "return_value": "Return value description not available.",
      "examples": [
        {
          "title": "Basic usage of ft_cl_insert",
          "code": "// Example usage of ft_cl_insert\n// TODO: Add real example",
          "output": null
        }
      ],
      "complexity": null,
      "notes": [],
      "see_also": [],
      "updated_at": null,
      "author_role": null,
      "related": [],
      "manual_path": null,
      "manual_html": null
    },
    "ft_cl_size": {
      "name": "ft_cl_size",
      "category": "data_structures",
      "category_path": "data_structures/circular_linked_list",
      "tags": [
        "iteration",
        "basic"
      ],
      "prototype": "size_t\t\t\tft_cl_size(t_circular_list *list)",
      "description": "Points to last node (last->next is first)",
      "parameters": [],
      "return_value": "Return value description not available.",
      "examples": [
        {
          "title": "Basic usage of ft_cl_size",
          "code": "// Example usage of ft_cl_size\n// TODO: Add real example",
          "output": null
        }
      ],
      "complexity": null,
      "notes": [],
      "see_also": [],
      "updated_at": null,
      "author_role": null,
      "related": [],
      "manual_path": null,
      "manual_html": null
    },
    "bitonic_sort": {
      "name": "bitonic_sort",
      "category": "sort",
      "category_path": "sort",
      "tags": [
        "allocation",
        "cleanup",
        "iteration",
        "intermediate"
      ],
      "prototype": "bitonic_sort(int *arr, int size)",
      "description": "No description available.",
      "parameters": [],
      "return_value": "Return value description not available.",
      "examples": [
        {
          "title": "Basic usage of bitonic_sort",
          "code": "// Example usage of bitonic_sort\n// TODO: Add real example",
          "output": null
        }
      ],
      "complexity": null,
      "notes": [],
      "see_also": [],
      "updated_at": null,
      "author_role": null,
      "related": [],
      "manual_path": null,
      "manual_html": null
    },
    "tree_sort": {
      "name": "tree_sort",
      "category": "sort",
      "category_path": "sort",
      "tags": [
        "allocation",
        "cleanup",
        "iteration",
        "intermediate"
      ],
      "prototype": "tree_sort(int *arr, int size)",
      "description": "int main(void)",
      "parameters": [],
      "return_value": "Return value description not available.",
      "examples": [
        {
          "title": "Basic usage of tree_sort",
          "code": "// Example usage of tree_sort\n// TODO: Add real example",
          "output": null
        }
      ],
      "complexity": null,
      "notes": [],
      "see_also": [],
      "updated_at": null,
      "author_role": null,
      "related": [],
      "manual_path": null,
      "manual_html": null
    },
    "ft_putchar_fd": {
      "name": "ft_putchar_fd",
      "category": "stdio",
      "category_path": "stdio",
      "tags": [
        "basic"
      ],
      "prototype": "void\tft_putchar_fd(char c, int fd)\n{\n\twrite(fd, &c, 1)",
      "description": "#include \"./TDD/test.h\"",
      "parameters": [],
      "return_value": "Return value description not available.",
      "examples": [
        {
          "title": "Basic usage of ft_putchar_fd",
          "code": "// Example usage of ft_putchar_fd\n// TODO: Add real example",
          "output": null
        }
      ],
      "complexity": null,
      "notes": [],
      "see_also": [],
      "updated_at": null,
      "author_role": null,
      "related": [],
      "manual_path": null,
      "manual_html": null
    },
    "pool_stats": {
      "name": "pool_stats",
      "category": "stdlib",
      "category_path": "stdlib/pool",
      "tags": [
        "cleanup",
        "basic"
      ],
      "prototype": "pool_stats(t_pool *pool)",
      "description": "No description available.",
      "parameters": [],
      "return_value": "Return value description not available.",
      "examples": [
        {
          "title": "Basic usage of pool_stats",
          "code": "// Example usage of pool_stats\n// TODO: Add real example",
          "output": null
        }
      ],
      "complexity": null,
      "notes": [],
      "see_also": [],
      "updated_at": null,
      "author_role": null,
      "related": [],
      "manual_path": null,
      "manual_html": null
    },
    "vector_insert": {
      "name": "vector_insert",
      "category": "data_structures",
      "category_path": "data_structures/vector",
      "tags": [
        "iteration",
        "basic"
      ],
      "prototype": "vector_insert(t_vector *vector, size_t index, void *element)",
      "description": "No description available.",
      "parameters": [],
      "return_value": "Return value description not available.",
      "examples": [
        {
          "title": "Basic usage of vector_insert",
          "code": "// Example usage of vector_insert\n// TODO: Add real example",
          "output": null
        }
      ],
      "complexity": null,
      "notes": [],
      "see_also": [],
      "updated_at": null,
      "author_role": null,
      "related": [],
      "manual_path": null,
      "manual_html": null
    },
    "heap_sort": {
      "name": "heap_sort",
      "category": "sort",
      "category_path": "sort",
      "tags": [
        "iteration",
        "basic"
      ],
      "prototype": "heap_sort(int *arr, int size)",
      "description": "int\tmain(void)",
      "parameters": [],
      "return_value": "Return value description not available.",
      "examples": [
        {
          "title": "Basic usage of heap_sort",
          "code": "// Example usage of heap_sort\n// TODO: Add real example",
          "output": null
        }
      ],
      "complexity": null,
      "notes": [],
      "see_also": [],
      "updated_at": null,
      "author_role": null,
      "related": [],
      "manual_path": null,
      "manual_html": null
    },
    "scale": {
      "name": "scale",
      "category": "math",
      "category_path": "math/geometry/view",
      "tags": [
        "basic"
      ],
      "prototype": "/* Function: scale */",
      "description": "No description available.",
      "parameters": [],
      "return_value": "Return value description not available.",
      "examples": [
        {
          "title": "Basic usage of scale",
          "code": "// Example usage of scale\n// TODO: Add real example",
          "output": null
        }
      ],
      "complexity": null,
      "notes": [],
      "see_also": [],
      "updated_at": null,
      "author_role": null,
      "related": [],
      "manual_path": null,
      "manual_html": null
    },
    "ft_realloc": {
      "name": "ft_realloc",
      "category": "stdlib",
      "category_path": "stdlib",
      "tags": [
        "allocation",
        "cleanup",
        "iteration",
        "intermediate"
      ],
      "prototype": "if (!ft_realloc(ptr, elem_size, *cap, new_cap))\n\t\treturn (false)",
      "description": "No description available.",
      "parameters": [],
      "return_value": "Return value description not available.",
      "examples": [
        {
          "title": "Basic usage of ft_realloc",
          "code": "// Example usage of ft_realloc\n// TODO: Add real example",
          "output": null
        }
      ],
      "complexity": null,
      "notes": [],
      "see_also": [],
      "updated_at": null,
      "author_role": null,
      "related": [],
      "manual_path": null,
      "manual_html": null
    },
    "slab_stats": {
      "name": "slab_stats",
      "category": "stdlib",
      "category_path": "stdlib/slab",
      "tags": [
        "cleanup",
        "iteration",
        "basic"
      ],
      "prototype": "slab_stats(t_slab_allocator *slab)",
      "description": "No description available.",
      "parameters": [],
      "return_value": "Return value description not available.",
      "examples": [
        {
          "title": "Basic usage of slab_stats",
          "code": "// Example usage of slab_stats\n// TODO: Add real example",
          "output": null
        }
      ],
      "complexity": null,
      "notes": [],
      "see_also": [],
      "updated_at": null,
      "author_role": null,
      "related": [],
      "manual_path": null,
      "manual_html": null
    },
    "ft_clear_screen": {
      "name": "ft_clear_screen",
      "category": "render",
      "category_path": "render",
      "tags": [
        "basic"
      ],
      "prototype": "void\tft_clear_screen(void)",
      "description": "No description available.",
      "parameters": [],
      "return_value": "Return value description not available.",
      "examples": [
        {
          "title": "Basic usage of ft_clear_screen",
          "code": "// Example usage of ft_clear_screen\n// TODO: Add real example",
          "output": null
        }
      ],
      "complexity": null,
      "notes": [],
      "see_also": [],
      "updated_at": null,
      "author_role": null,
      "related": [],
      "manual_path": null,
      "manual_html": null
    },
    "queue_dequeue": {
      "name": "queue_dequeue",
      "category": "data_structures",
      "category_path": "data_structures/queue",
      "tags": [
        "cleanup",
        "basic"
      ],
      "prototype": "queue_dequeue(t_queue *queue)",
      "description": "No description available.",
      "parameters": [],
      "return_value": "Return value description not available.",
      "examples": [
        {
          "title": "Basic usage of queue_dequeue",
          "code": "// Example usage of queue_dequeue\n// TODO: Add real example",
          "output": null
        }
      ],
      "complexity": null,
      "notes": [],
      "see_also": [],
      "updated_at": null,
      "author_role": null,
      "related": [],
      "manual_path": null,
      "manual_html": null
    },
    "ft_vector_insert": {
      "name": "ft_vector_insert",
      "category": "data_structures",
      "category_path": "data_structures/vector",
      "tags": [
        "basic"
      ],
      "prototype": "bool\t\tft_vector_insert(t_vector *vector, size_t index, void *element)",
      "description": "Utility functions",
      "parameters": [],
      "return_value": "Return value description not available.",
      "examples": [
        {
          "title": "Basic usage of ft_vector_insert",
          "code": "// Example usage of ft_vector_insert\n// TODO: Add real example",
          "output": null
        }
      ],
      "complexity": null,
      "notes": [],
      "see_also": [],
      "updated_at": null,
      "author_role": null,
      "related": [],
      "manual_path": null,
      "manual_html": null
    },
    "sleep_sort": {
      "name": "sleep_sort",
      "category": "sort",
      "category_path": "sort",
      "tags": [
        "allocation",
        "cleanup",
        "iteration",
        "intermediate"
      ],
      "prototype": "sleep_sort(int *arr, int size)",
      "description": "No description available.",
      "parameters": [],
      "return_value": "Return value description not available.",
      "examples": [
        {
          "title": "Basic usage of sleep_sort",
          "code": "// Example usage of sleep_sort\n// TODO: Add real example",
          "output": null
        }
      ],
      "complexity": null,
      "notes": [],
      "see_also": [],
      "updated_at": null,
      "author_role": null,
      "related": [],
      "manual_path": null,
      "manual_html": null
    },
    "vcross": {
      "name": "vcross",
      "category": "math",
      "category_path": "math/geometry/quaternion",
      "tags": [
        "basic"
      ],
      "prototype": "vcross(const float *v1, const float *v2, float *cross)",
      "description": "No description available.",
      "parameters": [],
      "return_value": "Return value description not available.",
      "examples": [
        {
          "title": "Basic usage of vcross",
          "code": "// Example usage of vcross\n// TODO: Add real example",
          "output": null
        }
      ],
      "complexity": null,
      "notes": [],
      "see_also": [],
      "updated_at": null,
      "author_role": null,
      "related": [],
      "manual_path": null,
      "manual_html": null
    },
    "ft_isxdigit": {
      "name": "ft_isxdigit",
      "category": "ctype",
      "category_path": "ctype",
      "tags": [
        "validation",
        "basic"
      ],
      "prototype": "int\tft_isxdigit(int c)\n{\n\treturn (ft_isdigit(c)\n\t\t|| ((unsigned)(c - 'a') < 6)\n\t\t|| ((unsigned)(c - 'A') < 6))",
      "description": "No description available.",
      "parameters": [],
      "return_value": "Return value description not available.",
      "examples": [
        {
          "title": "Basic usage of ft_isxdigit",
          "code": "// Example usage of ft_isxdigit\n// TODO: Add real example",
          "output": null
        }
      ],
      "complexity": null,
      "notes": [],
      "see_also": [],
      "updated_at": null,
      "author_role": null,
      "related": [],
      "manual_path": null,
      "manual_html": null
    },
    "odd_even_sort": {
      "name": "odd_even_sort",
      "category": "sort",
      "category_path": "sort",
      "tags": [
        "iteration",
        "basic"
      ],
      "prototype": "odd_even_sort(int *arr, int size)",
      "description": "No description available.",
      "parameters": [],
      "return_value": "Return value description not available.",
      "examples": [
        {
          "title": "Basic usage of odd_even_sort",
          "code": "// Example usage of odd_even_sort\n// TODO: Add real example",
          "output": null
        }
      ],
      "complexity": null,
      "notes": [],
      "see_also": [],
      "updated_at": null,
      "author_role": null,
      "related": [],
      "manual_path": null,
      "manual_html": null
    },
    "cl_push": {
      "name": "cl_push",
      "category": "data_structures",
      "category_path": "data_structures/circular_linked_list",
      "tags": [
        "allocation",
        "intermediate"
      ],
      "prototype": "/* Function: cl_push */",
      "description": "No description available.",
      "parameters": [],
      "return_value": "Return value description not available.",
      "examples": [
        {
          "title": "Basic usage of cl_push",
          "code": "// Example usage of cl_push\n// TODO: Add real example",
          "output": null
        }
      ],
      "complexity": null,
      "notes": [],
      "see_also": [],
      "updated_at": null,
      "author_role": null,
      "related": [],
      "manual_path": null,
      "manual_html": null
    },
    "putpixel": {
      "name": "putpixel",
      "category": "math",
      "category_path": "math/geometry/draw",
      "tags": [
        "basic"
      ],
      "prototype": "/* Function: putpixel */",
      "description": "No description available.",
      "parameters": [],
      "return_value": "Return value description not available.",
      "examples": [
        {
          "title": "Basic usage of putpixel",
          "code": "// Example usage of putpixel\n// TODO: Add real example",
          "output": null
        }
      ],
      "complexity": null,
      "notes": [],
      "see_also": [],
      "updated_at": null,
      "author_role": null,
      "related": [],
      "manual_path": null,
      "manual_html": null
    },
    "ft_memmove": {
      "name": "ft_memmove",
      "category": "memory",
      "category_path": "memory",
      "tags": [
        "memory",
        "allocation",
        "cleanup",
        "iteration",
        "intermediate"
      ],
      "prototype": "ft_memmove(void *dst, const void *src, size_t n)",
      "description": "#include \"TDD/test.h\"",
      "parameters": [],
      "return_value": "Return value description not available.",
      "examples": [
        {
          "title": "Basic usage of ft_memmove",
          "code": "// Example usage of ft_memmove\n// TODO: Add real example",
          "output": null
        }
      ],
      "complexity": null,
      "notes": [],
      "see_also": [],
      "updated_at": null,
      "author_role": null,
      "related": [],
      "manual_path": null,
      "manual_html": null
    },
    "issorted": {
      "name": "issorted",
      "category": "data_structures",
      "category_path": "data_structures/lists",
      "tags": [
        "iteration",
        "basic"
      ],
      "prototype": "issorted(t_list *head)",
      "description": "No description available.",
      "parameters": [],
      "return_value": "Return value description not available.",
      "examples": [
        {
          "title": "Basic usage of issorted",
          "code": "// Example usage of issorted\n// TODO: Add real example",
          "output": null
        }
      ],
      "complexity": null,
      "notes": [],
      "see_also": [],
      "updated_at": null,
      "author_role": null,
      "related": [],
      "manual_path": null,
      "manual_html": null
    },
    "ft_strlcpy": {
      "name": "ft_strlcpy",
      "category": "strings",
      "category_path": "strings",
      "tags": [
        "string",
        "iteration",
        "basic"
      ],
      "prototype": "ft_strlcpy(char *dst, const char *src, t_size dsize)",
      "description": "#include \"TDD/test.h\"",
      "parameters": [],
      "return_value": "Return value description not available.",
      "examples": [
        {
          "title": "Basic usage of ft_strlcpy",
          "code": "// Example usage of ft_strlcpy\n// TODO: Add real example",
          "output": null
        }
      ],
      "complexity": null,
      "notes": [],
      "see_also": [],
      "updated_at": null,
      "author_role": null,
      "related": [],
      "manual_path": null,
      "manual_html": null
    },
    "ft_print_diff": {
      "name": "ft_print_diff",
      "category": "render",
      "category_path": "render",
      "tags": [
        "basic"
      ],
      "prototype": "void\tft_print_diff(const char *old_line, const char *new_line)",
      "description": "No description available.",
      "parameters": [],
      "return_value": "Return value description not available.",
      "examples": [
        {
          "title": "Basic usage of ft_print_diff",
          "code": "// Example usage of ft_print_diff\n// TODO: Add real example",
          "output": null
        }
      ],
      "complexity": null,
      "notes": [],
      "see_also": [],
      "updated_at": null,
      "author_role": null,
      "related": [],
      "manual_path": null,
      "manual_html": null
    },
    "ft_cl_print_n_times": {
      "name": "ft_cl_print_n_times",
      "category": "data_structures",
      "category_path": "data_structures/circular_linked_list",
      "tags": [
        "iteration",
        "basic"
      ],
      "prototype": "void\t\t\tft_cl_print_n_times(t_circular_list *list, size_t n)",
      "description": "Points to last node (last->next is first)",
      "parameters": [],
      "return_value": "Return value description not available.",
      "examples": [
        {
          "title": "Basic usage of ft_cl_print_n_times",
          "code": "// Example usage of ft_cl_print_n_times\n// TODO: Add real example",
          "output": null
        }
      ],
      "complexity": null,
      "notes": [],
      "see_also": [],
      "updated_at": null,
      "author_role": null,
      "related": [],
      "manual_path": null,
      "manual_html": null
    },
    "ft_cl_push_front": {
      "name": "ft_cl_push_front",
      "category": "data_structures",
      "category_path": "data_structures/circular_linked_list",
      "tags": [
        "iteration",
        "basic"
      ],
      "prototype": "bool\t\t\tft_cl_push_front(t_circular_list *list, void *data)",
      "description": "Points to last node (last->next is first)",
      "parameters": [],
      "return_value": "Return value description not available.",
      "examples": [
        {
          "title": "Basic usage of ft_cl_push_front",
          "code": "// Example usage of ft_cl_push_front\n// TODO: Add real example",
          "output": null
        }
      ],
      "complexity": null,
      "notes": [],
      "see_also": [],
      "updated_at": null,
      "author_role": null,
      "related": [],
      "manual_path": null,
      "manual_html": null
    },
    "ft_dll_is_empty": {
      "name": "ft_dll_is_empty",
      "category": "data_structures",
      "category_path": "data_structures/doubly_linked_list",
      "tags": [
        "basic"
      ],
      "prototype": "bool\t\t\tft_dll_is_empty(t_doubly_list *list)",
      "description": "Core functions",
      "parameters": [],
      "return_value": "Return value description not available.",
      "examples": [
        {
          "title": "Basic usage of ft_dll_is_empty",
          "code": "// Example usage of ft_dll_is_empty\n// TODO: Add real example",
          "output": null
        }
      ],
      "complexity": null,
      "notes": [],
      "see_also": [],
      "updated_at": null,
      "author_role": null,
      "related": [],
      "manual_path": null,
      "manual_html": null
    },
    "vcopy": {
      "name": "vcopy",
      "category": "math",
      "category_path": "math/geometry/quaternion",
      "tags": [
        "iteration",
        "basic"
      ],
      "prototype": "vcopy(const float *v1, float *v2)",
      "description": "No description available.",
      "parameters": [],
      "return_value": "Return value description not available.",
      "examples": [
        {
          "title": "Basic usage of vcopy",
          "code": "// Example usage of vcopy\n// TODO: Add real example",
          "output": null
        }
      ],
      "complexity": null,
      "notes": [],
      "see_also": [],
      "updated_at": null,
      "author_role": null,
      "related": [],
      "manual_path": null,
      "manual_html": null
    },
    "intro_sort": {
      "name": "intro_sort",
      "category": "sort",
      "category_path": "sort",
      "tags": [
        "iteration",
        "basic"
      ],
      "prototype": "intro_sort(int *arr, int size)",
      "description": "No description available.",
      "parameters": [],
      "return_value": "Return value description not available.",
      "examples": [
        {
          "title": "Basic usage of intro_sort",
          "code": "// Example usage of intro_sort\n// TODO: Add real example",
          "output": null
        }
      ],
      "complexity": null,
      "notes": [],
      "see_also": [],
      "updated_at": null,
      "author_role": null,
      "related": [],
      "manual_path": null,
      "manual_html": null
    },
    "ft_print_array": {
      "name": "ft_print_array",
      "category": "debug",
      "category_path": "debug",
      "tags": [
        "cleanup",
        "iteration",
        "basic"
      ],
      "prototype": "ft_print_array(int *arr, int size, char mode)",
      "description": "int main(int argc, char **argv)",
      "parameters": [],
      "return_value": "Return value description not available.",
      "examples": [
        {
          "title": "Basic usage of ft_print_array",
          "code": "// Example usage of ft_print_array\n// TODO: Add real example",
          "output": null
        }
      ],
      "complexity": null,
      "notes": [],
      "see_also": [],
      "updated_at": null,
      "author_role": null,
      "related": [],
      "manual_path": null,
      "manual_html": null
    },
    "search_and_replace": {
      "name": "search_and_replace",
      "category": "memory",
      "category_path": "memory",
      "tags": [
        "iteration",
        "basic"
      ],
      "prototype": "search_and_replace(\"banana\", 'a', 'o')",
      "description": "Output: bonono",
      "parameters": [],
      "return_value": "Return value description not available.",
      "examples": [
        {
          "title": "Basic usage of search_and_replace",
          "code": "// Example usage of search_and_replace\n// TODO: Add real example",
          "output": null
        }
      ],
      "complexity": null,
      "notes": [],
      "see_also": [],
      "updated_at": null,
      "author_role": null,
      "related": [],
      "manual_path": null,
      "manual_html": null
    },
    "ft_strchr": {
      "name": "ft_strchr",
      "category": "strings",
      "category_path": "strings",
      "tags": [
        "string",
        "allocation",
        "cleanup",
        "iteration",
        "intermediate"
      ],
      "prototype": "char\t*ft_strchr(const char *s, int c)\n{\n\treturn (ft_memchr(s, c, ft_strlen(s) + 1))",
      "description": "#include \"TDD/test.h\"",
      "parameters": [],
      "return_value": "Return value description not available.",
      "examples": [
        {
          "title": "Basic usage of ft_strchr",
          "code": "// Example usage of ft_strchr\n// TODO: Add real example",
          "output": null
        }
      ],
      "complexity": null,
      "notes": [],
      "see_also": [],
      "updated_at": null,
      "author_role": null,
      "related": [],
      "manual_path": null,
      "manual_html": null
    },
    "ft_vfscanf_sh": {
      "name": "ft_vfscanf_sh",
      "category": "stdio",
      "category_path": "stdio/ft_scanf",
      "tags": [
        "input",
        "iteration",
        "basic"
      ],
      "prototype": "int         ft_vfscanf_sh(const char *command, const char *format, va_list ap)",
      "description": "No description available.",
      "parameters": [],
      "return_value": "Return value description not available.",
      "examples": [
        {
          "title": "Basic usage of ft_vfscanf_sh",
          "code": "// Example usage of ft_vfscanf_sh\n// TODO: Add real example",
          "output": null
        }
      ],
      "complexity": null,
      "notes": [],
      "see_also": [],
      "updated_at": null,
      "author_role": null,
      "related": [],
      "manual_path": null,
      "manual_html": null
    },
    "ft_atol": {
      "name": "ft_atol",
      "category": "strings",
      "category_path": "strings",
      "tags": [
        "iteration",
        "basic"
      ],
      "prototype": "ft_atol(const char *str)",
      "description": "No description available.",
      "parameters": [],
      "return_value": "Return value description not available.",
      "examples": [
        {
          "title": "Basic usage of ft_atol",
          "code": "// Example usage of ft_atol\n// TODO: Add real example",
          "output": null
        }
      ],
      "complexity": null,
      "notes": [],
      "see_also": [],
      "updated_at": null,
      "author_role": null,
      "related": [],
      "manual_path": null,
      "manual_html": null
    },
    "ft_atoi": {
      "name": "ft_atoi",
      "category": "stdlib",
      "category_path": "stdlib",
      "tags": [
        "iteration",
        "basic"
      ],
      "prototype": "ft_atoi(const char *str)",
      "description": "int main(int argc, char **argv)",
      "parameters": [],
      "return_value": "Return value description not available.",
      "examples": [
        {
          "title": "Basic usage of ft_atoi",
          "code": "// Example usage of ft_atoi\n// TODO: Add real example",
          "output": null
        }
      ],
      "complexity": null,
      "notes": [],
      "see_also": [],
      "updated_at": null,
      "author_role": null,
      "related": [],
      "manual_path": null,
      "manual_html": null
    },
    "quat_mult": {
      "name": "quat_mult",
      "category": "math",
      "category_path": "math/geometry/quaternion",
      "tags": [
        "basic"
      ],
      "prototype": "** Usage: quat_mult(&out, &a, &b)",
      "description": "No description available.",
      "parameters": [],
      "return_value": "Return value description not available.",
      "examples": [
        {
          "title": "Basic usage of quat_mult",
          "code": "// Example usage of quat_mult\n// TODO: Add real example",
          "output": null
        }
      ],
      "complexity": null,
      "notes": [],
      "see_also": [],
      "updated_at": null,
      "author_role": null,
      "related": [],
      "manual_path": null,
      "manual_html": null
    },
    "ft_strncpy": {
      "name": "ft_strncpy",
      "category": "strings",
      "category_path": "strings",
      "tags": [
        "string",
        "iteration",
        "basic"
      ],
      "prototype": "ft_strncpy(char *dest, const char *src, size_t n)",
      "description": "No description available.",
      "parameters": [],
      "return_value": "Return value description not available.",
      "examples": [
        {
          "title": "Basic usage of ft_strncpy",
          "code": "// Example usage of ft_strncpy\n// TODO: Add real example",
          "output": null
        }
      ],
      "complexity": null,
      "notes": [],
      "see_also": [],
      "updated_at": null,
      "author_role": null,
      "related": [],
      "manual_path": null,
      "manual_html": null
    },
    "first_word": {
      "name": "first_word",
      "category": "stdio",
      "category_path": "stdio",
      "tags": [
        "iteration",
        "basic"
      ],
      "prototype": "first_word(char *str)",
      "description": "No description available.",
      "parameters": [],
      "return_value": "Return value description not available.",
      "examples": [
        {
          "title": "Basic usage of first_word",
          "code": "// Example usage of first_word\n// TODO: Add real example",
          "output": null
        }
      ],
      "complexity": null,
      "notes": [],
      "see_also": [],
      "updated_at": null,
      "author_role": null,
      "related": [],
      "manual_path": null,
      "manual_html": null
    },
    "ft_round": {
      "name": "ft_round",
      "category": "math",
      "category_path": "math/algebra",
      "tags": [
        "basic"
      ],
      "prototype": "int\t\t\tft_round(double num)",
      "description": "Define M_PI if not already defined",
      "parameters": [],
      "return_value": "Return value description not available.",
      "examples": [
        {
          "title": "Basic usage of ft_round",
          "code": "// Example usage of ft_round\n// TODO: Add real example",
          "output": null
        }
      ],
      "complexity": null,
      "notes": [],
      "see_also": [],
      "updated_at": null,
      "author_role": null,
      "related": [],
      "manual_path": null,
      "manual_html": null
    },
    "merge_sort": {
      "name": "merge_sort",
      "category": "sort",
      "category_path": "sort",
      "tags": [
        "allocation",
        "cleanup",
        "iteration",
        "intermediate"
      ],
      "prototype": "merge_sort(int *arr, int l, int r)",
      "description": "Helper function to print array",
      "parameters": [],
      "return_value": "Return value description not available.",
      "examples": [
        {
          "title": "Basic usage of merge_sort",
          "code": "// Example usage of merge_sort\n// TODO: Add real example",
          "output": null
        }
      ],
      "complexity": null,
      "notes": [],
      "see_also": [],
      "updated_at": null,
      "author_role": null,
      "related": [],
      "manual_path": null,
      "manual_html": null
    },
    "string_length": {
      "name": "string_length",
      "category": "stdio",
      "category_path": "stdio/ft_printf/src",
      "tags": [
        "iteration",
        "basic"
      ],
      "prototype": "/* Function: string_length */",
      "description": "No description available.",
      "parameters": [],
      "return_value": "Return value description not available.",
      "examples": [
        {
          "title": "Basic usage of string_length",
          "code": "// Example usage of string_length\n// TODO: Add real example",
          "output": null
        }
      ],
      "complexity": null,
      "notes": [],
      "see_also": [],
      "updated_at": null,
      "author_role": null,
      "related": [],
      "manual_path": null,
      "manual_html": null
    },
    "ft_print_loading_spinner": {
      "name": "ft_print_loading_spinner",
      "category": "render",
      "category_path": "render",
      "tags": [
        "basic"
      ],
      "prototype": "void\tft_print_loading_spinner(int duration_ms)",
      "description": "No description available.",
      "parameters": [],
      "return_value": "Return value description not available.",
      "examples": [
        {
          "title": "Basic usage of ft_print_loading_spinner",
          "code": "// Example usage of ft_print_loading_spinner\n// TODO: Add real example",
          "output": null
        }
      ],
      "complexity": null,
      "notes": [],
      "see_also": [],
      "updated_at": null,
      "author_role": null,
      "related": [],
      "manual_path": null,
      "manual_html": null
    },
    "ft_atoi_base": {
      "name": "ft_atoi_base",
      "category": "stdlib",
      "category_path": "stdlib",
      "tags": [
        "cleanup",
        "basic"
      ],
      "prototype": "int\t\tft_atoi_base(const char *str, int base)",
      "description": "Remove or comment out this line if you want to use your custom ft_realloc",
      "parameters": [],
      "return_value": "Return value description not available.",
      "examples": [
        {
          "title": "Basic usage of ft_atoi_base",
          "code": "// Example usage of ft_atoi_base\n// TODO: Add real example",
          "output": null
        }
      ],
      "complexity": null,
      "notes": [],
      "see_also": [],
      "updated_at": null,
      "author_role": null,
      "related": [],
      "manual_path": null,
      "manual_html": null
    },
    "ft_lstdelone": {
      "name": "ft_lstdelone",
      "category": "data_structures",
      "category_path": "data_structures/lists",
      "tags": [
        "iteration",
        "basic"
      ],
      "prototype": "void\tft_lstdelone(t_list *lst, void (*del)(void *))",
      "description": "Add the prototype for ft_lstnew",
      "parameters": [],
      "return_value": "Return value description not available.",
      "examples": [
        {
          "title": "Basic usage of ft_lstdelone",
          "code": "// Example usage of ft_lstdelone\n// TODO: Add real example",
          "output": null
        }
      ],
      "complexity": null,
      "notes": [],
      "see_also": [],
      "updated_at": null,
      "author_role": null,
      "related": [],
      "manual_path": null,
      "manual_html": null
    },
    "ft_remove_fd_node": {
      "name": "ft_remove_fd_node",
      "category": "stdio",
      "category_path": "stdio/gnl",
      "tags": [
        "cleanup",
        "iteration",
        "basic"
      ],
      "prototype": "void\t\tft_remove_fd_node(t_fd_list **fd_list, t_size fd)",
      "description": "No description available.",
      "parameters": [],
      "return_value": "Return value description not available.",
      "examples": [
        {
          "title": "Basic usage of ft_remove_fd_node",
          "code": "// Example usage of ft_remove_fd_node\n// TODO: Add real example",
          "output": null
        }
      ],
      "complexity": null,
      "notes": [],
      "see_also": [],
      "updated_at": null,
      "author_role": null,
      "related": [],
      "manual_path": null,
      "manual_html": null
    },
    "camera_zoom": {
      "name": "camera_zoom",
      "category": "classes",
      "category_path": "classes/render/camera",
      "tags": [
        "basic"
      ],
      "prototype": "/* Function: camera_zoom */",
      "description": "No description available.",
      "parameters": [],
      "return_value": "Return value description not available.",
      "examples": [
        {
          "title": "Basic usage of camera_zoom",
          "code": "// Example usage of camera_zoom\n// TODO: Add real example",
          "output": null
        }
      ],
      "complexity": null,
      "notes": [],
      "see_also": [],
      "updated_at": null,
      "author_role": null,
      "related": [],
      "manual_path": null,
      "manual_html": null
    },
    "stooge_sort": {
      "name": "stooge_sort",
      "category": "sort",
      "category_path": "sort",
      "tags": [
        "basic"
      ],
      "prototype": "stooge_sort(int *arr, int size)",
      "description": "No description available.",
      "parameters": [],
      "return_value": "Return value description not available.",
      "examples": [
        {
          "title": "Basic usage of stooge_sort",
          "code": "// Example usage of stooge_sort\n// TODO: Add real example",
          "output": null
        }
      ],
      "complexity": null,
      "notes": [],
      "see_also": [],
      "updated_at": null,
      "author_role": null,
      "related": [],
      "manual_path": null,
      "manual_html": null
    },
    "ease-in-out": {
      "name": "ease-in-out",
      "category": "math",
      "category_path": "math/algebra",
      "tags": [
        "iteration",
        "basic"
      ],
      "prototype": "/* Function: ease-in-out */",
      "description": "Ease-in-out interpolation for smoother transitions",
      "parameters": [],
      "return_value": "Return value description not available.",
      "examples": [
        {
          "title": "Basic usage of ease-in-out",
          "code": "// Example usage of ease-in-out\n// TODO: Add real example",
          "output": null
        }
      ],
      "complexity": null,
      "notes": [],
      "see_also": [],
      "updated_at": null,
      "author_role": null,
      "related": [],
      "manual_path": null,
      "manual_html": null
    },
    "ft_interactive": {
      "name": "ft_interactive",
      "category": "render",
      "category_path": "render",
      "tags": [
        "iteration",
        "basic"
      ],
      "prototype": "/* Function: ft_interactive */",
      "description": "No description available.",
      "parameters": [],
      "return_value": "Return value description not available.",
      "examples": [
        {
          "title": "Basic usage of ft_interactive",
          "code": "// Example usage of ft_interactive\n// TODO: Add real example",
          "output": null
        }
      ],
      "complexity": null,
      "notes": [],
      "see_also": [],
      "updated_at": null,
      "author_role": null,
      "related": [],
      "manual_path": null,
      "manual_html": null
    },
    "quat_from_axis_angle": {
      "name": "quat_from_axis_angle",
      "category": "math",
      "category_path": "math/geometry/quaternion",
      "tags": [
        "iteration",
        "basic"
      ],
      "prototype": "quat_from_axis_angle(t_quat *q, t_fpoint3 axis, float angle_rad)",
      "description": "No description available.",
      "parameters": [],
      "return_value": "Return value description not available.",
      "examples": [
        {
          "title": "Basic usage of quat_from_axis_angle",
          "code": "// Example usage of quat_from_axis_angle\n// TODO: Add real example",
          "output": null
        }
      ],
      "complexity": null,
      "notes": [],
      "see_also": [],
      "updated_at": null,
      "author_role": null,
      "related": [],
      "manual_path": null,
      "manual_html": null
    },
    "vector_is_empty": {
      "name": "vector_is_empty",
      "category": "data_structures",
      "category_path": "data_structures/vector",
      "tags": [
        "basic"
      ],
      "prototype": "vector_is_empty(t_vector *vector)",
      "description": "No description available.",
      "parameters": [],
      "return_value": "Return value description not available.",
      "examples": [
        {
          "title": "Basic usage of vector_is_empty",
          "code": "// Example usage of vector_is_empty\n// TODO: Add real example",
          "output": null
        }
      ],
      "complexity": null,
      "notes": [],
      "see_also": [],
      "updated_at": null,
      "author_role": null,
      "related": [],
      "manual_path": null,
      "manual_html": null
    },
    "ft_dll_set": {
      "name": "ft_dll_set",
      "category": "data_structures",
      "category_path": "data_structures/doubly_linked_list",
      "tags": [
        "basic"
      ],
      "prototype": "bool\t\t\tft_dll_set(t_doubly_list *list, size_t index, void *data)",
      "description": "Core functions",
      "parameters": [],
      "return_value": "Return value description not available.",
      "examples": [
        {
          "title": "Basic usage of ft_dll_set",
          "code": "// Example usage of ft_dll_set\n// TODO: Add real example",
          "output": null
        }
      ],
      "complexity": null,
      "notes": [],
      "see_also": [],
      "updated_at": null,
      "author_role": null,
      "related": [],
      "manual_path": null,
      "manual_html": null
    },
    "queue_clear": {
      "name": "queue_clear",
      "category": "data_structures",
      "category_path": "data_structures/queue",
      "tags": [
        "cleanup",
        "iteration",
        "basic"
      ],
      "prototype": "queue_clear(t_queue *queue)",
      "description": "No description available.",
      "parameters": [],
      "return_value": "Return value description not available.",
      "examples": [
        {
          "title": "Basic usage of queue_clear",
          "code": "// Example usage of queue_clear\n// TODO: Add real example",
          "output": null
        }
      ],
      "complexity": null,
      "notes": [],
      "see_also": [],
      "updated_at": null,
      "author_role": null,
      "related": [],
      "manual_path": null,
      "manual_html": null
    },
    "ft_fprime": {
      "name": "ft_fprime",
      "category": "math",
      "category_path": "math/algebra",
      "tags": [
        "basic"
      ],
      "prototype": "void\t\tft_fprime(int n)",
      "description": "Define M_PI if not already defined",
      "parameters": [],
      "return_value": "Return value description not available.",
      "examples": [
        {
          "title": "Basic usage of ft_fprime",
          "code": "// Example usage of ft_fprime\n// TODO: Add real example",
          "output": null
        }
      ],
      "complexity": null,
      "notes": [],
      "see_also": [],
      "updated_at": null,
      "author_role": null,
      "related": [],
      "manual_path": null,
      "manual_html": null
    },
    "ft_dll_push_front": {
      "name": "ft_dll_push_front",
      "category": "data_structures",
      "category_path": "data_structures/doubly_linked_list",
      "tags": [
        "basic"
      ],
      "prototype": "bool\t\t\tft_dll_push_front(t_doubly_list *list, void *data)",
      "description": "Core functions",
      "parameters": [],
      "return_value": "Return value description not available.",
      "examples": [
        {
          "title": "Basic usage of ft_dll_push_front",
          "code": "// Example usage of ft_dll_push_front\n// TODO: Add real example",
          "output": null
        }
      ],
      "complexity": null,
      "notes": [],
      "see_also": [],
      "updated_at": null,
      "author_role": null,
      "related": [],
      "manual_path": null,
      "manual_html": null
    },
    "kth_end_from_linked_list": {
      "name": "kth_end_from_linked_list",
      "category": "data_structures",
      "category_path": "data_structures/lists",
      "tags": [
        "linked_list",
        "iteration",
        "basic"
      ],
      "prototype": "kth_end_from_linked_list(t_list *head, int k)",
      "description": "No description available.",
      "parameters": [],
      "return_value": "Return value description not available.",
      "examples": [
        {
          "title": "Basic usage of kth_end_from_linked_list",
          "code": "// Example usage of kth_end_from_linked_list\n// TODO: Add real example",
          "output": null
        }
      ],
      "complexity": null,
      "notes": [],
      "see_also": [],
      "updated_at": null,
      "author_role": null,
      "related": [],
      "manual_path": null,
      "manual_html": null
    },
    "ft_strtrim": {
      "name": "ft_strtrim",
      "category": "strings",
      "category_path": "strings",
      "tags": [
        "string",
        "allocation",
        "cleanup",
        "iteration",
        "intermediate"
      ],
      "prototype": "ft_strtrim(const char *s1, const char *set)",
      "description": "No description available.",
      "parameters": [],
      "return_value": "Return value description not available.",
      "examples": [
        {
          "title": "Basic usage of ft_strtrim",
          "code": "// Example usage of ft_strtrim\n// TODO: Add real example",
          "output": null
        }
      ],
      "complexity": null,
      "notes": [],
      "see_also": [],
      "updated_at": null,
      "author_role": null,
      "related": [],
      "manual_path": null,
      "manual_html": null
    },
    "ft_cl_destroy": {
      "name": "ft_cl_destroy",
      "category": "data_structures",
      "category_path": "data_structures/circular_linked_list",
      "tags": [
        "iteration",
        "basic"
      ],
      "prototype": "void\t\t\tft_cl_destroy(t_circular_list *list)",
      "description": "Points to last node (last->next is first)",
      "parameters": [],
      "return_value": "Return value description not available.",
      "examples": [
        {
          "title": "Basic usage of ft_cl_destroy",
          "code": "// Example usage of ft_cl_destroy\n// TODO: Add real example",
          "output": null
        }
      ],
      "complexity": null,
      "notes": [],
      "see_also": [],
      "updated_at": null,
      "author_role": null,
      "related": [],
      "manual_path": null,
      "manual_html": null
    },
    "helpers": {
      "name": "helpers",
      "category": "stdio",
      "category_path": "stdio/ft_scanf",
      "tags": [
        "iteration",
        "basic"
      ],
      "prototype": "/* Function: helpers */",
      "description": "No description available.",
      "parameters": [],
      "return_value": "Return value description not available.",
      "examples": [
        {
          "title": "Basic usage of helpers",
          "code": "// Example usage of helpers\n// TODO: Add real example",
          "output": null
        }
      ],
      "complexity": null,
      "notes": [],
      "see_also": [],
      "updated_at": null,
      "author_role": null,
      "related": [],
      "manual_path": null,
      "manual_html": null
    },
    "set_color": {
      "name": "set_color",
      "category": "math",
      "category_path": "math/geometry/draw",
      "tags": [
        "basic"
      ],
      "prototype": "/* Function: set_color */",
      "description": "No description available.",
      "parameters": [],
      "return_value": "Return value description not available.",
      "examples": [
        {
          "title": "Basic usage of set_color",
          "code": "// Example usage of set_color\n// TODO: Add real example",
          "output": null
        }
      ],
      "complexity": null,
      "notes": [],
      "see_also": [],
      "updated_at": null,
      "author_role": null,
      "related": [],
      "manual_path": null,
      "manual_html": null
    },
    "matrix_identity": {
      "name": "matrix_identity",
      "category": "math",
      "category_path": "math/geometry/matrices",
      "tags": [
        "iteration",
        "basic"
      ],
      "prototype": "** Usage: matrix_identity(&mat)",
      "description": "No description available.",
      "parameters": [],
      "return_value": "Return value description not available.",
      "examples": [
        {
          "title": "Basic usage of matrix_identity",
          "code": "// Example usage of matrix_identity\n// TODO: Add real example",
          "output": null
        }
      ],
      "complexity": null,
      "notes": [],
      "see_also": [],
      "updated_at": null,
      "author_role": null,
      "related": [],
      "manual_path": null,
      "manual_html": null
    },
    "ft_min": {
      "name": "ft_min",
      "category": "sort",
      "category_path": "sort",
      "tags": [
        "basic"
      ],
      "prototype": "int\t\tft_min(int a, int b)",
      "description": "Wrapper functions",
      "parameters": [],
      "return_value": "Return value description not available.",
      "examples": [
        {
          "title": "Basic usage of ft_min",
          "code": "// Example usage of ft_min\n// TODO: Add real example",
          "output": null
        }
      ],
      "complexity": null,
      "notes": [],
      "see_also": [],
      "updated_at": null,
      "author_role": null,
      "related": [],
      "manual_path": null,
      "manual_html": null
    },
    "cl_destroy": {
      "name": "cl_destroy",
      "category": "data_structures",
      "category_path": "data_structures/circular_linked_list",
      "tags": [
        "cleanup",
        "basic"
      ],
      "prototype": "cl_destroy(t_circular_list *list)",
      "description": "No description available.",
      "parameters": [],
      "return_value": "Return value description not available.",
      "examples": [
        {
          "title": "Basic usage of cl_destroy",
          "code": "// Example usage of cl_destroy\n// TODO: Add real example",
          "output": null
        }
      ],
      "complexity": null,
      "notes": [],
      "see_also": [],
      "updated_at": null,
      "author_role": null,
      "related": [],
      "manual_path": null,
      "manual_html": null
    },
    "ft_queue_enqueue": {
      "name": "ft_queue_enqueue",
      "category": "data_structures",
      "category_path": "data_structures/queue",
      "tags": [
        "queue",
        "insertion",
        "basic"
      ],
      "prototype": "bool ft_queue_enqueue(t_queue *queue, void *data)",
      "description": "Enqueue an element at the rear of the queue.",
      "parameters": [
        {
          "name": "queue",
          "type_name": "t_queue*",
          "description": "Queue handle."
        },
        {
          "name": "data",
          "type_name": "void*",
          "description": "Element to enqueue."
        }
      ],
      "return_value": "true on success, false on failure.",
      "examples": [
        {
          "title": "Enqueue integers",
          "code": "#include \"ft_queue.h\"\\nint main(void){ t_queue *q=ft_queue_create(); int x=42; ft_queue_enqueue(q,&x); }",
          "output": null
        }
      ],
      "complexity": "O(1)",
      "notes": [
        "Does not take ownership of data."
      ],
      "see_also": [
        "ft_queue_dequeue",
        "ft_queue_front"
      ],
      "updated_at": "2025-09-03",
      "author_role": "contributor",
      "related": [
        "ft_queue_dequeue",
        "ft_queue_front"
      ],
      "manual_path": "../manpages/ft_queue_enqueue.md",
      "manual_html": "<h1>ft_queue_enqueue</h1>\n<p>Adds an element to the rear of the queue.</p>\n<h2>Synopsis</h2>\n<pre><code class=\"language-c\">bool ft_queue_enqueue(t_queue *queue, void *data);\n</code></pre>\n<h2>Description</h2>\n<p>Appends <code>data</code> at the queue's rear in O(1). The queue does not own the memory pointed by <code>data</code>.</p>\n<h2>Return Value</h2>\n<p><code>true</code> on success, <code>false</code> on failure (e.g., allocation error).</p>\n"
    },
    "ft_utoa": {
      "name": "ft_utoa",
      "category": "stdlib",
      "category_path": "stdlib",
      "tags": [
        "allocation",
        "iteration",
        "intermediate"
      ],
      "prototype": "ft_utoa(unsigned int n)",
      "description": "Counts the number of digits in an unsigned integer",
      "parameters": [],
      "return_value": "Return value description not available.",
      "examples": [
        {
          "title": "Basic usage of ft_utoa",
          "code": "// Example usage of ft_utoa\n// TODO: Add real example",
          "output": null
        }
      ],
      "complexity": null,
      "notes": [],
      "see_also": [],
      "updated_at": null,
      "author_role": null,
      "related": [],
      "manual_path": null,
      "manual_html": null
    },
    "ft_dll_push_back": {
      "name": "ft_dll_push_back",
      "category": "data_structures",
      "category_path": "data_structures/doubly_linked_list",
      "tags": [
        "basic"
      ],
      "prototype": "bool\t\t\tft_dll_push_back(t_doubly_list *list, void *data)",
      "description": "Core functions",
      "parameters": [],
      "return_value": "Return value description not available.",
      "examples": [
        {
          "title": "Basic usage of ft_dll_push_back",
          "code": "// Example usage of ft_dll_push_back\n// TODO: Add real example",
          "output": null
        }
      ],
      "complexity": null,
      "notes": [],
      "see_also": [],
      "updated_at": null,
      "author_role": null,
      "related": [],
      "manual_path": null,
      "manual_html": null
    },
    "pool": {
      "name": "pool",
      "category": "stdlib",
      "category_path": "stdlib/pool",
      "tags": [
        "cleanup",
        "iteration",
        "basic"
      ],
      "prototype": "/* Function: pool */",
      "description": "No description available.",
      "parameters": [],
      "return_value": "Return value description not available.",
      "examples": [
        {
          "title": "Basic usage of pool",
          "code": "// Example usage of pool\n// TODO: Add real example",
          "output": null
        }
      ],
      "complexity": null,
      "notes": [],
      "see_also": [],
      "updated_at": null,
      "author_role": null,
      "related": [],
      "manual_path": null,
      "manual_html": null
    },
    "ft_lstsize": {
      "name": "ft_lstsize",
      "category": "data_structures",
      "category_path": "data_structures/lists",
      "tags": [
        "iteration",
        "basic"
      ],
      "prototype": "ft_lstsize(t_list *lst)",
      "description": "#include \"TDD/test.h\"",
      "parameters": [],
      "return_value": "Return value description not available.",
      "examples": [
        {
          "title": "Basic usage of ft_lstsize",
          "code": "// Example usage of ft_lstsize\n// TODO: Add real example",
          "output": null
        }
      ],
      "complexity": null,
      "notes": [],
      "see_also": [],
      "updated_at": null,
      "author_role": null,
      "related": [],
      "manual_path": null,
      "manual_html": null
    },
    "writer": {
      "name": "writer",
      "category": "stdio",
      "category_path": "stdio/ft_printf/src",
      "tags": [
        "iteration",
        "basic"
      ],
      "prototype": "/* Function: writer */",
      "description": "No description available.",
      "parameters": [],
      "return_value": "Return value description not available.",
      "examples": [
        {
          "title": "Basic usage of writer",
          "code": "// Example usage of writer\n// TODO: Add real example",
          "output": null
        }
      ],
      "complexity": null,
      "notes": [],
      "see_also": [],
      "updated_at": null,
      "author_role": null,
      "related": [],
      "manual_path": null,
      "manual_html": null
    },
    "ft_putstr_fd": {
      "name": "ft_putstr_fd",
      "category": "stdio",
      "category_path": "stdio",
      "tags": [
        "basic"
      ],
      "prototype": "void\tft_putstr_fd(char *s, int fd)\n{\n\tif (s)\n\t{\n\t\twrite(fd, s, ft_strlen(s))",
      "description": "#include \"TDD/test.h\"",
      "parameters": [],
      "return_value": "Return value description not available.",
      "examples": [
        {
          "title": "Basic usage of ft_putstr_fd",
          "code": "// Example usage of ft_putstr_fd\n// TODO: Add real example",
          "output": null
        }
      ],
      "complexity": null,
      "notes": [],
      "see_also": [],
      "updated_at": null,
      "author_role": null,
      "related": [],
      "manual_path": null,
      "manual_html": null
    },
    "ft_cl_find": {
      "name": "ft_cl_find",
      "category": "data_structures",
      "category_path": "data_structures/circular_linked_list",
      "tags": [
        "iteration",
        "basic"
      ],
      "prototype": "int\t\t\t\tft_cl_find(t_circular_list *list, void *data)",
      "description": "Points to last node (last->next is first)",
      "parameters": [],
      "return_value": "Return value description not available.",
      "examples": [
        {
          "title": "Basic usage of ft_cl_find",
          "code": "// Example usage of ft_cl_find\n// TODO: Add real example",
          "output": null
        }
      ],
      "complexity": null,
      "notes": [],
      "see_also": [],
      "updated_at": null,
      "author_role": null,
      "related": [],
      "manual_path": null,
      "manual_html": null
    },
    "ft_vfscanf_exec": {
      "name": "ft_vfscanf_exec",
      "category": "stdio",
      "category_path": "stdio/ft_scanf",
      "tags": [
        "input",
        "iteration",
        "basic"
      ],
      "prototype": "int         ft_vfscanf_exec(const char *path, char *const argv[],\n                           char *const envp[], const char *format, va_list ap)",
      "description": "No description available.",
      "parameters": [],
      "return_value": "Return value description not available.",
      "examples": [
        {
          "title": "Basic usage of ft_vfscanf_exec",
          "code": "// Example usage of ft_vfscanf_exec\n// TODO: Add real example",
          "output": null
        }
      ],
      "complexity": null,
      "notes": [],
      "see_also": [],
      "updated_at": null,
      "author_role": null,
      "related": [],
      "manual_path": null,
      "manual_html": null
    },
    "vector_pop_back": {
      "name": "vector_pop_back",
      "category": "data_structures",
      "category_path": "data_structures/vector",
      "tags": [
        "basic"
      ],
      "prototype": "vector_pop_back(t_vector *vector)",
      "description": "No description available.",
      "parameters": [],
      "return_value": "Return value description not available.",
      "examples": [
        {
          "title": "Basic usage of vector_pop_back",
          "code": "// Example usage of vector_pop_back\n// TODO: Add real example",
          "output": null
        }
      ],
      "complexity": null,
      "notes": [],
      "see_also": [],
      "updated_at": null,
      "author_role": null,
      "related": [],
      "manual_path": null,
      "manual_html": null
    },
    "input_handler_destroy": {
      "name": "input_handler_destroy",
      "category": "classes",
      "category_path": "classes/render/event",
      "tags": [
        "cleanup",
        "basic"
      ],
      "prototype": "/* Function: input_handler_destroy */",
      "description": "No description available.",
      "parameters": [],
      "return_value": "Return value description not available.",
      "examples": [
        {
          "title": "Basic usage of input_handler_destroy",
          "code": "// Example usage of input_handler_destroy\n// TODO: Add real example",
          "output": null
        }
      ],
      "complexity": null,
      "notes": [],
      "see_also": [],
      "updated_at": null,
      "author_role": null,
      "related": [],
      "manual_path": null,
      "manual_html": null
    },
    "ft_substr": {
      "name": "ft_substr",
      "category": "strings",
      "category_path": "strings",
      "tags": [
        "allocation",
        "intermediate"
      ],
      "prototype": "ft_substr(char const *s, unsigned int start, t_size len)",
      "description": "#include \"TDD/test.h\"",
      "parameters": [],
      "return_value": "Return value description not available.",
      "examples": [
        {
          "title": "Basic usage of ft_substr",
          "code": "// Example usage of ft_substr\n// TODO: Add real example",
          "output": null
        }
      ],
      "complexity": null,
      "notes": [],
      "see_also": [],
      "updated_at": null,
      "author_role": null,
      "related": [],
      "manual_path": null,
      "manual_html": null
    },
    "ft_print_code_block": {
      "name": "ft_print_code_block",
      "category": "render",
      "category_path": "render",
      "tags": [
        "basic"
      ],
      "prototype": "void\tft_print_code_block(const char *code, const char *language)",
      "description": "No description available.",
      "parameters": [],
      "return_value": "Return value description not available.",
      "examples": [
        {
          "title": "Basic usage of ft_print_code_block",
          "code": "// Example usage of ft_print_code_block\n// TODO: Add real example",
          "output": null
        }
      ],
      "complexity": null,
      "notes": [],
      "see_also": [],
      "updated_at": null,
      "author_role": null,
      "related": [],
      "manual_path": null,
      "manual_html": null
    },
    "ft_is_power2": {
      "name": "ft_is_power2",
      "category": "math",
      "category_path": "math/algebra",
      "tags": [
        "validation",
        "basic"
      ],
      "prototype": "int\t\t\tft_is_power2(int x)",
      "description": "Define M_PI if not already defined",
      "parameters": [],
      "return_value": "Return value description not available.",
      "examples": [
        {
          "title": "Basic usage of ft_is_power2",
          "code": "// Example usage of ft_is_power2\n// TODO: Add real example",
          "output": null
        }
      ],
      "complexity": null,
      "notes": [],
      "see_also": [],
      "updated_at": null,
      "author_role": null,
      "related": [],
      "manual_path": null,
      "manual_html": null
    },
    "vset": {
      "name": "vset",
      "category": "math",
      "category_path": "math/geometry/quaternion",
      "tags": [
        "basic"
      ],
      "prototype": "vset(float *v, float x, float y, float z)",
      "description": "No description available.",
      "parameters": [],
      "return_value": "Return value description not available.",
      "examples": [
        {
          "title": "Basic usage of vset",
          "code": "// Example usage of vset\n// TODO: Add real example",
          "output": null
        }
      ],
      "complexity": null,
      "notes": [],
      "see_also": [],
      "updated_at": null,
      "author_role": null,
      "related": [],
      "manual_path": null,
      "manual_html": null
    },
    "ft_swap": {
      "name": "ft_swap",
      "category": "memory",
      "category_path": "memory",
      "tags": [
        "iteration",
        "basic"
      ],
      "prototype": "*     ft_swap(&x, &y, sizeof(int))",
      "description": "Now x == 24, y == 42",
      "parameters": [],
      "return_value": "Return value description not available.",
      "examples": [
        {
          "title": "Basic usage of ft_swap",
          "code": "// Example usage of ft_swap\n// TODO: Add real example",
          "output": null
        }
      ],
      "complexity": null,
      "notes": [],
      "see_also": [],
      "updated_at": null,
      "author_role": null,
      "related": [],
      "manual_path": null,
      "manual_html": null
    },
    "matrix_translate": {
      "name": "matrix_translate",
      "category": "math",
      "category_path": "math/geometry/matrices",
      "tags": [
        "iteration",
        "basic"
      ],
      "prototype": "** Usage: matrix_translate(&mat, tx, ty, tz)",
      "description": "No description available.",
      "parameters": [],
      "return_value": "Return value description not available.",
      "examples": [
        {
          "title": "Basic usage of matrix_translate",
          "code": "// Example usage of matrix_translate\n// TODO: Add real example",
          "output": null
        }
      ],
      "complexity": null,
      "notes": [],
      "see_also": [],
      "updated_at": null,
      "author_role": null,
      "related": [],
      "manual_path": null,
      "manual_html": null
    },
    "ft_cl_print_addresses": {
      "name": "ft_cl_print_addresses",
      "category": "data_structures",
      "category_path": "data_structures/circular_linked_list",
      "tags": [
        "iteration",
        "basic"
      ],
      "prototype": "void\t\t\tft_cl_print_addresses(t_circular_list *list)",
      "description": "Points to last node (last->next is first)",
      "parameters": [],
      "return_value": "Return value description not available.",
      "examples": [
        {
          "title": "Basic usage of ft_cl_print_addresses",
          "code": "// Example usage of ft_cl_print_addresses\n// TODO: Add real example",
          "output": null
        }
      ],
      "complexity": null,
      "notes": [],
      "see_also": [],
      "updated_at": null,
      "author_role": null,
      "related": [],
      "manual_path": null,
      "manual_html": null
    },
    "vadd": {
      "name": "vadd",
      "category": "math",
      "category_path": "math/geometry/quaternion",
      "tags": [
        "basic"
      ],
      "prototype": "vadd(const float *src1, const float *src2, float *dst)",
      "description": "No description available.",
      "parameters": [],
      "return_value": "Return value description not available.",
      "examples": [
        {
          "title": "Basic usage of vadd",
          "code": "// Example usage of vadd\n// TODO: Add real example",
          "output": null
        }
      ],
      "complexity": null,
      "notes": [],
      "see_also": [],
      "updated_at": null,
      "author_role": null,
      "related": [],
      "manual_path": null,
      "manual_html": null
    },
    "ft_memcmp": {
      "name": "ft_memcmp",
      "category": "memory",
      "category_path": "memory",
      "tags": [
        "memory",
        "iteration",
        "basic"
      ],
      "prototype": "ft_memcmp(const void *s1, const void *s2, size_t n)",
      "description": "#include \"TDD/test.h\"",
      "parameters": [],
      "return_value": "Return value description not available.",
      "examples": [
        {
          "title": "Basic usage of ft_memcmp",
          "code": "// Example usage of ft_memcmp\n// TODO: Add real example",
          "output": null
        }
      ],
      "complexity": null,
      "notes": [],
      "see_also": [],
      "updated_at": null,
      "author_role": null,
      "related": [],
      "manual_path": null,
      "manual_html": null
    },
    "ft_dll_size": {
      "name": "ft_dll_size",
      "category": "data_structures",
      "category_path": "data_structures/doubly_linked_list",
      "tags": [
        "basic"
      ],
      "prototype": "size_t\t\t\tft_dll_size(t_doubly_list *list)",
      "description": "Core functions",
      "parameters": [],
      "return_value": "Return value description not available.",
      "examples": [
        {
          "title": "Basic usage of ft_dll_size",
          "code": "// Example usage of ft_dll_size\n// TODO: Add real example",
          "output": null
        }
      ],
      "complexity": null,
      "notes": [],
      "see_also": [],
      "updated_at": null,
      "author_role": null,
      "related": [],
      "manual_path": null,
      "manual_html": null
    },
    "dll_access": {
      "name": "dll_access",
      "category": "data_structures",
      "category_path": "data_structures/doubly_linked_list",
      "tags": [
        "iteration",
        "basic"
      ],
      "prototype": "/* Function: dll_access */",
      "description": "No description available.",
      "parameters": [],
      "return_value": "Return value description not available.",
      "examples": [
        {
          "title": "Basic usage of dll_access",
          "code": "// Example usage of dll_access\n// TODO: Add real example",
          "output": null
        }
      ],
      "complexity": null,
      "notes": [],
      "see_also": [],
      "updated_at": null,
      "author_role": null,
      "related": [],
      "manual_path": null,
      "manual_html": null
    },
    "char": {
      "name": "char",
      "category": "stdio",
      "category_path": "stdio/ft_scanf/parse_format",
      "tags": [
        "basic"
      ],
      "prototype": "char(t_scanf_data *data, va_list args)",
      "description": "No description available.",
      "parameters": [],
      "return_value": "Return value description not available.",
      "examples": [
        {
          "title": "Basic usage of char",
          "code": "// Example usage of char\n// TODO: Add real example",
          "output": null
        }
      ],
      "complexity": null,
      "notes": [],
      "see_also": [],
      "updated_at": null,
      "author_role": null,
      "related": [],
      "manual_path": null,
      "manual_html": null
    },
    "queue_size": {
      "name": "queue_size",
      "category": "data_structures",
      "category_path": "data_structures/queue",
      "tags": [
        "basic"
      ],
      "prototype": "queue_size(t_queue *queue)",
      "description": "No description available.",
      "parameters": [],
      "return_value": "Return value description not available.",
      "examples": [
        {
          "title": "Basic usage of queue_size",
          "code": "// Example usage of queue_size\n// TODO: Add real example",
          "output": null
        }
      ],
      "complexity": null,
      "notes": [],
      "see_also": [],
      "updated_at": null,
      "author_role": null,
      "related": [],
      "manual_path": null,
      "manual_html": null
    },
    "ft_calloc": {
      "name": "ft_calloc",
      "category": "stdlib",
      "category_path": "stdlib",
      "tags": [
        "allocation",
        "cleanup",
        "iteration",
        "intermediate"
      ],
      "prototype": "ft_calloc(t_size nmemb, t_size size)",
      "description": "Calcular dinámicamente SIZE_MAX sin macros ni bucles for",
      "parameters": [],
      "return_value": "Return value description not available.",
      "examples": [
        {
          "title": "Basic usage of ft_calloc",
          "code": "// Example usage of ft_calloc\n// TODO: Add real example",
          "output": null
        }
      ],
      "complexity": null,
      "notes": [],
      "see_also": [],
      "updated_at": null,
      "author_role": null,
      "related": [],
      "manual_path": null,
      "manual_html": null
    },
    "cl_access": {
      "name": "cl_access",
      "category": "data_structures",
      "category_path": "data_structures/circular_linked_list",
      "tags": [
        "iteration",
        "basic"
      ],
      "prototype": "/* Function: cl_access */",
      "description": "No description available.",
      "parameters": [],
      "return_value": "Return value description not available.",
      "examples": [
        {
          "title": "Basic usage of cl_access",
          "code": "// Example usage of cl_access\n// TODO: Add real example",
          "output": null
        }
      ],
      "complexity": null,
      "notes": [],
      "see_also": [],
      "updated_at": null,
      "author_role": null,
      "related": [],
      "manual_path": null,
      "manual_html": null
    },
    "ft_divide": {
      "name": "ft_divide",
      "category": "math",
      "category_path": "math/algebra",
      "tags": [
        "basic"
      ],
      "prototype": "int\t\t\tft_divide(int dividend, int divisor)",
      "description": "Define M_PI if not already defined",
      "parameters": [],
      "return_value": "Return value description not available.",
      "examples": [
        {
          "title": "Basic usage of ft_divide",
          "code": "// Example usage of ft_divide\n// TODO: Add real example",
          "output": null
        }
      ],
      "complexity": null,
      "notes": [],
      "see_also": [],
      "updated_at": null,
      "author_role": null,
      "related": [],
      "manual_path": null,
      "manual_html": null
    },
    "ft_isprime": {
      "name": "ft_isprime",
      "category": "math",
      "category_path": "math/algebra",
      "tags": [
        "validation",
        "iteration",
        "basic"
      ],
      "prototype": "/* Function: ft_isprime */",
      "description": "int main(int argc, char **argv)",
      "parameters": [],
      "return_value": "Return value description not available.",
      "examples": [
        {
          "title": "Basic usage of ft_isprime",
          "code": "// Example usage of ft_isprime\n// TODO: Add real example",
          "output": null
        }
      ],
      "complexity": null,
      "notes": [],
      "see_also": [],
      "updated_at": null,
      "author_role": null,
      "related": [],
      "manual_path": null,
      "manual_html": null
    },
    "rot_quatmatrix": {
      "name": "rot_quatmatrix",
      "category": "math",
      "category_path": "math/geometry/quaternion",
      "tags": [
        "basic"
      ],
      "prototype": "/* Function: rot_quatmatrix */",
      "description": "No description available.",
      "parameters": [],
      "return_value": "Return value description not available.",
      "examples": [
        {
          "title": "Basic usage of rot_quatmatrix",
          "code": "// Example usage of rot_quatmatrix\n// TODO: Add real example",
          "output": null
        }
      ],
      "complexity": null,
      "notes": [],
      "see_also": [],
      "updated_at": null,
      "author_role": null,
      "related": [],
      "manual_path": null,
      "manual_html": null
    },
    "ft_realloc_grow": {
      "name": "ft_realloc_grow",
      "category": "stdlib",
      "category_path": "stdlib",
      "tags": [
        "cleanup",
        "basic"
      ],
      "prototype": "bool\tft_realloc_grow(void **ptr, size_t elem_size,\n\t\t\t\t\t\tsize_t *cap, size_t min_needed)",
      "description": "Remove or comment out this line if you want to use your custom ft_realloc",
      "parameters": [],
      "return_value": "Return value description not available.",
      "examples": [
        {
          "title": "Basic usage of ft_realloc_grow",
          "code": "// Example usage of ft_realloc_grow\n// TODO: Add real example",
          "output": null
        }
      ],
      "complexity": null,
      "notes": [],
      "see_also": [],
      "updated_at": null,
      "author_role": null,
      "related": [],
      "manual_path": null,
      "manual_html": null
    },
    "utils_calc": {
      "name": "utils_calc",
      "category": "classes",
      "category_path": "classes/trace/error",
      "tags": [
        "iteration",
        "basic"
      ],
      "prototype": "/* Function: utils_calc */",
      "description": "Make print_error visible to other files",
      "parameters": [],
      "return_value": "Return value description not available.",
      "examples": [
        {
          "title": "Basic usage of utils_calc",
          "code": "// Example usage of utils_calc\n// TODO: Add real example",
          "output": null
        }
      ],
      "complexity": null,
      "notes": [],
      "see_also": [],
      "updated_at": null,
      "author_role": null,
      "related": [],
      "manual_path": null,
      "manual_html": null
    },
    "parser_padding": {
      "name": "parser_padding",
      "category": "stdio",
      "category_path": "stdio/ft_printf/src",
      "tags": [
        "basic"
      ],
      "prototype": "/* Function: parser_padding */",
      "description": "No description available.",
      "parameters": [],
      "return_value": "Return value description not available.",
      "examples": [
        {
          "title": "Basic usage of parser_padding",
          "code": "// Example usage of parser_padding\n// TODO: Add real example",
          "output": null
        }
      ],
      "complexity": null,
      "notes": [],
      "see_also": [],
      "updated_at": null,
      "author_role": null,
      "related": [],
      "manual_path": null,
      "manual_html": null
    },
    "ft_chunk_sort": {
      "name": "ft_chunk_sort",
      "category": "sort",
      "category_path": "sort",
      "tags": [
        "basic"
      ],
      "prototype": "void\tft_chunk_sort(int *arr, int size)",
      "description": "Wrapper functions",
      "parameters": [],
      "return_value": "Return value description not available.",
      "examples": [
        {
          "title": "Basic usage of ft_chunk_sort",
          "code": "// Example usage of ft_chunk_sort\n// TODO: Add real example",
          "output": null
        }
      ],
      "complexity": null,
      "notes": [],
      "see_also": [],
      "updated_at": null,
      "author_role": null,
      "related": [],
      "manual_path": null,
      "manual_html": null
    },
    "ft_graph": {
      "name": "ft_graph",
      "category": "render",
      "category_path": "render",
      "tags": [
        "iteration",
        "basic"
      ],
      "prototype": "/* Function: ft_graph */",
      "description": "No description available.",
      "parameters": [],
      "return_value": "Return value description not available.",
      "examples": [
        {
          "title": "Basic usage of ft_graph",
          "code": "// Example usage of ft_graph\n// TODO: Add real example",
          "output": null
        }
      ],
      "complexity": null,
      "notes": [],
      "see_also": [],
      "updated_at": null,
      "author_role": null,
      "related": [],
      "manual_path": null,
      "manual_html": null
    },
    "vector_create": {
      "name": "vector_create",
      "category": "data_structures",
      "category_path": "data_structures/vector",
      "tags": [
        "allocation",
        "cleanup",
        "intermediate"
      ],
      "prototype": "vector_create(void)",
      "description": "No description available.",
      "parameters": [],
      "return_value": "Return value description not available.",
      "examples": [
        {
          "title": "Basic usage of vector_create",
          "code": "// Example usage of vector_create\n// TODO: Add real example",
          "output": null
        }
      ],
      "complexity": null,
      "notes": [],
      "see_also": [],
      "updated_at": null,
      "author_role": null,
      "related": [],
      "manual_path": null,
      "manual_html": null
    },
    "vector_get": {
      "name": "vector_get",
      "category": "data_structures",
      "category_path": "data_structures/vector",
      "tags": [
        "basic"
      ],
      "prototype": "vector_get(t_vector *vector, size_t index)",
      "description": "No description available.",
      "parameters": [],
      "return_value": "Return value description not available.",
      "examples": [
        {
          "title": "Basic usage of vector_get",
          "code": "// Example usage of vector_get\n// TODO: Add real example",
          "output": null
        }
      ],
      "complexity": null,
      "notes": [],
      "see_also": [],
      "updated_at": null,
      "author_role": null,
      "related": [],
      "manual_path": null,
      "manual_html": null
    },
    "ft_add_prime_sum": {
      "name": "ft_add_prime_sum",
      "category": "math",
      "category_path": "math/algebra",
      "tags": [
        "basic"
      ],
      "prototype": "int\t\t\tft_add_prime_sum(int x)",
      "description": "Define M_PI if not already defined",
      "parameters": [],
      "return_value": "Return value description not available.",
      "examples": [
        {
          "title": "Basic usage of ft_add_prime_sum",
          "code": "// Example usage of ft_add_prime_sum\n// TODO: Add real example",
          "output": null
        }
      ],
      "complexity": null,
      "notes": [],
      "see_also": [],
      "updated_at": null,
      "author_role": null,
      "related": [],
      "manual_path": null,
      "manual_html": null
    },
    "vzero": {
      "name": "vzero",
      "category": "math",
      "category_path": "math/geometry/quaternion",
      "tags": [
        "basic"
      ],
      "prototype": "vzero(float *v)",
      "description": "No description available.",
      "parameters": [],
      "return_value": "Return value description not available.",
      "examples": [
        {
          "title": "Basic usage of vzero",
          "code": "// Example usage of vzero\n// TODO: Add real example",
          "output": null
        }
      ],
      "complexity": null,
      "notes": [],
      "see_also": [],
      "updated_at": null,
      "author_role": null,
      "related": [],
      "manual_path": null,
      "manual_html": null
    },
    "point_trackball": {
      "name": "point_trackball",
      "category": "math",
      "category_path": "math/geometry/quaternion",
      "tags": [
        "iteration",
        "basic"
      ],
      "prototype": "/* Function: point_trackball */",
      "description": "Apply 3x3 matrix transformation to a point",
      "parameters": [],
      "return_value": "Return value description not available.",
      "examples": [
        {
          "title": "Basic usage of point_trackball",
          "code": "// Example usage of point_trackball\n// TODO: Add real example",
          "output": null
        }
      ],
      "complexity": null,
      "notes": [],
      "see_also": [],
      "updated_at": null,
      "author_role": null,
      "related": [],
      "manual_path": null,
      "manual_html": null
    },
    "shadow": {
      "name": "shadow",
      "category": "math",
      "category_path": "math/geometry/effects",
      "tags": [
        "basic"
      ],
      "prototype": "/* Function: shadow */",
      "description": "No description available.",
      "parameters": [],
      "return_value": "Return value description not available.",
      "examples": [
        {
          "title": "Basic usage of shadow",
          "code": "// Example usage of shadow\n// TODO: Add real example",
          "output": null
        }
      ],
      "complexity": null,
      "notes": [],
      "see_also": [],
      "updated_at": null,
      "author_role": null,
      "related": [],
      "manual_path": null,
      "manual_html": null
    },
    "dll_pop_back": {
      "name": "dll_pop_back",
      "category": "data_structures",
      "category_path": "data_structures/doubly_linked_list",
      "tags": [
        "cleanup",
        "basic"
      ],
      "prototype": "dll_pop_back(t_doubly_list *list)",
      "description": "No description available.",
      "parameters": [],
      "return_value": "Return value description not available.",
      "examples": [
        {
          "title": "Basic usage of dll_pop_back",
          "code": "// Example usage of dll_pop_back\n// TODO: Add real example",
          "output": null
        }
      ],
      "complexity": null,
      "notes": [],
      "see_also": [],
      "updated_at": null,
      "author_role": null,
      "related": [],
      "manual_path": null,
      "manual_html": null
    },
    "ft_dll_find": {
      "name": "ft_dll_find",
      "category": "data_structures",
      "category_path": "data_structures/doubly_linked_list",
      "tags": [
        "basic"
      ],
      "prototype": "int\t\t\t\tft_dll_find(t_doubly_list *list, void *data)",
      "description": "Core functions",
      "parameters": [],
      "return_value": "Return value description not available.",
      "examples": [
        {
          "title": "Basic usage of ft_dll_find",
          "code": "// Example usage of ft_dll_find\n// TODO: Add real example",
          "output": null
        }
      ],
      "complexity": null,
      "notes": [],
      "see_also": [],
      "updated_at": null,
      "author_role": null,
      "related": [],
      "manual_path": null,
      "manual_html": null
    },
    "vector_remove": {
      "name": "vector_remove",
      "category": "data_structures",
      "category_path": "data_structures/vector",
      "tags": [
        "iteration",
        "basic"
      ],
      "prototype": "vector_remove(t_vector *vector, size_t index)",
      "description": "No description available.",
      "parameters": [],
      "return_value": "Return value description not available.",
      "examples": [
        {
          "title": "Basic usage of vector_remove",
          "code": "// Example usage of vector_remove\n// TODO: Add real example",
          "output": null
        }
      ],
      "complexity": null,
      "notes": [],
      "see_also": [],
      "updated_at": null,
      "author_role": null,
      "related": [],
      "manual_path": null,
      "manual_html": null
    },
    "get_next_line": {
      "name": "get_next_line",
      "category": "stdio",
      "category_path": "stdio/gnl",
      "tags": [
        "allocation",
        "cleanup",
        "iteration",
        "intermediate"
      ],
      "prototype": "get_next_line(int fd)",
      "description": "No description available.",
      "parameters": [],
      "return_value": "Return value description not available.",
      "examples": [
        {
          "title": "Basic usage of get_next_line",
          "code": "// Example usage of get_next_line\n// TODO: Add real example",
          "output": null
        }
      ],
      "complexity": null,
      "notes": [],
      "see_also": [],
      "updated_at": null,
      "author_role": null,
      "related": [],
      "manual_path": null,
      "manual_html": null
    },
    "vector_set": {
      "name": "vector_set",
      "category": "data_structures",
      "category_path": "data_structures/vector",
      "tags": [
        "basic"
      ],
      "prototype": "vector_set(t_vector *vector, size_t index, void *content)",
      "description": "No description available.",
      "parameters": [],
      "return_value": "Return value description not available.",
      "examples": [
        {
          "title": "Basic usage of vector_set",
          "code": "// Example usage of vector_set\n// TODO: Add real example",
          "output": null
        }
      ],
      "complexity": null,
      "notes": [],
      "see_also": [],
      "updated_at": null,
      "author_role": null,
      "related": [],
      "manual_path": null,
      "manual_html": null
    },
    "ft_log10": {
      "name": "ft_log10",
      "category": "stdio",
      "category_path": "stdio",
      "tags": [
        "iteration",
        "basic"
      ],
      "prototype": "ft_log10(int n)",
      "description": "No description available.",
      "parameters": [],
      "return_value": "Return value description not available.",
      "examples": [
        {
          "title": "Basic usage of ft_log10",
          "code": "// Example usage of ft_log10\n// TODO: Add real example",
          "output": null
        }
      ],
      "complexity": null,
      "notes": [],
      "see_also": [],
      "updated_at": null,
      "author_role": null,
      "related": [],
      "manual_path": null,
      "manual_html": null
    },
    "ft_strncmp": {
      "name": "ft_strncmp",
      "category": "strings",
      "category_path": "strings",
      "tags": [
        "string",
        "iteration",
        "basic"
      ],
      "prototype": "int\tft_strncmp(const char *s1, const char *s2, t_size n)\n{\n\twhile (n--)\n\t{\n\t\tif (*s1 != *s2)\n\t\t\treturn (*(unsigned char *)s1 - *(unsigned char *)s2)",
      "description": "#include \"TDD/test.h\"",
      "parameters": [],
      "return_value": "Return value description not available.",
      "examples": [
        {
          "title": "Basic usage of ft_strncmp",
          "code": "// Example usage of ft_strncmp\n// TODO: Add real example",
          "output": null
        }
      ],
      "complexity": null,
      "notes": [],
      "see_also": [],
      "updated_at": null,
      "author_role": null,
      "related": [],
      "manual_path": null,
      "manual_html": null
    },
    "ft_striteri": {
      "name": "ft_striteri",
      "category": "strings",
      "category_path": "strings",
      "tags": [
        "string",
        "iteration",
        "basic"
      ],
      "prototype": "ft_striteri(char *s, void (*f)(unsigned int, char *))",
      "description": "#include \"TDD/test.h\"",
      "parameters": [],
      "return_value": "Return value description not available.",
      "examples": [
        {
          "title": "Basic usage of ft_striteri",
          "code": "// Example usage of ft_striteri\n// TODO: Add real example",
          "output": null
        }
      ],
      "complexity": null,
      "notes": [],
      "see_also": [],
      "updated_at": null,
      "author_role": null,
      "related": [],
      "manual_path": null,
      "manual_html": null
    },
    "dll_pop_front": {
      "name": "dll_pop_front",
      "category": "data_structures",
      "category_path": "data_structures/doubly_linked_list",
      "tags": [
        "cleanup",
        "basic"
      ],
      "prototype": "dll_pop_front(t_doubly_list *list)",
      "description": "No description available.",
      "parameters": [],
      "return_value": "Return value description not available.",
      "examples": [
        {
          "title": "Basic usage of dll_pop_front",
          "code": "// Example usage of dll_pop_front\n// TODO: Add real example",
          "output": null
        }
      ],
      "complexity": null,
      "notes": [],
      "see_also": [],
      "updated_at": null,
      "author_role": null,
      "related": [],
      "manual_path": null,
      "manual_html": null
    },
    "ft_cl_set": {
      "name": "ft_cl_set",
      "category": "data_structures",
      "category_path": "data_structures/circular_linked_list",
      "tags": [
        "iteration",
        "basic"
      ],
      "prototype": "bool\t\t\tft_cl_set(t_circular_list *list, size_t index, void *data)",
      "description": "Points to last node (last->next is first)",
      "parameters": [],
      "return_value": "Return value description not available.",
      "examples": [
        {
          "title": "Basic usage of ft_cl_set",
          "code": "// Example usage of ft_cl_set\n// TODO: Add real example",
          "output": null
        }
      ],
      "complexity": null,
      "notes": [],
      "see_also": [],
      "updated_at": null,
      "author_role": null,
      "related": [],
      "manual_path": null,
      "manual_html": null
    },
    "vector_size": {
      "name": "vector_size",
      "category": "data_structures",
      "category_path": "data_structures/vector",
      "tags": [
        "basic"
      ],
      "prototype": "vector_size(t_vector *vector)",
      "description": "No description available.",
      "parameters": [],
      "return_value": "Return value description not available.",
      "examples": [
        {
          "title": "Basic usage of vector_size",
          "code": "// Example usage of vector_size\n// TODO: Add real example",
          "output": null
        }
      ],
      "complexity": null,
      "notes": [],
      "see_also": [],
      "updated_at": null,
      "author_role": null,
      "related": [],
      "manual_path": null,
      "manual_html": null
    },
    "ft_banner": {
      "name": "ft_banner",
      "category": "render",
      "category_path": "render",
      "tags": [
        "iteration",
        "basic"
      ],
      "prototype": "/* Function: ft_banner */",
      "description": "No description available.",
      "parameters": [],
      "return_value": "Return value description not available.",
      "examples": [
        {
          "title": "Basic usage of ft_banner",
          "code": "// Example usage of ft_banner\n// TODO: Add real example",
          "output": null
        }
      ],
      "complexity": null,
      "notes": [],
      "see_also": [],
      "updated_at": null,
      "author_role": null,
      "related": [],
      "manual_path": null,
      "manual_html": null
    },
    "ft_move_cursor": {
      "name": "ft_move_cursor",
      "category": "render",
      "category_path": "render",
      "tags": [
        "basic"
      ],
      "prototype": "void\tft_move_cursor(int x, int y)",
      "description": "No description available.",
      "parameters": [],
      "return_value": "Return value description not available.",
      "examples": [
        {
          "title": "Basic usage of ft_move_cursor",
          "code": "// Example usage of ft_move_cursor\n// TODO: Add real example",
          "output": null
        }
      ],
      "complexity": null,
      "notes": [],
      "see_also": [],
      "updated_at": null,
      "author_role": null,
      "related": [],
      "manual_path": null,
      "manual_html": null
    },
    "dll_create": {
      "name": "dll_create",
      "category": "data_structures",
      "category_path": "data_structures/doubly_linked_list",
      "tags": [
        "allocation",
        "intermediate"
      ],
      "prototype": "dll_create(void)",
      "description": "No description available.",
      "parameters": [],
      "return_value": "Return value description not available.",
      "examples": [
        {
          "title": "Basic usage of dll_create",
          "code": "// Example usage of dll_create\n// TODO: Add real example",
          "output": null
        }
      ],
      "complexity": null,
      "notes": [],
      "see_also": [],
      "updated_at": null,
      "author_role": null,
      "related": [],
      "manual_path": null,
      "manual_html": null
    },
    "ft_lstadd_front": {
      "name": "ft_lstadd_front",
      "category": "data_structures",
      "category_path": "data_structures/lists",
      "tags": [
        "iteration",
        "basic"
      ],
      "prototype": "void\tft_lstadd_front(t_list **lst, t_list *new)",
      "description": "Add the prototype for ft_lstnew",
      "parameters": [],
      "return_value": "Return value description not available.",
      "examples": [
        {
          "title": "Basic usage of ft_lstadd_front",
          "code": "// Example usage of ft_lstadd_front\n// TODO: Add real example",
          "output": null
        }
      ],
      "complexity": null,
      "notes": [],
      "see_also": [],
      "updated_at": null,
      "author_role": null,
      "related": [],
      "manual_path": null,
      "manual_html": null
    },
    "ft_print_centered": {
      "name": "ft_print_centered",
      "category": "render",
      "category_path": "render",
      "tags": [
        "basic"
      ],
      "prototype": "void\tft_print_centered(const char *text)",
      "description": "No description available.",
      "parameters": [],
      "return_value": "Return value description not available.",
      "examples": [
        {
          "title": "Basic usage of ft_print_centered",
          "code": "// Example usage of ft_print_centered\n// TODO: Add real example",
          "output": null
        }
      ],
      "complexity": null,
      "notes": [],
      "see_also": [],
      "updated_at": null,
      "author_role": null,
      "related": [],
      "manual_path": null,
      "manual_html": null
    },
    "greedy_sort": {
      "name": "greedy_sort",
      "category": "sort",
      "category_path": "sort",
      "tags": [
        "cleanup",
        "iteration",
        "basic"
      ],
      "prototype": "greedy_sort(arr, size)",
      "description": "No description available.",
      "parameters": [],
      "return_value": "Return value description not available.",
      "examples": [
        {
          "title": "Basic usage of greedy_sort",
          "code": "// Example usage of greedy_sort\n// TODO: Add real example",
          "output": null
        }
      ],
      "complexity": null,
      "notes": [],
      "see_also": [],
      "updated_at": null,
      "author_role": null,
      "related": [],
      "manual_path": null,
      "manual_html": null
    },
    "hybrid2": {
      "name": "hybrid2",
      "category": "sort",
      "category_path": "sort",
      "tags": [
        "allocation",
        "cleanup",
        "iteration",
        "intermediate"
      ],
      "prototype": "/* Function: hybrid2 */",
      "description": "No description available.",
      "parameters": [],
      "return_value": "Return value description not available.",
      "examples": [
        {
          "title": "Basic usage of hybrid2",
          "code": "// Example usage of hybrid2\n// TODO: Add real example",
          "output": null
        }
      ],
      "complexity": null,
      "notes": [],
      "see_also": [],
      "updated_at": null,
      "author_role": null,
      "related": [],
      "manual_path": null,
      "manual_html": null
    },
    "ft_power": {
      "name": "ft_power",
      "category": "math",
      "category_path": "math/algebra",
      "tags": [
        "basic"
      ],
      "prototype": "int\t\t\tft_power(int base, int exp)",
      "description": "Define M_PI if not already defined",
      "parameters": [],
      "return_value": "Return value description not available.",
      "examples": [
        {
          "title": "Basic usage of ft_power",
          "code": "// Example usage of ft_power\n// TODO: Add real example",
          "output": null
        }
      ],
      "complexity": null,
      "notes": [],
      "see_also": [],
      "updated_at": null,
      "author_role": null,
      "related": [],
      "manual_path": null,
      "manual_html": null
    },
    "draw_line": {
      "name": "draw_line",
      "category": "math",
      "category_path": "math/geometry/draw",
      "tags": [
        "basic"
      ],
      "prototype": "/* Function: draw_line */",
      "description": "No description available.",
      "parameters": [],
      "return_value": "Return value description not available.",
      "examples": [
        {
          "title": "Basic usage of draw_line",
          "code": "// Example usage of draw_line\n// TODO: Add real example",
          "output": null
        }
      ],
      "complexity": null,
      "notes": [],
      "see_also": [],
      "updated_at": null,
      "author_role": null,
      "related": [],
      "manual_path": null,
      "manual_html": null
    },
    "matrix_rotate": {
      "name": "matrix_rotate",
      "category": "math",
      "category_path": "math/geometry/matrices",
      "tags": [
        "basic"
      ],
      "prototype": "matrix_rotate(t_mat4 *out, float angle_rad, t_fpoint3 axis)",
      "description": "No description available.",
      "parameters": [],
      "return_value": "Return value description not available.",
      "examples": [
        {
          "title": "Basic usage of matrix_rotate",
          "code": "// Example usage of matrix_rotate\n// TODO: Add real example",
          "output": null
        }
      ],
      "complexity": null,
      "notes": [],
      "see_also": [],
      "updated_at": null,
      "author_role": null,
      "related": [],
      "manual_path": null,
      "manual_html": null
    },
    "ft_vector_is_empty": {
      "name": "ft_vector_is_empty",
      "category": "data_structures",
      "category_path": "data_structures/vector",
      "tags": [
        "basic"
      ],
      "prototype": "bool\t\tft_vector_is_empty(t_vector *vector)",
      "description": "Utility functions",
      "parameters": [],
      "return_value": "Return value description not available.",
      "examples": [
        {
          "title": "Basic usage of ft_vector_is_empty",
          "code": "// Example usage of ft_vector_is_empty\n// TODO: Add real example",
          "output": null
        }
      ],
      "complexity": null,
      "notes": [],
      "see_also": [],
      "updated_at": null,
      "author_role": null,
      "related": [],
      "manual_path": null,
      "manual_html": null
    },
    "cl_print": {
      "name": "cl_print",
      "category": "data_structures",
      "category_path": "data_structures/circular_linked_list",
      "tags": [
        "iteration",
        "basic"
      ],
      "prototype": "/* Function: cl_print */",
      "description": "No description available.",
      "parameters": [],
      "return_value": "Return value description not available.",
      "examples": [
        {
          "title": "Basic usage of cl_print",
          "code": "// Example usage of cl_print\n// TODO: Add real example",
          "output": null
        }
      ],
      "complexity": null,
      "notes": [],
      "see_also": [],
      "updated_at": null,
      "author_role": null,
      "related": [],
      "manual_path": null,
      "manual_html": null
    },
    "ft_lstiter": {
      "name": "ft_lstiter",
      "category": "data_structures",
      "category_path": "data_structures/lists",
      "tags": [
        "iteration",
        "basic"
      ],
      "prototype": "ft_lstiter(t_list *lst, void (*f)(void *))",
      "description": "#include \"TDD/test.h\"",
      "parameters": [],
      "return_value": "Return value description not available.",
      "examples": [
        {
          "title": "Basic usage of ft_lstiter",
          "code": "// Example usage of ft_lstiter\n// TODO: Add real example",
          "output": null
        }
      ],
      "complexity": null,
      "notes": [],
      "see_also": [],
      "updated_at": null,
      "author_role": null,
      "related": [],
      "manual_path": null,
      "manual_html": null
    },
    "ft_vector_create": {
      "name": "ft_vector_create",
      "category": "data_structures",
      "category_path": "data_structures/vector",
      "tags": [
        "vector",
        "allocation",
        "intermediate"
      ],
      "prototype": "t_vector *ft_vector_create(void)",
      "description": "Create a new dynamic vector with initial capacity.",
      "parameters": [],
      "return_value": "Pointer to a new vector, or NULL on allocation failure.",
      "examples": [
        {
          "title": "Create a vector",
          "code": "#include \"ft_vector.h\"\\nint main(void){ t_vector *v = ft_vector_create(); /* ... */ }",
          "output": null
        }
      ],
      "complexity": "O(1)",
      "notes": [
        "Initial capacity is implementation-defined."
      ],
      "see_also": [
        "ft_vector_destroy",
        "ft_vector_add_back"
      ],
      "updated_at": "2025-09-03",
      "author_role": "contributor",
      "related": [
        "ft_vector_add_back",
        "ft_vector_resize"
      ],
      "manual_path": "../manpages/ft_vector_create.md",
      "manual_html": "<h1>ft_vector_create</h1>\n<p>Allocates and initializes an empty vector.</p>\n<h2>Synopsis</h2>\n<pre><code class=\"language-c\">t_vector *ft_vector_create(void);\n</code></pre>\n<h2>Description</h2>\n<p>Creates an empty vector with an initial capacity. The vector stores <code>void*</code> elements and grows as needed.</p>\n<h2>Return Value</h2>\n<p>A pointer to an allocated <code>t_vector</code> or <code>NULL</code> if allocation fails.</p>\n"
    },
    "trackball": {
      "name": "trackball",
      "category": "math",
      "category_path": "math/geometry/quaternion",
      "tags": [
        "basic"
      ],
      "prototype": "trackball (sphere or hyperbolic sheet).\n*/\nfloat\ttb_project_to_sphere(float r, t_fpoint2 p)",
      "description": "No description available.",
      "parameters": [],
      "return_value": "Return value description not available.",
      "examples": [
        {
          "title": "Basic usage of trackball",
          "code": "// Example usage of trackball\n// TODO: Add real example",
          "output": null
        }
      ],
      "complexity": null,
      "notes": [],
      "see_also": [],
      "updated_at": null,
      "author_role": null,
      "related": [],
      "manual_path": null,
      "manual_html": null
    },
    "scheme_menu": {
      "name": "scheme_menu",
      "category": "classes",
      "category_path": "classes/render/interface",
      "tags": [
        "basic"
      ],
      "prototype": "/* Function: scheme_menu */",
      "description": "// COLORSCHEME ////\");",
      "parameters": [],
      "return_value": "Return value description not available.",
      "examples": [
        {
          "title": "Basic usage of scheme_menu",
          "code": "// Example usage of scheme_menu\n// TODO: Add real example",
          "output": null
        }
      ],
      "complexity": null,
      "notes": [],
      "see_also": [],
      "updated_at": null,
      "author_role": null,
      "related": [],
      "manual_path": null,
      "manual_html": null
    },
    "ft_cl_is_empty": {
      "name": "ft_cl_is_empty",
      "category": "data_structures",
      "category_path": "data_structures/circular_linked_list",
      "tags": [
        "iteration",
        "basic"
      ],
      "prototype": "bool\t\t\tft_cl_is_empty(t_circular_list *list)",
      "description": "Points to last node (last->next is first)",
      "parameters": [],
      "return_value": "Return value description not available.",
      "examples": [
        {
          "title": "Basic usage of ft_cl_is_empty",
          "code": "// Example usage of ft_cl_is_empty\n// TODO: Add real example",
          "output": null
        }
      ],
      "complexity": null,
      "notes": [],
      "see_also": [],
      "updated_at": null,
      "author_role": null,
      "related": [],
      "manual_path": null,
      "manual_html": null
    },
    "lerp_point": {
      "name": "lerp_point",
      "category": "math",
      "category_path": "math/geometry/draw",
      "tags": [
        "basic"
      ],
      "prototype": "void\tlerp_point(t_point *result, const t_point *a, const t_point *b, float t)\n{\n\tresult->axis[X] = lerp(a->axis[X], b->axis[X], t)",
      "description": "Interpolate between two points",
      "parameters": [],
      "return_value": "Return value description not available.",
      "examples": [
        {
          "title": "Basic usage of lerp_point",
          "code": "// Example usage of lerp_point\n// TODO: Add real example",
          "output": null
        }
      ],
      "complexity": null,
      "notes": [],
      "see_also": [],
      "updated_at": null,
      "author_role": null,
      "related": [],
      "manual_path": null,
      "manual_html": null
    },
    "vector_add_back": {
      "name": "vector_add_back",
      "category": "data_structures",
      "category_path": "data_structures/vector",
      "tags": [
        "basic"
      ],
      "prototype": "vector_add_back(t_vector *vector, void *element)",
      "description": "No description available.",
      "parameters": [],
      "return_value": "Return value description not available.",
      "examples": [
        {
          "title": "Basic usage of vector_add_back",
          "code": "// Example usage of vector_add_back\n// TODO: Add real example",
          "output": null
        }
      ],
      "complexity": null,
      "notes": [],
      "see_also": [],
      "updated_at": null,
      "author_role": null,
      "related": [],
      "manual_path": null,
      "manual_html": null
    },
    "ft_max": {
      "name": "ft_max",
      "category": "math",
      "category_path": "math/algebra",
      "tags": [
        "basic"
      ],
      "prototype": "int\t\t\tft_max(int a, int b)",
      "description": "Define M_PI if not already defined",
      "parameters": [],
      "return_value": "Return value description not available.",
      "examples": [
        {
          "title": "Basic usage of ft_max",
          "code": "// Example usage of ft_max\n// TODO: Add real example",
          "output": null
        }
      ],
      "complexity": null,
      "notes": [],
      "see_also": [],
      "updated_at": null,
      "author_role": null,
      "related": [],
      "manual_path": null,
      "manual_html": null
    },
    "ft_print_list": {
      "name": "ft_print_list",
      "category": "debug",
      "category_path": "debug",
      "tags": [
        "linked_list",
        "iteration",
        "basic"
      ],
      "prototype": "ft_print_list(t_list *list)",
      "description": "void print_list(t_ps *)",
      "parameters": [],
      "return_value": "Return value description not available.",
      "examples": [
        {
          "title": "Basic usage of ft_print_list",
          "code": "// Example usage of ft_print_list\n// TODO: Add real example",
          "output": null
        }
      ],
      "complexity": null,
      "notes": [],
      "see_also": [],
      "updated_at": null,
      "author_role": null,
      "related": [],
      "manual_path": null,
      "manual_html": null
    },
    "decimal": {
      "name": "decimal",
      "category": "stdio",
      "category_path": "stdio/ft_scanf/parse_format",
      "tags": [
        "iteration",
        "basic"
      ],
      "prototype": "decimal(t_scanf_data *data, va_list args)",
      "description": "No description available.",
      "parameters": [],
      "return_value": "Return value description not available.",
      "examples": [
        {
          "title": "Basic usage of decimal",
          "code": "// Example usage of decimal\n// TODO: Add real example",
          "output": null
        }
      ],
      "complexity": null,
      "notes": [],
      "see_also": [],
      "updated_at": null,
      "author_role": null,
      "related": [],
      "manual_path": null,
      "manual_html": null
    },
    "tree": {
      "name": "tree",
      "category": "sort",
      "category_path": "sort",
      "tags": [
        "iteration",
        "basic"
      ],
      "prototype": "/* Function: tree */",
      "description": "No description available.",
      "parameters": [],
      "return_value": "Return value description not available.",
      "examples": [
        {
          "title": "Basic usage of tree",
          "code": "// Example usage of tree\n// TODO: Add real example",
          "output": null
        }
      ],
      "complexity": null,
      "notes": [],
      "see_also": [],
      "updated_at": null,
      "author_role": null,
      "related": [],
      "manual_path": null,
      "manual_html": null
    },
    "ft_strnjoin": {
      "name": "ft_strnjoin",
      "category": "strings",
      "category_path": "strings",
      "tags": [
        "string",
        "allocation",
        "iteration",
        "intermediate"
      ],
      "prototype": "ft_strnjoin(const char *first, ...)",
      "description": "Helper function to compute the total length of all strings",
      "parameters": [],
      "return_value": "Return value description not available.",
      "examples": [
        {
          "title": "Basic usage of ft_strnjoin",
          "code": "// Example usage of ft_strnjoin\n// TODO: Add real example",
          "output": null
        }
      ],
      "complexity": null,
      "notes": [],
      "see_also": [],
      "updated_at": null,
      "author_role": null,
      "related": [],
      "manual_path": null,
      "manual_html": null
    },
    "ft_split": {
      "name": "ft_split",
      "category": "strings",
      "category_path": "strings",
      "tags": [
        "allocation",
        "cleanup",
        "iteration",
        "intermediate"
      ],
      "prototype": "ft_split(char const *s, char c)",
      "description": "#include \"TDD/test.h\"",
      "parameters": [],
      "return_value": "Return value description not available.",
      "examples": [
        {
          "title": "Basic usage of ft_split",
          "code": "// Example usage of ft_split\n// TODO: Add real example",
          "output": null
        }
      ],
      "complexity": null,
      "notes": [],
      "see_also": [],
      "updated_at": null,
      "author_role": null,
      "related": [],
      "manual_path": null,
      "manual_html": null
    },
    "ft_dbl_free": {
      "name": "ft_dbl_free",
      "category": "stdlib",
      "category_path": "stdlib",
      "tags": [
        "cleanup",
        "iteration",
        "basic"
      ],
      "prototype": "/* Function: ft_dbl_free */",
      "description": "No description available.",
      "parameters": [],
      "return_value": "Return value description not available.",
      "examples": [
        {
          "title": "Basic usage of ft_dbl_free",
          "code": "// Example usage of ft_dbl_free\n// TODO: Add real example",
          "output": null
        }
      ],
      "complexity": null,
      "notes": [],
      "see_also": [],
      "updated_at": null,
      "author_role": null,
      "related": [],
      "manual_path": null,
      "manual_html": null
    },
    "ft_selection_sort": {
      "name": "ft_selection_sort",
      "category": "sort",
      "category_path": "sort",
      "tags": [
        "basic"
      ],
      "prototype": "void\tft_selection_sort(int *arr, int n)",
      "description": "Wrapper functions",
      "parameters": [],
      "return_value": "Return value description not available.",
      "examples": [
        {
          "title": "Basic usage of ft_selection_sort",
          "code": "// Example usage of ft_selection_sort\n// TODO: Add real example",
          "output": null
        }
      ],
      "complexity": null,
      "notes": [],
      "see_also": [],
      "updated_at": null,
      "author_role": null,
      "related": [],
      "manual_path": null,
      "manual_html": null
    },
    "queue_rear": {
      "name": "queue_rear",
      "category": "data_structures",
      "category_path": "data_structures/queue",
      "tags": [
        "basic"
      ],
      "prototype": "queue_rear(t_queue *queue)",
      "description": "No description available.",
      "parameters": [],
      "return_value": "Return value description not available.",
      "examples": [
        {
          "title": "Basic usage of queue_rear",
          "code": "// Example usage of queue_rear\n// TODO: Add real example",
          "output": null
        }
      ],
      "complexity": null,
      "notes": [],
      "see_also": [],
      "updated_at": null,
      "author_role": null,
      "related": [],
      "manual_path": null,
      "manual_html": null
    },
    "chunk_sort": {
      "name": "chunk_sort",
      "category": "sort",
      "category_path": "sort",
      "tags": [
        "allocation",
        "cleanup",
        "iteration",
        "intermediate"
      ],
      "prototype": "chunk_sort(int *arr, int size)",
      "description": "int main(void)",
      "parameters": [],
      "return_value": "Return value description not available.",
      "examples": [
        {
          "title": "Basic usage of chunk_sort",
          "code": "// Example usage of chunk_sort\n// TODO: Add real example",
          "output": null
        }
      ],
      "complexity": null,
      "notes": [],
      "see_also": [],
      "updated_at": null,
      "author_role": null,
      "related": [],
      "manual_path": null,
      "manual_html": null
    },
    "ft_lerp": {
      "name": "ft_lerp",
      "category": "math",
      "category_path": "math/algebra",
      "tags": [
        "basic"
      ],
      "prototype": "/* Function: ft_lerp */",
      "description": "No description available.",
      "parameters": [],
      "return_value": "Return value description not available.",
      "examples": [
        {
          "title": "Basic usage of ft_lerp",
          "code": "// Example usage of ft_lerp\n// TODO: Add real example",
          "output": null
        }
      ],
      "complexity": null,
      "notes": [],
      "see_also": [],
      "updated_at": null,
      "author_role": null,
      "related": [],
      "manual_path": null,
      "manual_html": null
    },
    "ft_fscanf_fd": {
      "name": "ft_fscanf_fd",
      "category": "stdio",
      "category_path": "stdio/ft_scanf",
      "tags": [
        "input",
        "iteration",
        "basic"
      ],
      "prototype": "int         ft_fscanf_fd(int fd, const char *format, ...)",
      "description": "No description available.",
      "parameters": [],
      "return_value": "Return value description not available.",
      "examples": [
        {
          "title": "Basic usage of ft_fscanf_fd",
          "code": "// Example usage of ft_fscanf_fd\n// TODO: Add real example",
          "output": null
        }
      ],
      "complexity": null,
      "notes": [],
      "see_also": [],
      "updated_at": null,
      "author_role": null,
      "related": [],
      "manual_path": null,
      "manual_html": null
    },
    "ft_hcf": {
      "name": "ft_hcf",
      "category": "math",
      "category_path": "math/algebra",
      "tags": [
        "basic"
      ],
      "prototype": "int\t\t\tft_hcf(int x, int y)",
      "description": "Define M_PI if not already defined",
      "parameters": [],
      "return_value": "Return value description not available.",
      "examples": [
        {
          "title": "Basic usage of ft_hcf",
          "code": "// Example usage of ft_hcf\n// TODO: Add real example",
          "output": null
        }
      ],
      "complexity": null,
      "notes": [],
      "see_also": [],
      "updated_at": null,
      "author_role": null,
      "related": [],
      "manual_path": null,
      "manual_html": null
    },
    "ft_print_menu": {
      "name": "ft_print_menu",
      "category": "render",
      "category_path": "render",
      "tags": [
        "basic"
      ],
      "prototype": "void\tft_print_menu(char **options, int count, int selected)",
      "description": "No description available.",
      "parameters": [],
      "return_value": "Return value description not available.",
      "examples": [
        {
          "title": "Basic usage of ft_print_menu",
          "code": "// Example usage of ft_print_menu\n// TODO: Add real example",
          "output": null
        }
      ],
      "complexity": null,
      "notes": [],
      "see_also": [],
      "updated_at": null,
      "author_role": null,
      "related": [],
      "manual_path": null,
      "manual_html": null
    },
    "ft_vector_size": {
      "name": "ft_vector_size",
      "category": "data_structures",
      "category_path": "data_structures/vector",
      "tags": [
        "basic"
      ],
      "prototype": "size_t\t\tft_vector_size(t_vector *vector)",
      "description": "Utility functions",
      "parameters": [],
      "return_value": "Return value description not available.",
      "examples": [
        {
          "title": "Basic usage of ft_vector_size",
          "code": "// Example usage of ft_vector_size\n// TODO: Add real example",
          "output": null
        }
      ],
      "complexity": null,
      "notes": [],
      "see_also": [],
      "updated_at": null,
      "author_role": null,
      "related": [],
      "manual_path": null,
      "manual_html": null
    },
    "ft_print_memory": {
      "name": "ft_print_memory",
      "category": "debug",
      "category_path": "debug",
      "tags": [
        "iteration",
        "basic"
      ],
      "prototype": "ft_print_memory(\"Hello, World!\", 13) prints:\n * @note 48 65 6c 6c 6f 2c 20 57 6f 72 6c 64 21\n * @note EXAMPLE: ft_print_memory(\"Hello, World!\", 5) prints:\n * @note 48 65 6c 6c 6f\n * @note EXAMPLE: ft_print_memory(\"Hello, World!\", 0) prints:\n */\nvoid\t*ft_print_memory(void *addr, unsigned int size)",
      "description": "#include <stdio.h>",
      "parameters": [],
      "return_value": "Return value description not available.",
      "examples": [
        {
          "title": "Basic usage of ft_print_memory",
          "code": "// Example usage of ft_print_memory\n// TODO: Add real example",
          "output": null
        }
      ],
      "complexity": null,
      "notes": [],
      "see_also": [],
      "updated_at": null,
      "author_role": null,
      "related": [],
      "manual_path": null,
      "manual_html": null
    },
    "shell_sort": {
      "name": "shell_sort",
      "category": "sort",
      "category_path": "sort",
      "tags": [
        "iteration",
        "basic"
      ],
      "prototype": "shell_sort(int *arr, int size)",
      "description": "No description available.",
      "parameters": [],
      "return_value": "Return value description not available.",
      "examples": [
        {
          "title": "Basic usage of shell_sort",
          "code": "// Example usage of shell_sort\n// TODO: Add real example",
          "output": null
        }
      ],
      "complexity": null,
      "notes": [],
      "see_also": [],
      "updated_at": null,
      "author_role": null,
      "related": [],
      "manual_path": null,
      "manual_html": null
    },
    "ft_vector_binary_search": {
      "name": "ft_vector_binary_search",
      "category": "data_structures",
      "category_path": "data_structures/vector",
      "tags": [
        "basic"
      ],
      "prototype": "int\t\t\tft_vector_binary_search(t_vector *vector, void *target,\n\t\t\t\tint (*cmp)(const void *, const void *))",
      "description": "Utility functions",
      "parameters": [],
      "return_value": "Return value description not available.",
      "examples": [
        {
          "title": "Basic usage of ft_vector_binary_search",
          "code": "// Example usage of ft_vector_binary_search\n// TODO: Add real example",
          "output": null
        }
      ],
      "complexity": null,
      "notes": [],
      "see_also": [],
      "updated_at": null,
      "author_role": null,
      "related": [],
      "manual_path": null,
      "manual_html": null
    },
    "input_handler_events": {
      "name": "input_handler_events",
      "category": "classes",
      "category_path": "classes/render/event",
      "tags": [
        "basic"
      ],
      "prototype": "/* Function: input_handler_events */",
      "description": "No description available.",
      "parameters": [],
      "return_value": "Return value description not available.",
      "examples": [
        {
          "title": "Basic usage of input_handler_events",
          "code": "// Example usage of input_handler_events\n// TODO: Add real example",
          "output": null
        }
      ],
      "complexity": null,
      "notes": [],
      "see_also": [],
      "updated_at": null,
      "author_role": null,
      "related": [],
      "manual_path": null,
      "manual_html": null
    },
    "tree_path": {
      "name": "tree_path",
      "category": "backtrack",
      "category_path": "backtrack",
      "tags": [
        "allocation",
        "cleanup",
        "iteration",
        "intermediate"
      ],
      "prototype": "/* Function: tree_path */",
      "description": "// Utility to create a new tree node",
      "parameters": [],
      "return_value": "Return value description not available.",
      "examples": [
        {
          "title": "Basic usage of tree_path",
          "code": "// Example usage of tree_path\n// TODO: Add real example",
          "output": null
        }
      ],
      "complexity": null,
      "notes": [],
      "see_also": [],
      "updated_at": null,
      "author_role": null,
      "related": [],
      "manual_path": null,
      "manual_html": null
    },
    "quat_to_matrix4": {
      "name": "quat_to_matrix4",
      "category": "math",
      "category_path": "math/geometry/quaternion",
      "tags": [
        "basic"
      ],
      "prototype": "/* Function: quat_to_matrix4 */",
      "description": "Convert quaternion to 4x4 matrix",
      "parameters": [],
      "return_value": "Return value description not available.",
      "examples": [
        {
          "title": "Basic usage of quat_to_matrix4",
          "code": "// Example usage of quat_to_matrix4\n// TODO: Add real example",
          "output": null
        }
      ],
      "complexity": null,
      "notes": [],
      "see_also": [],
      "updated_at": null,
      "author_role": null,
      "related": [],
      "manual_path": null,
      "manual_html": null
    },
    "ft_dll_print_reverse": {
      "name": "ft_dll_print_reverse",
      "category": "data_structures",
      "category_path": "data_structures/doubly_linked_list",
      "tags": [
        "basic"
      ],
      "prototype": "void\t\t\tft_dll_print_reverse(t_doubly_list *list)",
      "description": "Core functions",
      "parameters": [],
      "return_value": "Return value description not available.",
      "examples": [
        {
          "title": "Basic usage of ft_dll_print_reverse",
          "code": "// Example usage of ft_dll_print_reverse\n// TODO: Add real example",
          "output": null
        }
      ],
      "complexity": null,
      "notes": [],
      "see_also": [],
      "updated_at": null,
      "author_role": null,
      "related": [],
      "manual_path": null,
      "manual_html": null
    },
    "ft_dll_insert": {
      "name": "ft_dll_insert",
      "category": "data_structures",
      "category_path": "data_structures/doubly_linked_list",
      "tags": [
        "basic"
      ],
      "prototype": "bool\t\t\tft_dll_insert(t_doubly_list *list, size_t index, void *data)",
      "description": "Core functions",
      "parameters": [],
      "return_value": "Return value description not available.",
      "examples": [
        {
          "title": "Basic usage of ft_dll_insert",
          "code": "// Example usage of ft_dll_insert\n// TODO: Add real example",
          "output": null
        }
      ],
      "complexity": null,
      "notes": [],
      "see_also": [],
      "updated_at": null,
      "author_role": null,
      "related": [],
      "manual_path": null,
      "manual_html": null
    },
    "ft_is_prime": {
      "name": "ft_is_prime",
      "category": "math",
      "category_path": "math/algebra",
      "tags": [
        "validation",
        "basic"
      ],
      "prototype": "int\t\t\tft_is_prime(int x)",
      "description": "Define M_PI if not already defined",
      "parameters": [],
      "return_value": "Return value description not available.",
      "examples": [
        {
          "title": "Basic usage of ft_is_prime",
          "code": "// Example usage of ft_is_prime\n// TODO: Add real example",
          "output": null
        }
      ],
      "complexity": null,
      "notes": [],
      "see_also": [],
      "updated_at": null,
      "author_role": null,
      "related": [],
      "manual_path": null,
      "manual_html": null
    },
    "dll_destroy": {
      "name": "dll_destroy",
      "category": "data_structures",
      "category_path": "data_structures/doubly_linked_list",
      "tags": [
        "cleanup",
        "basic"
      ],
      "prototype": "dll_destroy(t_doubly_list *list)",
      "description": "No description available.",
      "parameters": [],
      "return_value": "Return value description not available.",
      "examples": [
        {
          "title": "Basic usage of dll_destroy",
          "code": "// Example usage of dll_destroy\n// TODO: Add real example",
          "output": null
        }
      ],
      "complexity": null,
      "notes": [],
      "see_also": [],
      "updated_at": null,
      "author_role": null,
      "related": [],
      "manual_path": null,
      "manual_html": null
    },
    "add_quats": {
      "name": "add_quats",
      "category": "math",
      "category_path": "math/geometry/quaternion",
      "tags": [
        "basic"
      ],
      "prototype": "add_quats(float q1[4], float q2[4], float dest[4])",
      "description": "No description available.",
      "parameters": [],
      "return_value": "Return value description not available.",
      "examples": [
        {
          "title": "Basic usage of add_quats",
          "code": "// Example usage of add_quats\n// TODO: Add real example",
          "output": null
        }
      ],
      "complexity": null,
      "notes": [],
      "see_also": [],
      "updated_at": null,
      "author_role": null,
      "related": [],
      "manual_path": null,
      "manual_html": null
    },
    "ft_print_notification": {
      "name": "ft_print_notification",
      "category": "render",
      "category_path": "render",
      "tags": [
        "basic"
      ],
      "prototype": "void\tft_print_notification(const char *title, const char *message,\n\t\t\tconst char *type)",
      "description": "No description available.",
      "parameters": [],
      "return_value": "Return value description not available.",
      "examples": [
        {
          "title": "Basic usage of ft_print_notification",
          "code": "// Example usage of ft_print_notification\n// TODO: Add real example",
          "output": null
        }
      ],
      "complexity": null,
      "notes": [],
      "see_also": [],
      "updated_at": null,
      "author_role": null,
      "related": [],
      "manual_path": null,
      "manual_html": null
    },
    "helper_super_trim": {
      "name": "helper_super_trim",
      "category": "strings",
      "category_path": "strings",
      "tags": [
        "iteration",
        "basic"
      ],
      "prototype": "/* Function: helper_super_trim */",
      "description": "No description available.",
      "parameters": [],
      "return_value": "Return value description not available.",
      "examples": [
        {
          "title": "Basic usage of helper_super_trim",
          "code": "// Example usage of helper_super_trim\n// TODO: Add real example",
          "output": null
        }
      ],
      "complexity": null,
      "notes": [],
      "see_also": [],
      "updated_at": null,
      "author_role": null,
      "related": [],
      "manual_path": null,
      "manual_html": null
    },
    "quat_init": {
      "name": "quat_init",
      "category": "math",
      "category_path": "math/geometry/quaternion",
      "tags": [
        "basic"
      ],
      "prototype": "** Usage: quat_init(&q, x, y, z, w)",
      "description": "No description available.",
      "parameters": [],
      "return_value": "Return value description not available.",
      "examples": [
        {
          "title": "Basic usage of quat_init",
          "code": "// Example usage of quat_init\n// TODO: Add real example",
          "output": null
        }
      ],
      "complexity": null,
      "notes": [],
      "see_also": [],
      "updated_at": null,
      "author_role": null,
      "related": [],
      "manual_path": null,
      "manual_html": null
    },
    "parser_parse_format_string": {
      "name": "parser_parse_format_string",
      "category": "stdio",
      "category_path": "stdio/ft_printf/src",
      "tags": [
        "iteration",
        "basic"
      ],
      "prototype": "/* Function: parser_parse_format_string */",
      "description": "No description available.",
      "parameters": [],
      "return_value": "Return value description not available.",
      "examples": [
        {
          "title": "Basic usage of parser_parse_format_string",
          "code": "// Example usage of parser_parse_format_string\n// TODO: Add real example",
          "output": null
        }
      ],
      "complexity": null,
      "notes": [],
      "see_also": [],
      "updated_at": null,
      "author_role": null,
      "related": [],
      "manual_path": null,
      "manual_html": null
    },
    "vector_print": {
      "name": "vector_print",
      "category": "data_structures",
      "category_path": "data_structures/vector",
      "tags": [
        "iteration",
        "basic"
      ],
      "prototype": "/* Function: vector_print */",
      "description": "No description available.",
      "parameters": [],
      "return_value": "Return value description not available.",
      "examples": [
        {
          "title": "Basic usage of vector_print",
          "code": "// Example usage of vector_print\n// TODO: Add real example",
          "output": null
        }
      ],
      "complexity": null,
      "notes": [],
      "see_also": [],
      "updated_at": null,
      "author_role": null,
      "related": [],
      "manual_path": null,
      "manual_html": null
    },
    "queue_enqueue": {
      "name": "queue_enqueue",
      "category": "data_structures",
      "category_path": "data_structures/queue",
      "tags": [
        "allocation",
        "intermediate"
      ],
      "prototype": "queue_enqueue(t_queue *queue, void *data)",
      "description": "No description available.",
      "parameters": [],
      "return_value": "Return value description not available.",
      "examples": [
        {
          "title": "Basic usage of queue_enqueue",
          "code": "// Example usage of queue_enqueue\n// TODO: Add real example",
          "output": null
        }
      ],
      "complexity": null,
      "notes": [],
      "see_also": [],
      "updated_at": null,
      "author_role": null,
      "related": [],
      "manual_path": null,
      "manual_html": null
    },
    "ft_vector_resize": {
      "name": "ft_vector_resize",
      "category": "data_structures",
      "category_path": "data_structures/vector",
      "tags": [
        "basic"
      ],
      "prototype": "bool\t\tft_vector_resize(t_vector *vector, size_t new_capacity)",
      "description": "Utility functions",
      "parameters": [],
      "return_value": "Return value description not available.",
      "examples": [
        {
          "title": "Basic usage of ft_vector_resize",
          "code": "// Example usage of ft_vector_resize\n// TODO: Add real example",
          "output": null
        }
      ],
      "complexity": null,
      "notes": [],
      "see_also": [],
      "updated_at": null,
      "author_role": null,
      "related": [],
      "manual_path": null,
      "manual_html": null
    },
    "ft_strclen": {
      "name": "ft_strclen",
      "category": "strings",
      "category_path": "strings",
      "tags": [
        "string",
        "iteration",
        "basic"
      ],
      "prototype": "ft_strclen(const char *s, int c)",
      "description": "No description available.",
      "parameters": [],
      "return_value": "Return value description not available.",
      "examples": [
        {
          "title": "Basic usage of ft_strclen",
          "code": "// Example usage of ft_strclen\n// TODO: Add real example",
          "output": null
        }
      ],
      "complexity": null,
      "notes": [],
      "see_also": [],
      "updated_at": null,
      "author_role": null,
      "related": [],
      "manual_path": null,
      "manual_html": null
    },
    "parser_token": {
      "name": "parser_token",
      "category": "stdio",
      "category_path": "stdio/ft_printf/src",
      "tags": [
        "basic"
      ],
      "prototype": "/* Function: parser_token */",
      "description": "No description available.",
      "parameters": [],
      "return_value": "Return value description not available.",
      "examples": [
        {
          "title": "Basic usage of parser_token",
          "code": "// Example usage of parser_token\n// TODO: Add real example",
          "output": null
        }
      ],
      "complexity": null,
      "notes": [],
      "see_also": [],
      "updated_at": null,
      "author_role": null,
      "related": [],
      "manual_path": null,
      "manual_html": null
    },
    "ft_isblank": {
      "name": "ft_isblank",
      "category": "ctype",
      "category_path": "ctype",
      "tags": [
        "validation",
        "ctype",
        "basic"
      ],
      "prototype": "int ft_isblank(int c)",
      "description": "Checks whether c is a blank character. In the C locale, blank characters are space (' ') and horizontal tab ('\\t').",
      "parameters": [
        {
          "name": "c",
          "type_name": "int",
          "description": "Character to test (promoted to int)."
        }
      ],
      "return_value": "Returns 1 if c is a blank character, 0 otherwise.",
      "examples": [
        {
          "title": "Basic usage",
          "code": "#include \"libft.h\"\\n#include <stdio.h>\\n\\nint main(void) {\\n    printf(\"%d %d %d\\n\", ft_isblank(' '), ft_isblank('\\t'), ft_isblank('A'));\\n    return 0;\\n}\\n",
          "output": "1 1 0"
        }
      ],
      "complexity": "O(1)",
      "notes": [
        "Behavior mirrors the standard isblank for the 'C' locale.",
        "Argument must be representable as unsigned char or EOF."
      ],
      "see_also": [
        "ft_isspace",
        "ft_isalpha"
      ],
      "updated_at": "2025-09-03",
      "author_role": "maintainer",
      "related": [
        "ft_isspace",
        "ft_isascii"
      ],
      "manual_path": "../manpages/ft_isblank.md",
      "manual_html": "<h1>ft_isblank</h1>\n<h2>im med</h2>\n<hr />\n<h2>Synopsis</h2>\n<pre><code class=\"language-c\">int ft_isblank(int c);\n</code></pre>\n<h2>Description</h2>\n<p>Returns non-zero if <code>c</code> is a blank character in the &quot;C&quot; locale. Recognized blanks are:</p>\n<ul>\n<li>Space <code>' '</code></li>\n<li>Horizontal tab <code>'\\t'</code></li>\n</ul>\n<h2>Return Value</h2>\n<p>1 if blank, 0 otherwise.</p>\n<h2>Notes</h2>\n<p>Use with values representable as <code>unsigned char</code> or <code>EOF</code>.</p>\n"
    },
    "methods": {
      "name": "methods",
      "category": "stdio",
      "category_path": "stdio/ft_scanf/parse_format",
      "tags": [
        "basic"
      ],
      "prototype": "/* Function: methods */",
      "description": "No description available.",
      "parameters": [],
      "return_value": "Return value description not available.",
      "examples": [
        {
          "title": "Basic usage of methods",
          "code": "// Example usage of methods\n// TODO: Add real example",
          "output": null
        }
      ],
      "complexity": null,
      "notes": [],
      "see_also": [],
      "updated_at": null,
      "author_role": null,
      "related": [],
      "manual_path": null,
      "manual_html": null
    },
    "ft_dll_remove_data": {
      "name": "ft_dll_remove_data",
      "category": "data_structures",
      "category_path": "data_structures/doubly_linked_list",
      "tags": [
        "basic"
      ],
      "prototype": "bool\t\t\tft_dll_remove_data(t_doubly_list *list, void *data)",
      "description": "Core functions",
      "parameters": [],
      "return_value": "Return value description not available.",
      "examples": [
        {
          "title": "Basic usage of ft_dll_remove_data",
          "code": "// Example usage of ft_dll_remove_data\n// TODO: Add real example",
          "output": null
        }
      ],
      "complexity": null,
      "notes": [],
      "see_also": [],
      "updated_at": null,
      "author_role": null,
      "related": [],
      "manual_path": null,
      "manual_html": null
    },
    "deletehead": {
      "name": "deletehead",
      "category": "data_structures",
      "category_path": "data_structures/lists",
      "tags": [
        "cleanup",
        "basic"
      ],
      "prototype": "/* Function: deletehead */",
      "description": "No description available.",
      "parameters": [],
      "return_value": "Return value description not available.",
      "examples": [
        {
          "title": "Basic usage of deletehead",
          "code": "// Example usage of deletehead\n// TODO: Add real example",
          "output": null
        }
      ],
      "complexity": null,
      "notes": [],
      "see_also": [],
      "updated_at": null,
      "author_role": null,
      "related": [],
      "manual_path": null,
      "manual_html": null
    },
    "dll_push_back": {
      "name": "dll_push_back",
      "category": "data_structures",
      "category_path": "data_structures/doubly_linked_list",
      "tags": [
        "allocation",
        "intermediate"
      ],
      "prototype": "dll_push_back(t_doubly_list *list, void *data)",
      "description": "No description available.",
      "parameters": [],
      "return_value": "Return value description not available.",
      "examples": [
        {
          "title": "Basic usage of dll_push_back",
          "code": "// Example usage of dll_push_back\n// TODO: Add real example",
          "output": null
        }
      ],
      "complexity": null,
      "notes": [],
      "see_also": [],
      "updated_at": null,
      "author_role": null,
      "related": [],
      "manual_path": null,
      "manual_html": null
    },
    "ft_strdup": {
      "name": "ft_strdup",
      "category": "strings",
      "category_path": "strings",
      "tags": [
        "string",
        "allocation",
        "cleanup",
        "iteration",
        "intermediate"
      ],
      "prototype": "ft_strdup(const char *s)",
      "description": "#include \"TDD/test.h\"",
      "parameters": [],
      "return_value": "Return value description not available.",
      "examples": [
        {
          "title": "Basic usage of ft_strdup",
          "code": "// Example usage of ft_strdup\n// TODO: Add real example",
          "output": null
        }
      ],
      "complexity": null,
      "notes": [],
      "see_also": [],
      "updated_at": null,
      "author_role": null,
      "related": [],
      "manual_path": null,
      "manual_html": null
    },
    "parser_write_nbr": {
      "name": "parser_write_nbr",
      "category": "stdio",
      "category_path": "stdio/ft_printf/src",
      "tags": [
        "basic"
      ],
      "prototype": "/* Function: parser_write_nbr */",
      "description": "No description available.",
      "parameters": [],
      "return_value": "Return value description not available.",
      "examples": [
        {
          "title": "Basic usage of parser_write_nbr",
          "code": "// Example usage of parser_write_nbr\n// TODO: Add real example",
          "output": null
        }
      ],
      "complexity": null,
      "notes": [],
      "see_also": [],
      "updated_at": null,
      "author_role": null,
      "related": [],
      "manual_path": null,
      "manual_html": null
    },
    "ft_cl_push_back": {
      "name": "ft_cl_push_back",
      "category": "data_structures",
      "category_path": "data_structures/circular_linked_list",
      "tags": [
        "iteration",
        "basic"
      ],
      "prototype": "bool\t\t\tft_cl_push_back(t_circular_list *list, void *data)",
      "description": "Points to last node (last->next is first)",
      "parameters": [],
      "return_value": "Return value description not available.",
      "examples": [
        {
          "title": "Basic usage of ft_cl_push_back",
          "code": "// Example usage of ft_cl_push_back\n// TODO: Add real example",
          "output": null
        }
      ],
      "complexity": null,
      "notes": [],
      "see_also": [],
      "updated_at": null,
      "author_role": null,
      "related": [],
      "manual_path": null,
      "manual_html": null
    },
    "search_content_lst": {
      "name": "search_content_lst",
      "category": "data_structures",
      "category_path": "data_structures/lists",
      "tags": [
        "iteration",
        "basic"
      ],
      "prototype": "search_content_lst(t_list *head, int x)",
      "description": "No description available.",
      "parameters": [],
      "return_value": "Return value description not available.",
      "examples": [
        {
          "title": "Basic usage of search_content_lst",
          "code": "// Example usage of search_content_lst\n// TODO: Add real example",
          "output": null
        }
      ],
      "complexity": null,
      "notes": [],
      "see_also": [],
      "updated_at": null,
      "author_role": null,
      "related": [],
      "manual_path": null,
      "manual_html": null
    },
    "skip_spaces": {
      "name": "skip_spaces",
      "category": "stdlib",
      "category_path": "stdlib",
      "tags": [
        "iteration",
        "basic"
      ],
      "prototype": "skip_spaces(int *i, int size, char *str)",
      "description": "@param i optional depending on implementation",
      "parameters": [],
      "return_value": "Return value description not available.",
      "examples": [
        {
          "title": "Basic usage of skip_spaces",
          "code": "// Example usage of skip_spaces\n// TODO: Add real example",
          "output": null
        }
      ],
      "complexity": null,
      "notes": [],
      "see_also": [],
      "updated_at": null,
      "author_role": null,
      "related": [],
      "manual_path": null,
      "manual_html": null
    },
    "ft_tolower": {
      "name": "ft_tolower",
      "category": "memory",
      "category_path": "memory",
      "tags": [
        "conversion",
        "allocation",
        "intermediate"
      ],
      "prototype": "int\t\tft_tolower(int c)",
      "description": "No description available.",
      "parameters": [],
      "return_value": "Return value description not available.",
      "examples": [
        {
          "title": "Basic usage of ft_tolower",
          "code": "// Example usage of ft_tolower\n// TODO: Add real example",
          "output": null
        }
      ],
      "complexity": null,
      "notes": [],
      "see_also": [],
      "updated_at": null,
      "author_role": null,
      "related": [],
      "manual_path": null,
      "manual_html": null
    },
    "queue_front": {
      "name": "queue_front",
      "category": "data_structures",
      "category_path": "data_structures/queue",
      "tags": [
        "basic"
      ],
      "prototype": "queue_front(t_queue *queue)",
      "description": "No description available.",
      "parameters": [],
      "return_value": "Return value description not available.",
      "examples": [
        {
          "title": "Basic usage of queue_front",
          "code": "// Example usage of queue_front\n// TODO: Add real example",
          "output": null
        }
      ],
      "complexity": null,
      "notes": [],
      "see_also": [],
      "updated_at": null,
      "author_role": null,
      "related": [],
      "manual_path": null,
      "manual_html": null
    },
    "ft_cl_clear": {
      "name": "ft_cl_clear",
      "category": "data_structures",
      "category_path": "data_structures/circular_linked_list",
      "tags": [
        "iteration",
        "basic"
      ],
      "prototype": "void\t\t\tft_cl_clear(t_circular_list *list)",
      "description": "Points to last node (last->next is first)",
      "parameters": [],
      "return_value": "Return value description not available.",
      "examples": [
        {
          "title": "Basic usage of ft_cl_clear",
          "code": "// Example usage of ft_cl_clear\n// TODO: Add real example",
          "output": null
        }
      ],
      "complexity": null,
      "notes": [],
      "see_also": [],
      "updated_at": null,
      "author_role": null,
      "related": [],
      "manual_path": null,
      "manual_html": null
    },
    "ft_scanf": {
      "name": "ft_scanf",
      "category": "stdio",
      "category_path": "stdio/ft_scanf",
      "tags": [
        "input",
        "iteration",
        "basic"
      ],
      "prototype": "ft_scanf(const char *format, ...)",
      "description": "No description available.",
      "parameters": [],
      "return_value": "Return value description not available.",
      "examples": [
        {
          "title": "Basic usage of ft_scanf",
          "code": "// Example usage of ft_scanf\n// TODO: Add real example",
          "output": null
        }
      ],
      "complexity": null,
      "notes": [],
      "see_also": [],
      "updated_at": null,
      "author_role": null,
      "related": [],
      "manual_path": null,
      "manual_html": null
    }
  },
  "order": [
    "ft_strmapi",
    "ft_atol",
    "ft_strtrim",
    "ft_strndup",
    "ft_countwords",
    "ft_strnjoin",
    "ft_strchr",
    "ft_substr",
    "ft_strncpy",
    "ft_strlcpy",
    "ft_super_trim",
    "ft_strrchr",
    "ft_strnstr",
    "helper_super_trim",
    "ft_strjoin",
    "ft_strncmp",
    "ft_strlen",
    "ft_strcmp",
    "ft_strstr",
    "ft_striteri",
    "ft_strclen",
    "ft_split",
    "ft_strdup",
    "ft_strtok",
    "ft_strlcat",
    "ft_countwords_space",
    "ft_reverse_string",
    "ft_memchr",
    "ft_memcmp",
    "ft_bzero",
    "ft_swap",
    "search_and_replace",
    "ft_memcpy",
    "memory_tracker",
    "ft_memset",
    "ft_tolower",
    "ft_toupper",
    "ft_print_hex",
    "ft_print_ascii",
    "ft_memmove",
    "helpers",
    "double",
    "decimal",
    "integer",
    "string",
    "char",
    "float",
    "methods",
    "ft_scanf",
    "main_bak",
    "ft_vfscanf_fd",
    "ft_fscanf_fd",
    "ft_fscanf_exec",
    "ft_vfscanf_exec",
    "ft_fscanf_sh",
    "ft_vfscanf_sh",
    "writer",
    "ft_printf",
    "parser_write_string",
    "parser_hash_flag",
    "parser_padding",
    "string_length",
    "parser",
    "parser_write_nbr",
    "writer_write_format",
    "parser_parse_format_string",
    "parser_token",
    "ft_putstr_fd",
    "ft_putnbr_fd",
    "ft_putnbr_base",
    "ft_putchar_fd",
    "ft_log10",
    "ft_do_op",
    "ft_first_word",
    "ft_putendl_fd",
    "ft_fprintf",
    "ft_sprintf",
    "ft_vsprintf",
    "ft_snprintf",
    "ft_remove_fd_node",
    "get_next_line",
    "get_next_line_utils",
    "first_word",
    "ft_atoi",
    "ft_realloc",
    "ft_dbl_free",
    "arena",
    "ft_utoa",
    "ft_atoi_base",
    "ft_realloc_grow",
    "ft_realloc_shrink_to",
    "ft_calloc",
    "pool_stats",
    "pool_helpers",
    "pool",
    "skip_spaces",
    "ft_itoa",
    "ft_xtoa",
    "slab",
    "slab_helpers",
    "slab_alloc",
    "slab_destroy",
    "slab_stats",
    "slab_free",
    "dll_utility",
    "dll_access",
    "dll_pop_front",
    "dll_create",
    "dll_search",
    "dll_push_back",
    "dll_print",
    "ft_dll_destroy",
    "ft_dll_push_front",
    "ft_dll_push_back",
    "ft_dll_set",
    "ft_dll_insert",
    "ft_dll_remove_data",
    "ft_dll_size",
    "ft_dll_is_empty",
    "ft_dll_clear",
    "ft_dll_reverse",
    "ft_dll_find",
    "ft_dll_contains",
    "ft_dll_print_addresses",
    "ft_dll_print_reverse",
    "dll_insert_remove",
    "dll_push_front",
    "dll_destroy",
    "dll_pop_back",
    "queue_dequeue",
    "queue_rear",
    "ft_queue_destroy",
    "ft_queue_enqueue",
    "ft_queue_size",
    "ft_queue_is_empty",
    "ft_queue_clear",
    "ft_queue_print_addresses",
    "queue_create",
    "queue_is_empty",
    "queue_enqueue",
    "queue_size",
    "queue_front",
    "queue_destroy",
    "queue_print",
    "queue_clear",
    "cl_utility",
    "cl_insert_remove",
    "cl_destroy",
    "cl_print",
    "cl_access",
    "cl_search",
    "cl_create",
    "ft_cl_destroy",
    "ft_cl_push_front",
    "ft_cl_push_back",
    "ft_cl_set",
    "ft_cl_insert",
    "ft_cl_remove_data",
    "ft_cl_size",
    "ft_cl_is_empty",
    "ft_cl_clear",
    "ft_cl_rotate_forward",
    "ft_cl_rotate_backward",
    "ft_cl_find",
    "ft_cl_contains",
    "ft_cl_print_addresses",
    "ft_cl_print_n_times",
    "cl_push",
    "cl_pop",
    "vector_print",
    "vector_remove",
    "vector_insert",
    "vector_binary_search",
    "vector_set",
    "vector_destroy",
    "vector_reserve",
    "ft_vector_destroy",
    "ft_vector_add_back",
    "ft_vector_set",
    "ft_vector_size",
    "ft_vector_capacity",
    "ft_vector_is_empty",
    "ft_vector_clear",
    "ft_vector_resize",
    "ft_vector_reserve",
    "ft_vector_insert",
    "ft_vector_print_addresses",
    "ft_vector_binary_search",
    "vector_clear",
    "vector_pop_back",
    "vector_resize",
    "vector_create",
    "vector_add_back",
    "vector_get",
    "vector_capacity",
    "vector_size",
    "vector_is_empty",
    "search_content_lst",
    "ft_lstmap",
    "remove_duplicates",
    "deleteAtPosition",
    "ft_lstclear",
    "ft_create_node",
    "create_linked_list",
    "ft_lstsize",
    "ft_lstiter",
    "ft_lstadd_back",
    "ft_lstadd_front",
    "ft_lstdelone",
    "sorted_merge",
    "ft_lstnew",
    "issorted",
    "ft_lstlast",
    "kth_end_from_linked_list",
    "deletehead",
    "err_handler_methods",
    "utils_calc",
    "general_err_handler",
    "mapinfo",
    "scheme_menu",
    "draw_info",
    "menu",
    "camera_zoom",
    "camera",
    "projection_orthographic",
    "camera_perspective",
    "matrix_init",
    "camera_project",
    "input_handler_destroy",
    "event_system",
    "input_handler",
    "input_handler_handlers",
    "input_handler_events",
    "ft_isxdigit",
    "ft_isprint",
    "ft_isascii",
    "ft_isdigit",
    "ft_islower",
    "ft_isgraph",
    "ft_isblank",
    "ft_hex_digit",
    "ft_isalpha",
    "ft_isalnum",
    "ft_isspace",
    "ft_isupper",
    "tree_path",
    "ft_interactive",
    "ft_utils",
    "ft_banner",
    "ft_menu",
    "ft_table_utils",
    "ft_table",
    "utils",
    "ft_print_banner",
    "ft_print_boxed",
    "ft_clear_screen",
    "ft_move_cursor",
    "ft_print_centered",
    "ft_print_table",
    "ft_print_loading_spinner",
    "ft_print_notification",
    "ft_print_code_block",
    "ft_print_diff",
    "ft_print_emoji_status",
    "ft_typewriter_effect",
    "ft_print_menu",
    "ft_print_timeline",
    "ft_print_graph",
    "ft_get_terminal_width",
    "ft_get_terminal_height",
    "ft_advanced",
    "ft_graph",
    "ft_print_array",
    "ft_print_list",
    "sigsegv",
    "ft_print_memory",
    "strand_sort",
    "insertion_sort",
    "chunk_process",
    "cycle_sort",
    "greedy_helpers",
    "ft_quick_sort",
    "tree_sort",
    "intro_sort",
    "counting_sort",
    "3-way-merge_sort",
    "chunk_sort",
    "ft_chunk_sort",
    "ft_merge_sort",
    "ft_gnome_sort",
    "ft_selection_sort",
    "ft_cycle_sort",
    "ft_min",
    "selection_sort",
    "tree",
    "greedy_sort",
    "comb_sort",
    "mini_push_swap",
    "chunk_sort_helpers",
    "utils2",
    "pigeonhole_sort",
    "shell_sort",
    "3-way-merge_sort_helpers",
    "hybrid",
    "radix_sort",
    "hybrid2",
    "tag_sort",
    "tim_sort",
    "heap_sort",
    "gnome_sort",
    "coktail_shaker_sort",
    "cartesian_sort",
    "merge_sort",
    "ksort",
    "odd_even_sort",
    "pancake_sort",
    "bitonic_sort",
    "stooge_sort",
    "sleep_sort",
    "bubble_sort",
    "ft_fabs",
    "ft_fprime",
    "ft_add_prime_sum",
    "ft_hcf",
    "ft_add",
    "ft_abs",
    "ft_is_negative",
    "ft_multiply",
    "ft_subtract",
    "ft_max",
    "ft_power",
    "ft_sqrt",
    "ft_is_prime",
    "ft_is_power2",
    "ft_divide",
    "ft_modulo",
    "ft_lcm",
    "ft_tab_mult",
    "ft_round",
    "ft_fmaxf",
    "ft_fminf",
    "get_raw_color",
    "ft_isprime",
    "ft_lerp",
    "ease-in-out",
    "lerp_chan",
    "ft_is_power_of_2",
    "ft_substract",
    "vdot",
    "quat_from_axis_angle",
    "quat_normalize",
    "rot_quatmatrix",
    "quat_to_matrix4",
    "vzero",
    "trackball",
    "vsub",
    "normalize_quat",
    "vcopy",
    "add_quats",
    "vscale",
    "vlength",
    "vcross",
    "vadd",
    "trackball_rotate",
    "point_trackball",
    "quat_slerp",
    "quat_to_matrix",
    "vnormal",
    "quat_mult",
    "quat_init",
    "axis_to_quat",
    "vset",
    "scale",
    "orthographic",
    "isometric_view",
    "translate",
    "lerp_point",
    "valid_pixel",
    "set_color",
    "draw_dot",
    "gradient",
    "collision",
    "draw_line",
    "colors",
    "putpixel",
    "ft_bending",
    "z_div",
    "get_color",
    "matrix_identity",
    "matric_from_quaternon",
    "matrix_translate",
    "matrix_rotate",
    "matric_mult",
    "matrix_transpose",
    "matrix_scale",
    "matrix_vec_multiply",
    "matrix_copy",
    "matrix_zero",
    "shadow",
    "ft_printfsfsfsdfsadfsddsfdsds",
    "ft_vector_create"
  ]
}