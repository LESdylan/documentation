// ==========================================================================
// Tag Components
// ==========================================================================

.tag {
  display: inline-flex;
  align-items: center;
  gap: space('2');
  padding: space('2') space('3');
  border-radius: radius('full');
  font-size: map-get($font-sizes, 'xs');
  font-weight: map-get($font-weights, 'medium');
  text-transform: uppercase;
  letter-spacing: 0.05em;
  border: 1px solid transparent;
  position: relative;
  overflow: hidden;
  transition: all transition('base');
  
  // Base styles
  background: rgba(color('surface-tertiary'), 0.6);
  color: color('text-tertiary');
  border-color: color('border-muted');
  
  // Shimmer effect
  &::before {
    content: '';
    position: absolute;
    top: 0;
    left: -100%;
    width: 100%;
    height: 100%;
    background: linear-gradient(90deg, 
      transparent, 
      rgba(255, 255, 255, 0.1), 
      transparent
    );
    transition: transition('slow');
  }
  
  &:hover::before {
    left: 100%;
  }
  
  // Difficulty levels
  &.basic {
    background: linear-gradient(135deg, 
      rgba(color('accent-green'), 0.2), 
      rgba(color('accent-teal'), 0.1)
    );
    color: color('accent-green');
    border-color: rgba(color('accent-green'), 0.3);
    
    &::after {
      content: '●';
      color: color('accent-green');
    }
  }
  
  &.intermediate {
    background: linear-gradient(135deg, 
      rgba(color('accent-orange'), 0.2), 
      rgba(color('accent-orange'), 0.1)
    );
    color: color('accent-orange');
    border-color: rgba(color('accent-orange'), 0.3);
    
    &::after {
      content: '●●';
      color: color('accent-orange');
    }
  }
  
  &.advanced {
    background: linear-gradient(135deg, 
      rgba(color('accent-red'), 0.2), 
      rgba(color('accent-pink'), 0.1)
    );
    color: color('accent-red');
    border-color: rgba(color('accent-red'), 0.3);
    
    &::after {
      content: '●●●';
      color: color('accent-red');
    }
  }
  
  // Category specific tags
  &.string {
    background: linear-gradient(135deg, 
      rgba(color('primary'), 0.2), 
      rgba(color('primary'), 0.1)
    );
    color: color('primary');
    border-color: rgba(color('primary'), 0.3);
  }
  
  &.memory {
    background: linear-gradient(135deg, 
      rgba(color('accent-purple'), 0.2), 
      rgba(color('accent-purple'), 0.1)
    );
    color: color('accent-purple');
    border-color: rgba(color('accent-purple'), 0.3);
  }
  
  &.validation {
    background: linear-gradient(135deg, 
      rgba(color('accent-teal'), 0.2), 
      rgba(color('accent-teal'), 0.1)
    );
    color: color('accent-teal');
    border-color: rgba(color('accent-teal'), 0.3);
  }
  
  &.allocation {
    background: linear-gradient(135deg, 
      rgba(color('accent-red'), 0.2), 
      rgba(color('accent-orange'), 0.1)
    );
    color: color('accent-red');
    border-color: rgba(color('accent-red'), 0.3);
  }
  
  &.output {
    background: linear-gradient(135deg, 
      rgba(color('accent-green'), 0.2), 
      rgba(color('accent-green'), 0.1)
    );
    color: color('accent-green');
    border-color: rgba(color('accent-green'), 0.3);
  }
  
  &.ctype {
    background: linear-gradient(135deg, 
      rgba(color('accent-teal'), 0.2), 
      rgba(color('primary'), 0.1)
    );
    color: color('accent-teal');
    border-color: rgba(color('accent-teal'), 0.3);
  }
  
  &.vector,
  &.queue,
  &.linked_list {
    background: linear-gradient(135deg, 
      rgba(color('accent-purple'), 0.2), 
      rgba(color('primary'), 0.1)
    );
    color: color('accent-purple');
    border-color: rgba(color('accent-purple'), 0.3);
  }
  
  &.insertion {
    background: linear-gradient(135deg, 
      rgba(color('accent-orange'), 0.2), 
      rgba(color('accent-green'), 0.1)
    );
    color: color('accent-orange');
    border-color: rgba(color('accent-orange'), 0.3);
  }
}

// Tag container animations
.function-card__tags {
  .tag {
    opacity: 0;
    transform: scale(0.8);
    animation: tagPop 0.4s ease-out forwards;
    
    @for $i from 1 through 8 {
      &:nth-child(#{$i}) {
        animation-delay: #{$i * 0.05}s;
      }
    }
  }
}

@keyframes tagPop {
  0% {
    opacity: 0;
    transform: scale(0.8);
  }
  70% {
    transform: scale(1.05);
  }
  100% {
    opacity: 1;
    transform: scale(1);
  }
}
